{
  "stats": {
    "suites": 234,
    "tests": 603,
    "passes": 603,
    "pending": 0,
    "failures": 0,
    "start": "2024-10-18T07:27:35.849Z",
    "end": "2024-10-18T07:29:01.835Z",
    "duration": 85986,
    "testsRegistered": 603,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9229b9e2-0faa-4e54-be65-a96e05953b6e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: beforeAll in \"{root}\"",
          "fullTitle": "\"before all\" hook: beforeAll in \"{root}\"",
          "timedOut": false,
          "duration": 60,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.log(\"run before all hook\");\nif (!process.env.TEST_DB_TYPE) process.env.TEST_DB_TYPE = \"sql\";\nif (process.env.TEST_DB_TYPE === \"sql\") {\n    require(\"../models/sql/init\").then(() => {\n        done();\n    });\n} else if (process.env.TEST_DB_TYPE === \"mongodb\") {\n    const mongoose = require(\"mongoose\");\n    mongoose.connection.on(\"connected\", () => {\n        console.log(\"connected to mongodb\");\n        done();\n    });\n    require(\"../models/mongodb/index\");\n}",
          "err": {},
          "uuid": "090a1895-5031-491b-86e8-aba02a2209d6",
          "parentUUID": "9229b9e2-0faa-4e54-be65-a96e05953b6e",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "80b8a650-d182-41ca-95a5-d5826badfe38",
          "title": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\convert-image\\convertInstanceImage.test.js",
          "file": "\\test\\api\\dicom-web\\convert-image\\convertInstanceImage.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image'\"",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' \"before all\" hook in \"Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image'\"",
              "timedOut": false,
              "duration": 331,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\")\n);\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/forStore/PDF/pdf.dcm\")\n);\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/forStore/PDF/pdf2.dcm\")\n);",
              "err": {},
              "uuid": "bcca9720-2da1-4dca-ad4f-866f3fcb66bf",
              "parentUUID": "80b8a650-d182-41ca-95a5-d5826badfe38",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should convert instance to type: JPEG (image/jpeg)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: JPEG (image/jpeg)",
              "timedOut": false,
              "duration": 246,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "2a919560-f4e1-48eb-8240-08c467321e77",
              "parentUUID": "80b8a650-d182-41ca-95a5-d5826badfe38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: GIF (image/gif)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: GIF (image/gif)",
              "timedOut": false,
              "duration": 957,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "dea924c4-bc8c-46e8-b9c1-b1bc1be4dc9f",
              "parentUUID": "80b8a650-d182-41ca-95a5-d5826badfe38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: BMP (image/bmp)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: BMP (image/bmp)",
              "timedOut": false,
              "duration": 284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "4e0f9f13-4b82-4463-8467-1d66f802b8ba",
              "parentUUID": "80b8a650-d182-41ca-95a5-d5826badfe38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: JPG (image/jp2)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: JPG (image/jp2)",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "95e23ba5-1566-4591-afa1-ccd248f006f9",
              "parentUUID": "80b8a650-d182-41ca-95a5-d5826badfe38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: PNG (image/png)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: PNG (image/png)",
              "timedOut": false,
              "duration": 207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "aa875569-116c-433e-ac2f-8417d6183101",
              "parentUUID": "80b8a650-d182-41ca-95a5-d5826badfe38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: TIFF (image/tiff)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: TIFF (image/tiff)",
              "timedOut": false,
              "duration": 365,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "d591ff76-42c3-4e56-973d-ff6f5c892e1e",
              "parentUUID": "80b8a650-d182-41ca-95a5-d5826badfe38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: MP4 (video/mp4)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: MP4 (video/mp4)",
              "timedOut": false,
              "duration": 277,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "19611b7e-225d-4119-834b-6b2541ce163d",
              "parentUUID": "80b8a650-d182-41ca-95a5-d5826badfe38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: AVI (video/x-msvideo)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: AVI (video/x-msvideo)",
              "timedOut": false,
              "duration": 258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "56203456-f2bc-4bcf-979a-7a6cf6909267",
              "parentUUID": "80b8a650-d182-41ca-95a5-d5826badfe38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: MPG (video/mpeg)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: MPG (video/mpeg)",
              "timedOut": false,
              "duration": 266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "3c10ad92-2e61-4db9-9181-fd602dea3022",
              "parentUUID": "80b8a650-d182-41ca-95a5-d5826badfe38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: H265 (video/H265)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: H265 (video/H265)",
              "timedOut": false,
              "duration": 401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "7120824a-6f4b-4bbe-bc40-51e45a105ee5",
              "parentUUID": "80b8a650-d182-41ca-95a5-d5826badfe38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should covert instance to PDF",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should covert instance to PDF",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${PDF_STUDY_UID}/series/${PDF_SERIES_UID}/instances/${PDF_INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"application/pdf\"\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "f5f5c8bb-e80a-445a-b1ac-aa2a0c54732a",
              "parentUUID": "80b8a650-d182-41ca-95a5-d5826badfe38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when using invalid media type in accept header",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should raise 400 (Bad Request) when using invalid media type in accept header",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"application/json\"\n    }\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "e4f7ae9a-9ce8-4550-9011-6f641df20110",
              "parentUUID": "80b8a650-d182-41ca-95a5-d5826badfe38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when instance not exist",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should raise 404 (Not Found) when instance not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}2486/convert-image`,\n    headers: {\n        \"Accept\": \"application/pdf\"\n    }\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "61f88485-2cc3-4a43-97f7-c713503e4125",
              "parentUUID": "80b8a650-d182-41ca-95a5-d5826badfe38",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2a919560-f4e1-48eb-8240-08c467321e77",
            "dea924c4-bc8c-46e8-b9c1-b1bc1be4dc9f",
            "4e0f9f13-4b82-4463-8467-1d66f802b8ba",
            "95e23ba5-1566-4591-afa1-ccd248f006f9",
            "aa875569-116c-433e-ac2f-8417d6183101",
            "d591ff76-42c3-4e56-973d-ff6f5c892e1e",
            "19611b7e-225d-4119-834b-6b2541ce163d",
            "56203456-f2bc-4bcf-979a-7a6cf6909267",
            "3c10ad92-2e61-4db9-9181-fd602dea3022",
            "7120824a-6f4b-4bbe-bc40-51e45a105ee5",
            "f5f5c8bb-e80a-445a-b1ac-aa2a0c54732a",
            "e4f7ae9a-9ce8-4550-9011-6f641df20110",
            "61f88485-2cc3-4a43-97f7-c713503e4125"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3316,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ad769c1f-c567-4930-b80a-bafd68353b4a",
          "title": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\convert-image\\convertSeriesImages.test.js",
          "file": "\\test\\api\\dicom-web\\convert-image\\convertSeriesImages.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image'\"",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' \"before all\" hook in \"Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image'\"",
              "timedOut": false,
              "duration": 142,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\")\n);\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/forStore/PDF/pdf.dcm\")\n);\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/forStore/PDF/pdf2.dcm\")\n);",
              "err": {},
              "uuid": "bfca59d0-858f-4ed2-aa19-5c8902151ca7",
              "parentUUID": "ad769c1f-c567-4930-b80a-bafd68353b4a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should convert series' instances to type: JPEG (image/jpeg)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: JPEG (image/jpeg)",
              "timedOut": false,
              "duration": 139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "cde220a2-a018-4a68-ad55-92f0c925e32a",
              "parentUUID": "ad769c1f-c567-4930-b80a-bafd68353b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: GIF (image/gif)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: GIF (image/gif)",
              "timedOut": false,
              "duration": 268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "74ba033a-b750-49f7-8979-107ad1639e6e",
              "parentUUID": "ad769c1f-c567-4930-b80a-bafd68353b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: BMP (image/bmp)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: BMP (image/bmp)",
              "timedOut": false,
              "duration": 299,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "5c8ef9bc-7ce3-48c7-83a2-06aec85037ea",
              "parentUUID": "ad769c1f-c567-4930-b80a-bafd68353b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: JPG (image/jp2)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: JPG (image/jp2)",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "44b36634-13b0-4e4a-9735-f4b2207c5e47",
              "parentUUID": "ad769c1f-c567-4930-b80a-bafd68353b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: PNG (image/png)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: PNG (image/png)",
              "timedOut": false,
              "duration": 182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "4c75fa80-2bd2-46ad-b031-123505428cfb",
              "parentUUID": "ad769c1f-c567-4930-b80a-bafd68353b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: TIFF (image/tiff)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: TIFF (image/tiff)",
              "timedOut": false,
              "duration": 288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "9cc8f20e-cb89-46c5-ba3c-c63d1d8e4add",
              "parentUUID": "ad769c1f-c567-4930-b80a-bafd68353b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: MP4 (video/mp4)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: MP4 (video/mp4)",
              "timedOut": false,
              "duration": 292,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "f197c329-7e33-4dad-b928-4238f12c5749",
              "parentUUID": "ad769c1f-c567-4930-b80a-bafd68353b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: AVI (video/x-msvideo)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: AVI (video/x-msvideo)",
              "timedOut": false,
              "duration": 256,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "35a51348-6bef-4ae8-9efb-a6f191716dc6",
              "parentUUID": "ad769c1f-c567-4930-b80a-bafd68353b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: MPG (video/mpeg)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: MPG (video/mpeg)",
              "timedOut": false,
              "duration": 246,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "f7ed5e3b-834e-4a11-b8f0-1d7a9b7fd3dd",
              "parentUUID": "ad769c1f-c567-4930-b80a-bafd68353b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: H265 (video/H265)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: H265 (video/H265)",
              "timedOut": false,
              "duration": 378,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "77cc1b46-0a6c-46ec-9b79-f6e4150a13d2",
              "parentUUID": "ad769c1f-c567-4930-b80a-bafd68353b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should covert series' instances to PDF",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should covert series' instances to PDF",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${PDF_STUDY_UID}/series/${PDF_SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"application/pdf\"\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "320d9112-e3d0-4165-a040-3e77a56d43c4",
              "parentUUID": "ad769c1f-c567-4930-b80a-bafd68353b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when using invalid media type in accept header",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should raise 400 (Bad Request) when using invalid media type in accept header",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"application/json\"\n    }\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "eb264346-0a24-49e3-9c33-9100e77bf70c",
              "parentUUID": "ad769c1f-c567-4930-b80a-bafd68353b4a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when series not exist",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should raise 404 (Not Found) when series not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}2486/convert-image`,\n    headers: {\n        \"Accept\": \"application/pdf\"\n    }\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "1dd1efab-2458-4b28-97ce-16aea53db34d",
              "parentUUID": "ad769c1f-c567-4930-b80a-bafd68353b4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cde220a2-a018-4a68-ad55-92f0c925e32a",
            "74ba033a-b750-49f7-8979-107ad1639e6e",
            "5c8ef9bc-7ce3-48c7-83a2-06aec85037ea",
            "44b36634-13b0-4e4a-9735-f4b2207c5e47",
            "4c75fa80-2bd2-46ad-b031-123505428cfb",
            "9cc8f20e-cb89-46c5-ba3c-c63d1d8e4add",
            "f197c329-7e33-4dad-b928-4238f12c5749",
            "35a51348-6bef-4ae8-9efb-a6f191716dc6",
            "f7ed5e3b-834e-4a11-b8f0-1d7a9b7fd3dd",
            "77cc1b46-0a6c-46ec-9b79-f6e4150a13d2",
            "320d9112-e3d0-4165-a040-3e77a56d43c4",
            "eb264346-0a24-49e3-9c33-9100e77bf70c",
            "1dd1efab-2458-4b28-97ce-16aea53db34d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2391,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
          "title": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\convert-image\\convetStudyImages.test.js",
          "file": "\\test\\api\\dicom-web\\convert-image\\convetStudyImages.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Convert Images convert study's instances '/dicom-web/:studyUID/convert-image'\"",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' \"before all\" hook in \"Convert Images convert study's instances '/dicom-web/:studyUID/convert-image'\"",
              "timedOut": false,
              "duration": 160,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\")\n);\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/forStore/PDF/pdf.dcm\")\n);\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/forStore/PDF/pdf2.dcm\")\n);",
              "err": {},
              "uuid": "f3497b2b-ecfc-4e59-a33e-4b71d9e31a5c",
              "parentUUID": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should convert study's instances to type: JPEG (image/jpeg)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: JPEG (image/jpeg)",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "782c664a-2b25-4486-8b62-826bbf70db4d",
              "parentUUID": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: GIF (image/gif)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: GIF (image/gif)",
              "timedOut": false,
              "duration": 254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "d48f628e-dd86-4087-bea1-36fca70399e5",
              "parentUUID": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: BMP (image/bmp)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: BMP (image/bmp)",
              "timedOut": false,
              "duration": 382,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "c69e0165-72ff-4626-8f36-85d3f850118b",
              "parentUUID": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: JPG (image/jp2)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: JPG (image/jp2)",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "3ec17dee-6878-4e75-b171-7c520ffebd49",
              "parentUUID": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: PNG (image/png)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: PNG (image/png)",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "7976e987-4298-49e3-b029-f97947d34802",
              "parentUUID": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: TIFF (image/tiff)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: TIFF (image/tiff)",
              "timedOut": false,
              "duration": 296,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "86670f81-8c10-4a2f-a66e-b513dbd09c01",
              "parentUUID": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: MP4 (video/mp4)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: MP4 (video/mp4)",
              "timedOut": false,
              "duration": 295,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "3d429014-897d-433e-93b4-d653f78ed16b",
              "parentUUID": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: AVI (video/x-msvideo)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: AVI (video/x-msvideo)",
              "timedOut": false,
              "duration": 244,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "07f80b82-c551-4de2-bfea-ea552e3c9d0d",
              "parentUUID": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: MPG (video/mpeg)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: MPG (video/mpeg)",
              "timedOut": false,
              "duration": 252,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "671d5d6b-fe97-43e8-9b2f-925262cca707",
              "parentUUID": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: H265 (video/H265)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: H265 (video/H265)",
              "timedOut": false,
              "duration": 378,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "86489d79-3c18-4b16-bed6-8911f2b13732",
              "parentUUID": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should covert study's instances to PDF",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should covert study's instances to PDF",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${PDF_STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"application/pdf\"\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "dacd30fd-2857-4291-807d-2243b8a99965",
              "parentUUID": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when using invalid media type in accept header",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should raise 400 (Bad Request) when using invalid media type in accept header",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"application/json\"\n    }\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "e899238b-84f5-4eb5-8d6d-dfbc7ee40000",
              "parentUUID": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when study not exist",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should raise 404 (Not Found) when study not exist",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}2486/convert-image`,\n    headers: {\n        \"Accept\": \"application/pdf\"\n    }\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "bfa62cee-0c72-40af-a8f3-12b0fbaa4486",
              "parentUUID": "f1403cfd-89b7-4719-96ae-aa6c8f394578",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "782c664a-2b25-4486-8b62-826bbf70db4d",
            "d48f628e-dd86-4087-bea1-36fca70399e5",
            "c69e0165-72ff-4626-8f36-85d3f850118b",
            "3ec17dee-6878-4e75-b171-7c520ffebd49",
            "7976e987-4298-49e3-b029-f97947d34802",
            "86670f81-8c10-4a2f-a66e-b513dbd09c01",
            "3d429014-897d-433e-93b4-d653f78ed16b",
            "07f80b82-c551-4de2-bfea-ea552e3c9d0d",
            "671d5d6b-fe97-43e8-9b2f-925262cca707",
            "86489d79-3c18-4b16-bed6-8911f2b13732",
            "dacd30fd-2857-4291-807d-2243b8a99965",
            "e899238b-84f5-4eb5-8d6d-dfbc7ee40000",
            "bfa62cee-0c72-40af-a8f3-12b0fbaa4486"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2538,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "00351404-2ae3-449f-b98d-0af82acb3b41",
          "title": "delete dicom with reason",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\deleteWithReason.test.js",
          "file": "\\test\\api\\dicom-web\\deleteWithReason.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"delete dicom with reason\"",
              "fullTitle": "delete dicom with reason \"before each\" hook in \"delete dicom with reason\"",
              "timedOut": false,
              "duration": 1089,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.truncate();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "8d38ed18-7483-4a8e-9dce-3f529312b3b2",
              "parentUUID": "00351404-2ae3-449f-b98d-0af82acb3b41",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3a4773f5-37a2-4915-bfca-4ce663c99964",
              "title": "instance level",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\deleteWithReason.test.js",
              "file": "\\test\\api\\dicom-web\\deleteWithReason.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should delete instance with reason and expect 4 instances in series",
                  "fullTitle": "delete dicom with reason instance level Should delete instance with reason and expect 4 instances in series",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nexpect(res.statusCode).to.equal(200);\nlet getReasonRes = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/delete-reason/${INSTANCE_UID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(getReasonRes.statusCode).to.equal(200);\n\nlet reason = await getReasonRes.json();\nexpect(reason).have.property(\"uid\").to.be.equal(INSTANCE_UID);\nexpect(reason).have.property(\"reason\").to.be.equal(\"test\");\nexpect(reason).have.property(\"deleteBy\").to.be.equal(\"NONE\");\nlet queryRes = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(queryRes.statusCode).to.equal(200);\nlet instances = await queryRes.json();\nexpect(instances).to.be.an(\"array\").have.lengthOf(4);",
                  "err": {},
                  "uuid": "73d1190d-23db-465f-9c97-dd4e3c66d5f6",
                  "parentUUID": "3a4773f5-37a2-4915-bfca-4ce663c99964",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73d1190d-23db-465f-9c97-dd4e3c66d5f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "0cb1f7c1-b4c7-4a07-a0ed-2750f58f8bbb",
              "title": "series level",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\deleteWithReason.test.js",
              "file": "\\test\\api\\dicom-web\\deleteWithReason.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should delete series with reason and expect 2 series in study",
                  "fullTitle": "delete dicom with reason series level Should delete series with reason and expect 2 series in study",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nexpect(res.statusCode).to.equal(200);\nlet getReasonRes = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/delete-reason/${SERIES_UID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(getReasonRes.statusCode).to.equal(200);\nlet reason = await getReasonRes.json();\nexpect(reason).have.property(\"uid\").to.be.equal(SERIES_UID);\nexpect(reason).have.property(\"reason\").to.be.equal(\"test\");\nexpect(reason).have.property(\"deleteBy\").to.be.equal(\"NONE\");\nlet queryRes = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(queryRes.statusCode).to.equal(200);\nlet series = await queryRes.json();\nexpect(series).to.be.an(\"array\").have.lengthOf(2);",
                  "err": {},
                  "uuid": "49d16222-7e75-44fb-870d-82e1c96a32e9",
                  "parentUUID": "0cb1f7c1-b4c7-4a07-a0ed-2750f58f8bbb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49d16222-7e75-44fb-870d-82e1c96a32e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "4abb0094-1ec0-4229-9608-a493beb713c8",
              "title": "study level",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\deleteWithReason.test.js",
              "file": "\\test\\api\\dicom-web\\deleteWithReason.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should delete study with reason and expect 3 studies",
                  "fullTitle": "delete dicom with reason study level Should delete study with reason and expect 3 studies",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${STUDY_UID}/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nexpect(res.statusCode).to.equal(200);\nlet getReasonRes = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/delete-reason/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(getReasonRes.statusCode).to.equal(200);\nlet reason = await getReasonRes.json();\nexpect(reason).have.property(\"uid\").to.be.equal(STUDY_UID);\nexpect(reason).have.property(\"reason\").to.be.equal(\"test\");\nexpect(reason).have.property(\"deleteBy\").to.be.equal(\"NONE\");\nlet queryRes = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(queryRes.statusCode).to.equal(200);\nlet series = await queryRes.json();\nexpect(series).to.be.an(\"array\").have.lengthOf(3);",
                  "err": {},
                  "uuid": "0a74748e-d423-458d-ba70-1f31fd106fc1",
                  "parentUUID": "4abb0094-1ec0-4229-9608-a493beb713c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a74748e-d423-458d-ba70-1f31fd106fc1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3c4c46e6-e685-42a5-87ea-d93b8ab3a736",
          "title": "MWL-RS change filtered modality worklist status",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\changeFilteredMWLStatus.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\changeFilteredMWLStatus.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS change filtered modality worklist status\"",
              "fullTitle": "MWL-RS change filtered modality worklist status \"before all\" hook in \"MWL-RS change filtered modality worklist status\"",
              "timedOut": false,
              "duration": 1022,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: [testMwlItem]\n});\nlet clonedMwlItem = structuredClone(testMwlItem);\nclonedMwlItem[dictionary.keyword.StudyInstanceUID][\"Value\"][0] = await UIDUtils.createUID();\nclonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledProcedureStepID][\"Value\"][0] = \"SPS-USA\";\nclonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledStationName][\"Value\"][0] = \"USA\";\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: [clonedMwlItem]\n});",
              "err": {},
              "uuid": "86e35cfd-6c18-4df8-b7aa-f99fb0abc235",
              "parentUUID": "3c4c46e6-e685-42a5-87ea-d93b8ab3a736",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should change filtered modality worklist status",
              "fullTitle": "MWL-RS change filtered modality worklist status Should change filtered modality worklist status",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems/status/READY?ScheduledProcedureStepSequence.ScheduledStationName=USA\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nlet response = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nlet mwlItems = await response.json();\nexpect(mwlItems).to.be.a(\"array\");\nexpect(mwlItems).have.lengthOf(2);\nlet usaMwlItem = mwlItems.find(mwlItem => mwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledStationName][\"Value\"][0] === \"USA\");\nexpect(usaMwlItem)\n.have.property(dictionary.keyword.ScheduledProcedureStepSequence)\n.have.property(\"Value\")\n.have.property(\"0\")\n.have.property(dictionary.keyword.ScheduledProcedureStepStatus)\n.have.property(\"Value\")\n.have.property(\"0\")\n.to.be.equal(\"READY\");\nlet ggMwlItem = mwlItems.find(mwlItem => mwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledStationName][\"Value\"][0] === \"GG\");\nexpect(ggMwlItem)\n.have.property(dictionary.keyword.ScheduledProcedureStepSequence)\n.have.property(\"Value\")\n.have.property(\"0\")\n.have.property(dictionary.keyword.ScheduledProcedureStepStatus)\n.have.property(\"Value\")\n.have.property(\"0\")\n.to.be.equal(\"SCHEDULED\");",
              "err": {},
              "uuid": "bea26571-f508-4378-b622-4d7da3685990",
              "parentUUID": "3c4c46e6-e685-42a5-87ea-d93b8ab3a736",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bea26571-f508-4378-b622-4d7da3685990"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fc131e0e-c3da-4388-acb5-c5f11da17921",
          "title": "MWL-RS change MWL status",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\changeMWLStatus.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\changeMWLStatus.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS change MWL status\"",
              "fullTitle": "MWL-RS change MWL status \"before all\" hook in \"MWL-RS change MWL status\"",
              "timedOut": false,
              "duration": 960,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: [testMwlItem]\n});",
              "err": {},
              "uuid": "2990683d-9d3f-4625-9050-b7da1354d5f5",
              "parentUUID": "fc131e0e-c3da-4388-acb5-c5f11da17921",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should change MWL status SCHEDULED to READY",
              "fullTitle": "MWL-RS change MWL status Should change MWL status SCHEDULED to READY",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/mwlitems/${mwlUID}/${spsID}/status/READY`,\n    headers: {\n        \"Accept\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.a(\"object\");\nexpect(data).to.have.property(\"0020000D\").have.property(\"Value\").have.property(\"0\").to.be.equal(mwlUID);\nexpect(data).to.have.property(dictionary.keyword.ScheduledProcedureStepSequence)\n.have.property(\"Value\")\n.have.property(\"0\")\n.have.property(dictionary.keyword.ScheduledProcedureStepStatus)\n.have.property(\"Value\")\n.have.property(\"0\")\n.to.be.equal(\"READY\");",
              "err": {},
              "uuid": "17774b2f-619d-4d9c-a816-2a3afc928148",
              "parentUUID": "fc131e0e-c3da-4388-acb5-c5f11da17921",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when mwl not exist",
              "fullTitle": "MWL-RS change MWL status Should raise 404 (Not Found) when mwl not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/mwlitems/1/1/status/READY`,\n    headers: {\n        \"Accept\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "3a5f17f9-3c11-44e9-81fb-4d6351481cc5",
              "parentUUID": "fc131e0e-c3da-4388-acb5-c5f11da17921",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17774b2f-619d-4d9c-a816-2a3afc928148",
            "3a5f17f9-3c11-44e9-81fb-4d6351481cc5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "30f640bf-d105-4268-ba84-347d73fa812b",
          "title": "MWL-RS change filtered modality worklist status",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\countMWL.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\countMWL.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS change filtered modality worklist status\"",
              "fullTitle": "MWL-RS change filtered modality worklist status \"before all\" hook in \"MWL-RS change filtered modality worklist status\"",
              "timedOut": false,
              "duration": 1480,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: [testMwlItem]\n});\nlet clonedMwlItem = structuredClone(testMwlItem);\nclonedMwlItem[dictionary.keyword.StudyInstanceUID][\"Value\"][0] = await UIDUtils.createUID();\nclonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledProcedureStepID][\"Value\"][0] = \"SPS-USA\"\nclonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledStationName][\"Value\"][0] = \"USA\";\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: [clonedMwlItem]\n});",
              "err": {},
              "uuid": "156c1cae-7b7a-4db0-85ac-0ab91590218a",
              "parentUUID": "30f640bf-d105-4268-ba84-347d73fa812b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should count modality worklist and expect 2",
              "fullTitle": "MWL-RS change filtered modality worklist status Should count modality worklist and expect 2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/mwlitems/count\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.have.property(\"count\").to.be.equal(2);",
              "err": {},
              "uuid": "841a3861-0f9a-4b7c-b0c3-76516e70432a",
              "parentUUID": "30f640bf-d105-4268-ba84-347d73fa812b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "841a3861-0f9a-4b7c-b0c3-76516e70432a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c185c6e1-1f7f-402b-ae83-0ef03a6a7597",
          "title": "MWL-RS create modality worklist",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\createMWL.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\createMWL.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS create modality worklist\"",
              "fullTitle": "MWL-RS create modality worklist \"before all\" hook in \"MWL-RS create modality worklist\"",
              "timedOut": false,
              "duration": 882,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "07e103bf-ed28-4e5d-bdf2-66a01313adfb",
              "parentUUID": "c185c6e1-1f7f-402b-ae83-0ef03a6a7597",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create modality worklist",
              "fullTitle": "MWL-RS create modality worklist Should create modality worklist",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([testMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data).to.have.property(dictionary.keyword.PatientID).have.property(\"Value\").have.property(\"0\").to.be.a(\"string\");\nexpect(data).to.have.property(dictionary.keyword.PatientName).have.property(\"Value\").have.property(\"0\").to.be.a(\"object\");\nexpect(data).to.have.property(dictionary.keyword.ScheduledProcedureStepSequence).have.property(\"Value\").have.property(\"0\").to.be.an(\"object\");\nexpect(data[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0])\n    .to.have.property(dictionary.keyword.ScheduledStationAETitle)\n    .have.property(\"Value\")\n    .have.property(\"0\").to.be.a(\"string\");\nexpect(data[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0])\n    .to.have.property(dictionary.keyword.ScheduledProcedureStepStartDate)\n    .have.property(\"Value\")\n    .have.property(\"0\").to.be.a(\"string\");\nexpect(data[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0])\n    .to.have.property(dictionary.keyword.ScheduledProcedureStepStartTime)\n    .have.property(\"Value\")\n    .have.property(\"0\").to.be.a(\"string\");\nexpect(data[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0])\n    .to.have.property(dictionary.keyword.Modality)\n    .have.property(\"Value\")\n    .have.property(\"0\").to.be.a(\"string\");",
              "err": {},
              "uuid": "5450c1c7-57c9-4c20-91bd-901116aa69d9",
              "parentUUID": "c185c6e1-1f7f-402b-ae83-0ef03a6a7597",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should update modality worklist",
              "fullTitle": "MWL-RS create modality worklist Should update modality worklist",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedMwlItem = structuredClone(testMwlItem);\nclonedMwlItem[\"00401001\"][\"Value\"][0] = \"U-RPI\";\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data)\n    .to.have.property(dictionary.keyword.RequestedProcedureID)\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .to.be.equal(\"U-RPI\");",
              "err": {},
              "uuid": "ac663e26-9a2d-449a-bd9f-d57b1d70f43b",
              "parentUUID": "c185c6e1-1f7f-402b-ae83-0ef03a6a7597",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should assign default 'ScheduledProcedureStepStatus'",
              "fullTitle": "MWL-RS create modality worklist Should assign default 'ScheduledProcedureStepStatus'",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedMwlItem = structuredClone(testMwlItem);\ndelete clonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledProcedureStepStatus];\nclonedMwlItem[dictionary.keyword.StudyInstanceUID][\"Value\"][0] = await UIDUtils.createUID();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data)\n    .to.have.property(dictionary.keyword.ScheduledProcedureStepSequence)\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .have.property(dictionary.keyword.ScheduledProcedureStepStatus)\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .to.be.equal(\"SCHEDULED\");",
              "err": {},
              "uuid": "04a099d7-a81f-4d68-9a84-daacadd02e1b",
              "parentUUID": "c185c6e1-1f7f-402b-ae83-0ef03a6a7597",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should assign default 'ScheduledProcedureStepID'",
              "fullTitle": "MWL-RS create modality worklist Should assign default 'ScheduledProcedureStepID'",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedMwlItem = structuredClone(testMwlItem);\ndelete clonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledProcedureStepID];\nclonedMwlItem[dictionary.keyword.StudyInstanceUID][\"Value\"][0] = await UIDUtils.createUID();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data)\n    .to.have.property(dictionary.keyword.ScheduledProcedureStepSequence)\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .have.property(dictionary.keyword.ScheduledProcedureStepID)\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .to.include(\"SPS\");",
              "err": {},
              "uuid": "a59cf3a8-c137-41fd-a1e3-40cd58cfa04e",
              "parentUUID": "c185c6e1-1f7f-402b-ae83-0ef03a6a7597",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should assign default 'ScheduledProcedureStepID'",
              "fullTitle": "MWL-RS create modality worklist Should assign default 'ScheduledProcedureStepID'",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedMwlItem = structuredClone(testMwlItem);\ndelete clonedMwlItem[dictionary.keyword.RequestedProcedureID];\nclonedMwlItem[dictionary.keyword.StudyInstanceUID][\"Value\"][0] = await UIDUtils.createUID();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data)\n    .to.have.property(dictionary.keyword.RequestedProcedureID)\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .to.include(\"RP\");",
              "err": {},
              "uuid": "dd29e19c-1f1f-4376-b08a-5d4a30f731af",
              "parentUUID": "c185c6e1-1f7f-402b-ae83-0ef03a6a7597",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should assign default 'StudyInstanceUID'",
              "fullTitle": "MWL-RS create modality worklist Should assign default 'StudyInstanceUID'",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedMwlItem = structuredClone(testMwlItem);\ndelete clonedMwlItem[dictionary.keyword.StudyInstanceUID];\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data)\n    .to.have.property(dictionary.keyword.StudyInstanceUID)\n    .have.property(\"Value\")\n    .have.property(\"0\");",
              "err": {},
              "uuid": "24ecea7c-c844-4a0b-84f9-c4d9c33022d6",
              "parentUUID": "c185c6e1-1f7f-402b-ae83-0ef03a6a7597",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should assign default 'AccessionNumber'",
              "fullTitle": "MWL-RS create modality worklist Should assign default 'AccessionNumber'",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedMwlItem = structuredClone(testMwlItem);\ndelete clonedMwlItem[dictionary.keyword.AccessionNumber];\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data)\n    .to.have.property(dictionary.keyword.AccessionNumber)\n    .have.property(\"Value\")\n    .have.property(\"0\");",
              "err": {},
              "uuid": "661322a1-f8c5-4c26-ace4-52fbd466222f",
              "parentUUID": "c185c6e1-1f7f-402b-ae83-0ef03a6a7597",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should using 00080060 when sps.00080060 is empty",
              "fullTitle": "MWL-RS create modality worklist Should using 00080060 when sps.00080060 is empty",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedMwlItem = structuredClone(testMwlItem);\ndelete clonedMwlItem[\"00400100\"][\"Value\"][0][\"00080060\"];\nclonedMwlItem[\"00080060\"][\"Value\"][0] = \"OT\";\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data)\n    .have.property(\"00400100\")\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .have.property(\"00080060\")\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .to.be.equal(\"OT\");",
              "err": {},
              "uuid": "740981b3-30c5-4091-8886-0fab1adfb624",
              "parentUUID": "c185c6e1-1f7f-402b-ae83-0ef03a6a7597",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when patient not exist",
              "fullTitle": "MWL-RS create modality worklist Should raise 404 (Not Found) when patient not exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([testMwlItem])\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "4c92b6b4-0ae5-48ec-af51-0da5bf9c6611",
              "parentUUID": "c185c6e1-1f7f-402b-ae83-0ef03a6a7597",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5450c1c7-57c9-4c20-91bd-901116aa69d9",
            "ac663e26-9a2d-449a-bd9f-d57b1d70f43b",
            "04a099d7-a81f-4d68-9a84-daacadd02e1b",
            "a59cf3a8-c137-41fd-a1e3-40cd58cfa04e",
            "dd29e19c-1f1f-4376-b08a-5d4a30f731af",
            "24ecea7c-c844-4a0b-84f9-c4d9c33022d6",
            "661322a1-f8c5-4c26-ace4-52fbd466222f",
            "740981b3-30c5-4091-8886-0fab1adfb624",
            "4c92b6b4-0ae5-48ec-af51-0da5bf9c6611"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 61,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ec9b6250-f610-4ca5-a7b6-efcdd5500d48",
          "title": "MWL-RS change filtered modality worklist status",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\deleteMWL.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\deleteMWL.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS change filtered modality worklist status\"",
              "fullTitle": "MWL-RS change filtered modality worklist status \"before all\" hook in \"MWL-RS change filtered modality worklist status\"",
              "timedOut": false,
              "duration": 917,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: [testMwlItem]\n});",
              "err": {},
              "uuid": "b0312954-b451-4088-b25a-cf1a880c3972",
              "parentUUID": "ec9b6250-f610-4ca5-a7b6-efcdd5500d48",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete mwlitem",
              "fullTitle": "MWL-RS change filtered modality worklist status should delete mwlitem",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let beforeDeletingFetchMwlRes = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Accept\": \"application/dicom+json\"\n    }\n});\nexpect(beforeDeletingFetchMwlRes.statusCode).to.equal(200);\nlet beforeDeletingFetchMwlData = await beforeDeletingFetchMwlRes.json();\nexpect(beforeDeletingFetchMwlData).to.be.an(\"array\");\nexpect(beforeDeletingFetchMwlData).have.lengthOf(1);\nconst deleteRes = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/mwlitems/${studyUID}/${spsID}`\n});\nexpect(deleteRes.statusCode).to.equal(200);",
              "err": {},
              "uuid": "10e8271a-3554-4395-a397-94cf98e37b29",
              "parentUUID": "ec9b6250-f610-4ca5-a7b6-efcdd5500d48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should raise 404 when mwlitem not exist",
              "fullTitle": "MWL-RS change filtered modality worklist status should raise 404 when mwlitem not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/mwlitems/${studyUID}/${spsID}`\n});\nexpect(deleteRes.statusCode).to.equal(404);",
              "err": {},
              "uuid": "c347abcf-4ec4-402c-b151-c2d0ea849709",
              "parentUUID": "ec9b6250-f610-4ca5-a7b6-efcdd5500d48",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "10e8271a-3554-4395-a397-94cf98e37b29",
            "c347abcf-4ec4-402c-b151-c2d0ea849709"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cae3226c-e115-421c-8c69-365d1b040c81",
          "title": "MWL-RS search modality worklist",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS search modality worklist\"",
              "fullTitle": "MWL-RS search modality worklist \"before all\" hook in \"MWL-RS search modality worklist\"",
              "timedOut": false,
              "duration": 919,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([testMwlItem])\n});",
              "err": {},
              "uuid": "a92137bb-e4db-4c8f-8df4-02602b7a594b",
              "parentUUID": "cae3226c-e115-421c-8c69-365d1b040c81",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should get modality worklist",
              "fullTitle": "MWL-RS search modality worklist Should get modality worklist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n            method: \"GET\",\n            url: \"/dicom-web/mwlitems\",\n            headers: {\n                \"Accept\": \"application/dicom+json\"\n            }\n        });\n        expect(response.statusCode).to.be.equal(200);\n        let data = await response.json();\n        expect(data).to.be.an(\"array\");\n        expect(data).have.lengthOf(1);",
              "err": {},
              "uuid": "cdc4c6ed-49a1-4ab8-ae1a-3e190971fbd3",
              "parentUUID": "cae3226c-e115-421c-8c69-365d1b040c81",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "4dbf90e8-0db7-4923-8689-9335c0971bea",
              "title": "query parameters",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
              "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "76c0eb7a-fe47-461b-be17-74e9391842fa",
                  "title": "query modality worklist with param 'StudyInstanceUID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'StudyInstanceUID=1.2.276.0.7230010.3.2.102' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'StudyInstanceUID' Should query modality worklist with param 'StudyInstanceUID=1.2.276.0.7230010.3.2.102' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "ea448119-a57f-4d1b-9057-ce8c499e38c5",
                      "parentUUID": "76c0eb7a-fe47-461b-be17-74e9391842fa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'StudyInstanceUID=1.2.3.4' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'StudyInstanceUID' Should query modality worklist with param 'StudyInstanceUID=1.2.3.4' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "1d703762-70fd-4579-9895-9d8c4026c8a1",
                      "parentUUID": "76c0eb7a-fe47-461b-be17-74e9391842fa",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ea448119-a57f-4d1b-9057-ce8c499e38c5",
                    "1d703762-70fd-4579-9895-9d8c4026c8a1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "1d45a28f-3d94-4a2d-b818-fe9eda7a0c56",
                  "title": "query modality worklist with param 'StudyDate'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'StudyDate=19870714' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'StudyDate' Should query modality worklist with param 'StudyDate=19870714' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "34853e75-8ce5-4e9a-add7-b9425b03beb1",
                      "parentUUID": "1d45a28f-3d94-4a2d-b818-fe9eda7a0c56",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'StudyDate=19900101' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'StudyDate' Should query modality worklist with param 'StudyDate=19900101' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "9d2acdc3-fe2b-4a9b-b770-42cb1e45a2fd",
                      "parentUUID": "1d45a28f-3d94-4a2d-b818-fe9eda7a0c56",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "34853e75-8ce5-4e9a-add7-b9425b03beb1",
                    "9d2acdc3-fe2b-4a9b-b770-42cb1e45a2fd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "d778c8b6-3966-4eac-8f7f-ac7176551bcb",
                  "title": "query modality worklist with param 'AccessionNumber'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'AccessionNumber=acc-123456' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'AccessionNumber' Should query modality worklist with param 'AccessionNumber=acc-123456' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "06a6ed32-e278-406e-acc9-3aecb7c7bb78",
                      "parentUUID": "d778c8b6-3966-4eac-8f7f-ac7176551bcb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'AccessionNumber=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'AccessionNumber' Should query modality worklist with param 'AccessionNumber=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "7fc24e59-8070-4008-988c-888766934897",
                      "parentUUID": "d778c8b6-3966-4eac-8f7f-ac7176551bcb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "06a6ed32-e278-406e-acc9-3aecb7c7bb78",
                    "7fc24e59-8070-4008-988c-888766934897"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "9428a716-8c70-40ab-a186-064e4c1014a9",
                  "title": "query modality worklist with param 'RequestedProcedureID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'RequestedProcedureID=RP488M9439' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'RequestedProcedureID' Should query modality worklist with param 'RequestedProcedureID=RP488M9439' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "0d81ff50-0e7b-4d12-b2cc-9f888c8956f3",
                      "parentUUID": "9428a716-8c70-40ab-a186-064e4c1014a9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'RequestedProcedureID=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'RequestedProcedureID' Should query modality worklist with param 'RequestedProcedureID=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "42009122-fccd-4c96-8efc-4882fa8a7137",
                      "parentUUID": "9428a716-8c70-40ab-a186-064e4c1014a9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0d81ff50-0e7b-4d12-b2cc-9f888c8956f3",
                    "42009122-fccd-4c96-8efc-4882fa8a7137"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "7931948d-6abc-4752-9e10-ee09ae19e2eb",
                  "title": "query modality worklist with param 'AdmissionID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'AdmissionID=A-987' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'AdmissionID' Should query modality worklist with param 'AdmissionID=A-987' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "430b2951-a754-42f5-a7c4-f04901c65534",
                      "parentUUID": "7931948d-6abc-4752-9e10-ee09ae19e2eb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'AdmissionID=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'AdmissionID' Should query modality worklist with param 'AdmissionID=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "ef856708-5f40-4e49-ab9c-bcbcba76b617",
                      "parentUUID": "7931948d-6abc-4752-9e10-ee09ae19e2eb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "430b2951-a754-42f5-a7c4-f04901c65534",
                    "ef856708-5f40-4e49-ab9c-bcbcba76b617"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "1f0c146e-0a3f-42a4-b187-772c459b208e",
                  "title": "query modality worklist with param 'InstitutionName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'InstitutionName=HELL' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'InstitutionName' Should query modality worklist with param 'InstitutionName=HELL' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "1f1a7f6e-91eb-421a-9655-36cff2416d18",
                      "parentUUID": "1f0c146e-0a3f-42a4-b187-772c459b208e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'InstitutionName=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'InstitutionName' Should query modality worklist with param 'InstitutionName=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "477513ea-9c30-4a8c-b709-13b08e2b8a92",
                      "parentUUID": "1f0c146e-0a3f-42a4-b187-772c459b208e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1f1a7f6e-91eb-421a-9655-36cff2416d18",
                    "477513ea-9c30-4a8c-b709-13b08e2b8a92"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "15be7878-3389-4a84-bc22-fda946c3a37e",
                  "title": "query modality worklist with param 'InstitutionalDepartmentName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'InstitutionalDepartmentName=FLOOR18' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'InstitutionalDepartmentName' Should query modality worklist with param 'InstitutionalDepartmentName=FLOOR18' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "a8363283-298b-4f27-8b95-77d0cc7bb4e3",
                      "parentUUID": "15be7878-3389-4a84-bc22-fda946c3a37e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'InstitutionalDepartmentName=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'InstitutionalDepartmentName' Should query modality worklist with param 'InstitutionalDepartmentName=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "7bfc5d73-29ba-4073-8c14-fbffcc016e36",
                      "parentUUID": "15be7878-3389-4a84-bc22-fda946c3a37e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a8363283-298b-4f27-8b95-77d0cc7bb4e3",
                    "7bfc5d73-29ba-4073-8c14-fbffcc016e36"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "524bd3f3-fcbd-4626-9ea9-49e56c6c42ca",
                  "title": "query modality worklist with param 'IssuerOfAccessionNumberSequence.LocalNamespaceEntityID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=123456789' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAccessionNumberSequence.LocalNamespaceEntityID' Should query modality worklist with param 'IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=123456789' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "d2d9272b-ec2f-4595-9e2d-2790a6c4a580",
                      "parentUUID": "524bd3f3-fcbd-4626-9ea9-49e56c6c42ca",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAccessionNumberSequence.LocalNamespaceEntityID' Should query modality worklist with param 'IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "b8bbf84d-6c8f-451c-a83f-4a278d4deb65",
                      "parentUUID": "524bd3f3-fcbd-4626-9ea9-49e56c6c42ca",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d2d9272b-ec2f-4595-9e2d-2790a6c4a580",
                    "b8bbf84d-6c8f-451c-a83f-4a278d4deb65"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "43a965b7-f029-4164-900d-0eb784d4ee01",
                  "title": "query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityID=29c737e3-b739-4169-aca7-eea07a808643' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityID' Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityID=29c737e3-b739-4169-aca7-eea07a808643' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "ddf5a5c0-60bb-4293-8f00-6c7793320aa6",
                      "parentUUID": "43a965b7-f029-4164-900d-0eb784d4ee01",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityID=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityID' Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityID=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "5092110c-88df-40a4-a287-73527aa6f4b0",
                      "parentUUID": "43a965b7-f029-4164-900d-0eb784d4ee01",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ddf5a5c0-60bb-4293-8f00-6c7793320aa6",
                    "5092110c-88df-40a4-a287-73527aa6f4b0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "7910854b-90b4-47cf-9255-d3daaf60ddac",
                  "title": "query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityIDType'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityIDType=UUID' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityIDType' Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityIDType=UUID' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "4564c7a9-e113-444a-bec1-019512e0d891",
                      "parentUUID": "7910854b-90b4-47cf-9255-d3daaf60ddac",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityIDType=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityIDType' Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityIDType=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "c20387af-da21-4150-9f06-8f8ad778bc69",
                      "parentUUID": "7910854b-90b4-47cf-9255-d3daaf60ddac",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4564c7a9-e113-444a-bec1-019512e0d891",
                    "c20387af-da21-4150-9f06-8f8ad778bc69"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "98cc4b51-4c84-4f42-b352-faea2b7f7c16",
                  "title": "query modality worklist with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=987654321' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID' Should query modality worklist with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=987654321' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "27bc621b-305f-49fa-b9ad-f70af213ab70",
                      "parentUUID": "98cc4b51-4c84-4f42-b352-faea2b7f7c16",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID' Should query modality worklist with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "4907337d-2dc5-4a1a-8bf8-984ef1bb4e54",
                      "parentUUID": "98cc4b51-4c84-4f42-b352-faea2b7f7c16",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "27bc621b-305f-49fa-b9ad-f70af213ab70",
                    "4907337d-2dc5-4a1a-8bf8-984ef1bb4e54"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "e065e613-6e84-4682-a141-5fb15b2ef76b",
                  "title": "query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=a8f1bce0-efbf-4dea-a85b-84976b5020d0' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityID' Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=a8f1bce0-efbf-4dea-a85b-84976b5020d0' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "cacfa5f5-2b0d-4395-817e-273b4f61b957",
                      "parentUUID": "e065e613-6e84-4682-a141-5fb15b2ef76b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityID' Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "42a5b368-1183-4b28-9881-7d9fb6e20d48",
                      "parentUUID": "e065e613-6e84-4682-a141-5fb15b2ef76b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cacfa5f5-2b0d-4395-817e-273b4f61b957",
                    "42a5b368-1183-4b28-9881-7d9fb6e20d48"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "79c14eac-08db-4973-a9ef-286777990ee7",
                  "title": "query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=UUID' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType' Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=UUID' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "f37a6517-9be7-4592-b554-79e346eeb1c4",
                      "parentUUID": "79c14eac-08db-4973-a9ef-286777990ee7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType' Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "66535dd8-5a94-4e15-9118-e40615a5b931",
                      "parentUUID": "79c14eac-08db-4973-a9ef-286777990ee7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f37a6517-9be7-4592-b554-79e346eeb1c4",
                    "66535dd8-5a94-4e15-9118-e40615a5b931"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "cbdd74cb-ccda-45a9-a641-6bd02ab5ab23",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationAETitle'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationAETitle=WORKLIST' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationAETitle' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationAETitle=WORKLIST' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "7d2e2724-3770-4340-ba04-8ee51fd34744",
                      "parentUUID": "cbdd74cb-ccda-45a9-a641-6bd02ab5ab23",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationAETitle=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationAETitle' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationAETitle=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "dce0a61c-798b-4fc5-bb30-127e6db5d8ec",
                      "parentUUID": "cbdd74cb-ccda-45a9-a641-6bd02ab5ab23",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7d2e2724-3770-4340-ba04-8ee51fd34744",
                    "dce0a61c-798b-4fc5-bb30-127e6db5d8ec"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "81718333-6cfd-4ace-a416-ded74d9c2673",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationName=GG' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationName' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationName=GG' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "212b7311-1633-4bc2-bb01-1697fa851271",
                      "parentUUID": "81718333-6cfd-4ace-a416-ded74d9c2673",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationName=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationName' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationName=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "709df71e-6d2e-4bf0-9027-a5fd5f5b506f",
                      "parentUUID": "81718333-6cfd-4ace-a416-ded74d9c2673",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "212b7311-1633-4bc2-bb01-1697fa851271",
                    "709df71e-6d2e-4bf0-9027-a5fd5f5b506f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "afe4133e-8082-4ac7-bbbc-3fe0e7878d7d",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartDate'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartDate=20231021' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartDate' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartDate=20231021' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "16a50ccf-7025-4d5f-b1ef-139ced92256d",
                      "parentUUID": "afe4133e-8082-4ac7-bbbc-3fe0e7878d7d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartDate=19990101' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartDate' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartDate=19990101' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "11f5d9a9-9eb2-44aa-81b1-96b4de088106",
                      "parentUUID": "afe4133e-8082-4ac7-bbbc-3fe0e7878d7d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "16a50ccf-7025-4d5f-b1ef-139ced92256d",
                    "11f5d9a9-9eb2-44aa-81b1-96b4de088106"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "b017e986-abfa-49c9-80b9-c3644d8bee9b",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndDate'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndDate=20231212' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndDate' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndDate=20231212' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "a15b64e9-fa33-4f38-b9c1-8841f0066219",
                      "parentUUID": "b017e986-abfa-49c9-80b9-c3644d8bee9b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndDate=19990101' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndDate' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndDate=19990101' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "d81895a7-cd40-439a-a265-951ea86ba814",
                      "parentUUID": "b017e986-abfa-49c9-80b9-c3644d8bee9b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a15b64e9-fa33-4f38-b9c1-8841f0066219",
                    "d81895a7-cd40-439a-a265-951ea86ba814"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "c65c63df-a6b6-46c7-9149-134f2e6d367b",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartTime'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartTime=003525.475' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartTime' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartTime=003525.475' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "1e144d7a-5091-47cb-802c-944e54e36c2b",
                      "parentUUID": "c65c63df-a6b6-46c7-9149-134f2e6d367b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartTime=003525' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartTime' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartTime=003525' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "60cab08c-6465-4689-8305-ecfb1591aa28",
                      "parentUUID": "c65c63df-a6b6-46c7-9149-134f2e6d367b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1e144d7a-5091-47cb-802c-944e54e36c2b",
                    "60cab08c-6465-4689-8305-ecfb1591aa28"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "21eb4629-f945-4d40-af79-74b28ddc03cd",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndTime'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndTime=123525.475' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndTime' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndTime=123525.475' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "35e5797c-f087-4a6c-b3ff-a67447a5a3c7",
                      "parentUUID": "21eb4629-f945-4d40-af79-74b28ddc03cd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndTime=003525' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndTime' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndTime=003525' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "5a6982fc-02d3-4077-8a59-4ca56ff6b918",
                      "parentUUID": "21eb4629-f945-4d40-af79-74b28ddc03cd",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "35e5797c-f087-4a6c-b3ff-a67447a5a3c7",
                    "5a6982fc-02d3-4077-8a59-4ca56ff6b918"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "b58561b7-2af4-4e46-8929-447aa7c24ae6",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledPerformingPhysicianName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledPerformingPhysicianName=ENT00373' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledPerformingPhysicianName' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledPerformingPhysicianName=ENT00373' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "dcedf610-82d9-480c-8915-988db03d9150",
                      "parentUUID": "b58561b7-2af4-4e46-8929-447aa7c24ae6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledPerformingPhysicianName=ENT123' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledPerformingPhysicianName' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledPerformingPhysicianName=ENT123' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "9bc33446-4eb8-4d96-aebe-f8d135167c26",
                      "parentUUID": "b58561b7-2af4-4e46-8929-447aa7c24ae6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dcedf610-82d9-480c-8915-988db03d9150",
                    "9bc33446-4eb8-4d96-aebe-f8d135167c26"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "6f3360f4-5f51-4444-8b1d-f6a0612777c9",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepDescription'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepDescription=EXAM-DESC' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepDescription' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepDescription=EXAM-DESC' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "21d64950-7d71-4af1-8366-9619d1e2f7ad",
                      "parentUUID": "6f3360f4-5f51-4444-8b1d-f6a0612777c9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepDescription=ENT123' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepDescription' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepDescription=ENT123' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "9972c5fe-258f-4ca0-9a5d-7e980858e365",
                      "parentUUID": "6f3360f4-5f51-4444-8b1d-f6a0612777c9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "21d64950-7d71-4af1-8366-9619d1e2f7ad",
                    "9972c5fe-258f-4ca0-9a5d-7e980858e365"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "4508c037-2221-4384-929a-8df2c733ab37",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepID=SPS-00000002' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepID' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepID=SPS-00000002' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "8e922d42-8298-47d8-838b-c48bece91564",
                      "parentUUID": "4508c037-2221-4384-929a-8df2c733ab37",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepID=ENT123' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepID' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepID=ENT123' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "7aa104fe-581e-4310-87e9-9c80ad07dc7c",
                      "parentUUID": "4508c037-2221-4384-929a-8df2c733ab37",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8e922d42-8298-47d8-838b-c48bece91564",
                    "7aa104fe-581e-4310-87e9-9c80ad07dc7c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "3c9450ec-2f8a-4a37-a7e9-298df133c551",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStatus'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStatus=SCHEDULED' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStatus' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStatus=SCHEDULED' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "480b3d34-99b1-453b-96e4-cfd122c758ea",
                      "parentUUID": "3c9450ec-2f8a-4a37-a7e9-298df133c551",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStatus=COMPLETED' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStatus' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStatus=COMPLETED' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "81a74b8e-43fa-4f3c-9aa2-b8cb7db8aac3",
                      "parentUUID": "3c9450ec-2f8a-4a37-a7e9-298df133c551",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "480b3d34-99b1-453b-96e4-cfd122c758ea",
                    "81a74b8e-43fa-4f3c-9aa2-b8cb7db8aac3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "cdc4c6ed-49a1-4ab8-ae1a-3e190971fbd3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6e6c6d52-b340-4f22-ae41-5b79c11d2c5b",
          "title": "PAM-RS create patient '/dicom-web/patients'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\PAM-RS\\createPatient.test.js",
          "file": "\\test\\api\\dicom-web\\PAM-RS\\createPatient.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"PAM-RS create patient '/dicom-web/patients'\"",
              "fullTitle": "PAM-RS create patient '/dicom-web/patients' \"before all\" hook in \"PAM-RS create patient '/dicom-web/patients'\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "6d04bced-8bc3-4a14-9b9b-15ee364eae0d",
              "parentUUID": "6e6c6d52-b340-4f22-ae41-5b79c11d2c5b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create patient",
              "fullTitle": "PAM-RS create patient '/dicom-web/patients' Should create patient",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/patients\",\n    body: testPatient\n});\nexpect(response.statusCode).to.equal(201);\nlet createdPatient = await response.json();\nexpect(createdPatient).to.be.a(\"object\");\nexpect(createdPatient).have.property(\"00100010\").to.be.deep.equal(testPatient[\"00100010\"]);\nexpect(createdPatient).have.property(\"00100020\").to.be.deep.equal(testPatient[\"00100020\"]);",
              "err": {},
              "uuid": "1b832c10-ec40-4f10-97df-d03e88faf96f",
              "parentUUID": "6e6c6d52-b340-4f22-ae41-5b79c11d2c5b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b832c10-ec40-4f10-97df-d03e88faf96f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d3536ebf-d882-47e7-82b4-8ba15d1077cf",
          "title": "PAM-RS update patient '/dicom-web/patients'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\PAM-RS\\updatePatient.test.js",
          "file": "\\test\\api\\dicom-web\\PAM-RS\\updatePatient.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"PAM-RS update patient '/dicom-web/patients'\"",
              "fullTitle": "PAM-RS update patient '/dicom-web/patients' \"before all\" hook in \"PAM-RS update patient '/dicom-web/patients'\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/patients\",\n    body: testPatient,\n});",
              "err": {},
              "uuid": "15040604-f552-46e7-9d66-664c8052abf8",
              "parentUUID": "d3536ebf-d882-47e7-82b4-8ba15d1077cf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should update patient",
              "fullTitle": "PAM-RS update patient '/dicom-web/patients' Should update patient",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedPatient = structuredClone(testPatient);\nclonedPatient[\"00100010\"][\"Value\"][0][\"Alphabetic\"] = \"nobody\";\nlet response = await inject(app, {\n    method: \"put\",\n    url: `/dicom-web/patients/${patientID}`,\n    body: clonedPatient,\n});\nexpect(response.statusCode).to.equal(200);\nlet updatedPatient = await response.json();\nexpect(updatedPatient).to.be.a(\"object\");\nexpect(updatedPatient)\n.have.property(\"00100010\")\n.have.property(\"Value\")\n.to.be.deep.equal([{ \"Alphabetic\": \"nobody\" }]);",
              "err": {},
              "uuid": "45f08bac-20fa-4d92-b5c3-25094752c30f",
              "parentUUID": "d3536ebf-d882-47e7-82b4-8ba15d1077cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "45f08bac-20fa-4d92-b5c3-25094752c30f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f2e5b1c4-8c1e-4621-b210-c65f7ed11936",
          "title": "query instances",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query instances\"",
              "fullTitle": "query instances \"before all\" hook in \"query instances\"",
              "timedOut": false,
              "duration": 917,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "8f7c4f47-47d6-4df0-a567-ce0fd7592bd8",
              "parentUUID": "f2e5b1c4-8c1e-4621-b210-c65f7ed11936",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"query instances\"",
              "fullTitle": "query instances \"after all\" hook in \"query instances\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "89ca0b7b-b419-46f2-a574-8148eaf65b9b",
              "parentUUID": "f2e5b1c4-8c1e-4621-b210-c65f7ed11936",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "8d9ea2c7-e770-4308-a09e-c4693bc5f2c7",
              "title": "query instances with 'SOPClassUID'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query instances with param 'SOPClassUID=1.2.840.10008.5.1.4.1.1.7' and get 5 instances successfully",
                  "fullTitle": "query instances query instances with 'SOPClassUID' Should query instances with param 'SOPClassUID=1.2.840.10008.5.1.4.1.1.7' and get 5 instances successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "902a8208-41e2-486d-a814-27a85801ca79",
                  "parentUUID": "8d9ea2c7-e770-4308-a09e-c4693bc5f2c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query instances with param 'SOPClassUID=foobar' and get 0 instance successfully",
                  "fullTitle": "query instances query instances with 'SOPClassUID' Should query instances with param 'SOPClassUID=foobar' and get 0 instance successfully",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "4baeb981-f867-4ad2-b41e-bbf4fe84a532",
                  "parentUUID": "8d9ea2c7-e770-4308-a09e-c4693bc5f2c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "902a8208-41e2-486d-a814-27a85801ca79",
                "4baeb981-f867-4ad2-b41e-bbf4fe84a532"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "89d82434-5f7e-4f77-976c-6a7b43a46ca0",
              "title": "query instances with 'SOPInstanceUID'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query instances with param 'SOPInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.146366877811836789535656349132' and get 1 instance successfully",
                  "fullTitle": "query instances query instances with 'SOPInstanceUID' Should query instances with param 'SOPInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.146366877811836789535656349132' and get 1 instance successfully",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "6b17d316-ff4b-42fb-92f2-fc668113f916",
                  "parentUUID": "89d82434-5f7e-4f77-976c-6a7b43a46ca0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query instances with param 'SOPInstanceUID=foobar' and get 0 instance successfully",
                  "fullTitle": "query instances query instances with 'SOPInstanceUID' Should query instances with param 'SOPInstanceUID=foobar' and get 0 instance successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "7c6d2529-b2a6-47fc-a91f-426746fca17e",
                  "parentUUID": "89d82434-5f7e-4f77-976c-6a7b43a46ca0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6b17d316-ff4b-42fb-92f2-fc668113f916",
                "7c6d2529-b2a6-47fc-a91f-426746fca17e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "d62e2ed0-3ccd-4f14-97d4-e2b694bbf36a",
              "title": "query instances with 'ContentDate",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query instances with param 'ContentDate=19990416' and get 9 instances successfully",
                  "fullTitle": "query instances query instances with 'ContentDate Should query instances with param 'ContentDate=19990416' and get 9 instances successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "fb35821f-d134-414b-8a12-45b47df87149",
                  "parentUUID": "d62e2ed0-3ccd-4f14-97d4-e2b694bbf36a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query instances with param 'ContentDate=19990909' and get 0 instance successfully",
                  "fullTitle": "query instances query instances with 'ContentDate Should query instances with param 'ContentDate=19990909' and get 0 instance successfully",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "a53ae3fb-6258-4687-9773-3c4ccf738bf8",
                  "parentUUID": "d62e2ed0-3ccd-4f14-97d4-e2b694bbf36a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb35821f-d134-414b-8a12-45b47df87149",
                "a53ae3fb-6258-4687-9773-3c4ccf738bf8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "17f00d06-ff1b-4893-bb07-3985578eb2e1",
              "title": "query instances with 'ContentTime'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query instances with param 'ContentTime=140241' and get 1 instance successfully",
                  "fullTitle": "query instances query instances with 'ContentTime' Should query instances with param 'ContentTime=140241' and get 1 instance successfully",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "c9d49968-a4e4-4b3f-9dd1-2fe6264bec3b",
                  "parentUUID": "17f00d06-ff1b-4893-bb07-3985578eb2e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query instances with param 'ContentTime=140248' and get 0 instance successfully",
                  "fullTitle": "query instances query instances with 'ContentTime' Should query instances with param 'ContentTime=140248' and get 0 instance successfully",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "2f202a1e-abf8-4153-9cb5-9775fd576c3f",
                  "parentUUID": "17f00d06-ff1b-4893-bb07-3985578eb2e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9d49968-a4e4-4b3f-9dd1-2fe6264bec3b",
                "2f202a1e-abf8-4153-9cb5-9775fd576c3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 25,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "1463acfc-0978-48db-9f51-304e27f1fb42",
              "title": "query instances with 'InstanceNumber'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query instances with param 'InstanceNumber=72' and get 1 instance successfully",
                  "fullTitle": "query instances query instances with 'InstanceNumber' Should query instances with param 'InstanceNumber=72' and get 1 instance successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "5a891fc2-7b92-4e04-82bf-6f1abba088bd",
                  "parentUUID": "1463acfc-0978-48db-9f51-304e27f1fb42",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query instances with param 'InstanceNumber=12345678910' and get 0 instance successfully",
                  "fullTitle": "query instances query instances with 'InstanceNumber' Should query instances with param 'InstanceNumber=12345678910' and get 0 instance successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "7d180e2f-a730-4d4b-bbd7-b98aee2ddf98",
                  "parentUUID": "1463acfc-0978-48db-9f51-304e27f1fb42",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a891fc2-7b92-4e04-82bf-6f1abba088bd",
                "7d180e2f-a730-4d4b-bbd7-b98aee2ddf98"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "8e26e905-f29d-460d-8d41-8a7add44dea4",
              "title": "query instances with sequence parameters",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"query instances with sequence parameters\"",
                  "fullTitle": "query instances query instances with sequence parameters \"before all\" hook in \"query instances with sequence parameters\"",
                  "timedOut": false,
                  "duration": 54,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await storeInstanceForTest(\n    resolve(\n        __dirname,\n        \"../../../testData/dicomFiles/1-01-mod-vo\"\n    )\n);",
                  "err": {},
                  "uuid": "a7b950d1-bb7c-4f10-8822-6ef0de80d1de",
                  "parentUUID": "8e26e905-f29d-460d-8d41-8a7add44dea4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "66f1924d-029e-4639-bbec-cab4ffecd93c",
                  "title": "query instances with 'ConceptNameCodeSequence.CodeValue'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodeValue=Test' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodeValue' Should query instances with param 'ConceptNameCodeSequence.CodeValue=Test' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "1622861e-af93-4651-98cc-44697768be4d",
                      "parentUUID": "66f1924d-029e-4639-bbec-cab4ffecd93c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodeValue=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodeValue' Should query instances with param 'ConceptNameCodeSequence.CodeValue=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "4b7a3cef-c51b-4ed3-9785-85c260e93822",
                      "parentUUID": "66f1924d-029e-4639-bbec-cab4ffecd93c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1622861e-af93-4651-98cc-44697768be4d",
                    "4b7a3cef-c51b-4ed3-9785-85c260e93822"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "aa3de3ba-def4-43ba-b2fd-fd397e6b48ed",
                  "title": "query instances with 'ConceptNameCodeSequence.CodingSchemeDesignator'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodingSchemeDesignator=LFUCK' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodingSchemeDesignator' Should query instances with param 'ConceptNameCodeSequence.CodingSchemeDesignator=LFUCK' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "0d6cc6b2-93d5-4d38-b78c-011083dd9e0e",
                      "parentUUID": "aa3de3ba-def4-43ba-b2fd-fd397e6b48ed",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodingSchemeDesignator=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodingSchemeDesignator' Should query instances with param 'ConceptNameCodeSequence.CodingSchemeDesignator=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "96effe63-a443-4efd-aece-f01c0eb2c067",
                      "parentUUID": "aa3de3ba-def4-43ba-b2fd-fd397e6b48ed",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0d6cc6b2-93d5-4d38-b78c-011083dd9e0e",
                    "96effe63-a443-4efd-aece-f01c0eb2c067"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "64da3281-70e0-4fdc-a0d5-9f7947ff8287",
                  "title": "query instances with 'ConceptNameCodeSequence.CodingSchemeVersion'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodingSchemeVersion=v1.0' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodingSchemeVersion' Should query instances with param 'ConceptNameCodeSequence.CodingSchemeVersion=v1.0' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "b28b01ce-4f16-4c90-a0e0-cc53a785e13e",
                      "parentUUID": "64da3281-70e0-4fdc-a0d5-9f7947ff8287",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodingSchemeVersion=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodingSchemeVersion' Should query instances with param 'ConceptNameCodeSequence.CodingSchemeVersion=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "1e962cd1-b561-4b04-8fa5-b9d6caf34c6d",
                      "parentUUID": "64da3281-70e0-4fdc-a0d5-9f7947ff8287",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b28b01ce-4f16-4c90-a0e0-cc53a785e13e",
                    "1e962cd1-b561-4b04-8fa5-b9d6caf34c6d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "4aa6834a-b822-4622-b5c8-ee1f4bb40be2",
                  "title": "query instances with 'ConceptNameCodeSequence.CodeMeaning'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodeMeaning=For Test' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodeMeaning' Should query instances with param 'ConceptNameCodeSequence.CodeMeaning=For Test' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "b339c556-5f6f-49b5-882f-83abf3a77b6a",
                      "parentUUID": "4aa6834a-b822-4622-b5c8-ee1f4bb40be2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodeMeaning=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodeMeaning' Should query instances with param 'ConceptNameCodeSequence.CodeMeaning=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "2632fb7c-ace2-4682-873c-ff08169e85a3",
                      "parentUUID": "4aa6834a-b822-4622-b5c8-ee1f4bb40be2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b339c556-5f6f-49b5-882f-83abf3a77b6a",
                    "2632fb7c-ace2-4682-873c-ff08169e85a3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 11,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "042f7f47-9a3b-44d8-86b7-f4c58a601fde",
                  "title": "query instances with 'ContentSequence.ValueType'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ValueType=TEXT' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ValueType' Should query instances with param 'ContentSequence.ValueType=TEXT' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "891a738f-977e-4613-ac30-61acae62d081",
                      "parentUUID": "042f7f47-9a3b-44d8-86b7-f4c58a601fde",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ValueType=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ValueType' Should query instances with param 'ContentSequence.ValueType=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "5fac9d55-1de2-4c96-b8c6-20ff5a9d520d",
                      "parentUUID": "042f7f47-9a3b-44d8-86b7-f4c58a601fde",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "891a738f-977e-4613-ac30-61acae62d081",
                    "5fac9d55-1de2-4c96-b8c6-20ff5a9d520d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "7a0d449a-2864-45fe-9cab-ada6f4c9bd6a",
                  "title": "query instances with 'ContentSequence.RelationshipType'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.RelationshipType=CONTAINS' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.RelationshipType' Should query instances with param 'ContentSequence.RelationshipType=CONTAINS' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "991bcaa4-d1c4-4e8a-9797-5e1657acd8c3",
                      "parentUUID": "7a0d449a-2864-45fe-9cab-ada6f4c9bd6a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.RelationshipType=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.RelationshipType' Should query instances with param 'ContentSequence.RelationshipType=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "d49ba31a-638d-43d3-97cd-4411fa7d79e7",
                      "parentUUID": "7a0d449a-2864-45fe-9cab-ada6f4c9bd6a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "991bcaa4-d1c4-4e8a-9797-5e1657acd8c3",
                    "d49ba31a-638d-43d3-97cd-4411fa7d79e7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 10,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "30805037-97fc-488b-be4c-1cbfe854cccf",
                  "title": "query instances with 'ContentSequence.TextValue'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.TextValue=Test' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.TextValue' Should query instances with param 'ContentSequence.TextValue=Test' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "38958039-a9c4-4725-a407-de079cd0e4d7",
                      "parentUUID": "30805037-97fc-488b-be4c-1cbfe854cccf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.TextValue=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.TextValue' Should query instances with param 'ContentSequence.TextValue=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "e20f528b-5152-4fff-bc4e-6d100840d0f9",
                      "parentUUID": "30805037-97fc-488b-be4c-1cbfe854cccf",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "38958039-a9c4-4725-a407-de079cd0e4d7",
                    "e20f528b-5152-4fff-bc4e-6d100840d0f9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 11,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "945e18d2-5b7a-4edc-8579-9cca940197ab",
                  "title": "query instances with 'ContentSequence.ConceptNameCodeSequence.CodeValue'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeValue=Test 2' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodeValue' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeValue=Test 2' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "8ec58032-fbea-4d4e-99e2-7c11917f665e",
                      "parentUUID": "945e18d2-5b7a-4edc-8579-9cca940197ab",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeValue=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodeValue' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeValue=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "d3c977ed-f714-4e7c-9061-c7ad80ce7532",
                      "parentUUID": "945e18d2-5b7a-4edc-8579-9cca940197ab",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8ec58032-fbea-4d4e-99e2-7c11917f665e",
                    "d3c977ed-f714-4e7c-9061-c7ad80ce7532"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "eb41cf1d-6100-44c6-9c94-ad95fe817eab",
                  "title": "query instances with 'ContentSequence.ConceptNameCodeSequence.CodingSchemeDesignator'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeDesignator=LFUCK2' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodingSchemeDesignator' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeDesignator=LFUCK2' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "059450eb-bb82-4126-8f76-567aac39ae3a",
                      "parentUUID": "eb41cf1d-6100-44c6-9c94-ad95fe817eab",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeDesignator=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodingSchemeDesignator' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeDesignator=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "68935176-3ec2-4eab-8c52-0b2f0b7b2ccc",
                      "parentUUID": "eb41cf1d-6100-44c6-9c94-ad95fe817eab",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "059450eb-bb82-4126-8f76-567aac39ae3a",
                    "68935176-3ec2-4eab-8c52-0b2f0b7b2ccc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "7eeb8d92-4aa3-4b6f-822f-fddf66bef0cb",
                  "title": "query instances with 'ContentSequence.ConceptNameCodeSequence.CodingSchemeVersion'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeVersion=v2.0' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodingSchemeVersion' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeVersion=v2.0' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "316da089-26c4-4cf1-84c7-173fc62d3299",
                      "parentUUID": "7eeb8d92-4aa3-4b6f-822f-fddf66bef0cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeVersion=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodingSchemeVersion' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeVersion=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "e427e4cd-0788-46b1-816f-b843932feb7d",
                      "parentUUID": "7eeb8d92-4aa3-4b6f-822f-fddf66bef0cb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "316da089-26c4-4cf1-84c7-173fc62d3299",
                    "e427e4cd-0788-46b1-816f-b843932feb7d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 14,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "09574d23-2495-43b9-af32-209ee72d80b2",
                  "title": "query instances with 'ContentSequence.ConceptNameCodeSequence.CodeMeaning'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeMeaning=For Test 2' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodeMeaning' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeMeaning=For Test 2' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "6c65ab52-1b60-4992-a85e-c87e6482e95f",
                      "parentUUID": "09574d23-2495-43b9-af32-209ee72d80b2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeMeaning=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodeMeaning' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeMeaning=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "a73ff36d-360a-48f1-a915-7c2016133130",
                      "parentUUID": "09574d23-2495-43b9-af32-209ee72d80b2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6c65ab52-1b60-4992-a85e-c87e6482e95f",
                    "a73ff36d-360a-48f1-a915-7c2016133130"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "eb497cf4-4076-4c77-b8d7-8b16621969a2",
                  "title": "query instances with 'ContentSequence.ConceptCodeSequence.CodeValue'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeValue=Test 2' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodeValue' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeValue=Test 2' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "fb1858ed-7c43-4beb-b99a-39c6e9dbc17b",
                      "parentUUID": "eb497cf4-4076-4c77-b8d7-8b16621969a2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeValue=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodeValue' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeValue=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "40536894-facd-4670-a8da-acc1027059cc",
                      "parentUUID": "eb497cf4-4076-4c77-b8d7-8b16621969a2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fb1858ed-7c43-4beb-b99a-39c6e9dbc17b",
                    "40536894-facd-4670-a8da-acc1027059cc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "1d0f95c1-cca8-4f26-9342-77f61ea14a78",
                  "title": "query instances with 'ContentSequence.ConceptCodeSequence.CodingSchemeDesignator'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeDesignator=LFUCK2' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodingSchemeDesignator' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeDesignator=LFUCK2' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "efb9b5f0-b911-40ba-94fb-f9a17a15891c",
                      "parentUUID": "1d0f95c1-cca8-4f26-9342-77f61ea14a78",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeDesignator=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodingSchemeDesignator' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeDesignator=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "9be3a9d0-74fe-40ac-ba83-ca26f420e28c",
                      "parentUUID": "1d0f95c1-cca8-4f26-9342-77f61ea14a78",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "efb9b5f0-b911-40ba-94fb-f9a17a15891c",
                    "9be3a9d0-74fe-40ac-ba83-ca26f420e28c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 11,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "bd159c33-5a11-4cb9-bd71-7cc7c1ba602d",
                  "title": "query instances with 'ContentSequence.ConceptCodeSequence.CodingSchemeVersion'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeVersion=v2.0' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodingSchemeVersion' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeVersion=v2.0' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "18082b82-7a4a-40fb-8008-c8b7181867ca",
                      "parentUUID": "bd159c33-5a11-4cb9-bd71-7cc7c1ba602d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeVersion=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodingSchemeVersion' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeVersion=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "c1f0b3ef-7dad-4b06-b727-da5f76f8553e",
                      "parentUUID": "bd159c33-5a11-4cb9-bd71-7cc7c1ba602d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "18082b82-7a4a-40fb-8008-c8b7181867ca",
                    "c1f0b3ef-7dad-4b06-b727-da5f76f8553e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "4721471f-963b-412f-b128-242107c368b6",
                  "title": "query instances with 'ContentSequence.ConceptCodeSequence.CodeMeaning'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeMeaning=For Test 2' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodeMeaning' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeMeaning=For Test 2' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "d622fbf5-83c9-4c14-9d91-cd686d059fa7",
                      "parentUUID": "4721471f-963b-412f-b128-242107c368b6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeMeaning=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodeMeaning' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeMeaning=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "f7ebe154-1eac-4468-911f-1a6130393fe8",
                      "parentUUID": "4721471f-963b-412f-b128-242107c368b6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d622fbf5-83c9-4c14-9d91-cd686d059fa7",
                    "f7ebe154-1eac-4468-911f-1a6130393fe8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "eb212fd8-8c8f-480c-9337-b9e159afdc2d",
                  "title": "query instances with 'VerifyingObserverSequence.VerifyingObserverName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'VerifyingObserverSequence.VerifyingObserverName=fakeName' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'VerifyingObserverSequence.VerifyingObserverName' Should query instances with param 'VerifyingObserverSequence.VerifyingObserverName=fakeName' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "a6571240-edfd-4ede-afcd-d57d725d7313",
                      "parentUUID": "eb212fd8-8c8f-480c-9337-b9e159afdc2d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'VerifyingObserverSequence.VerifyingObserverName=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'VerifyingObserverSequence.VerifyingObserverName' Should query instances with param 'VerifyingObserverSequence.VerifyingObserverName=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "bf458e36-b1c5-4a50-8836-03d98172a36c",
                      "parentUUID": "eb212fd8-8c8f-480c-9337-b9e159afdc2d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a6571240-edfd-4ede-afcd-d57d725d7313",
                    "bf458e36-b1c5-4a50-8836-03d98172a36c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "08ab08b2-e884-4beb-bc5f-db1edfd4001e",
                  "title": "query instances with 'VerifyingObserverSequence.VerificationDateTime'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'VerifyingObserverSequence.VerificationDateTime=20200201-' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'VerifyingObserverSequence.VerificationDateTime' Should query instances with param 'VerifyingObserverSequence.VerificationDateTime=20200201-' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "4f488342-5817-4a55-afaa-0d5560e7c2e9",
                      "parentUUID": "08ab08b2-e884-4beb-bc5f-db1edfd4001e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'VerifyingObserverSequence.VerificationDateTime=19990101' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'VerifyingObserverSequence.VerificationDateTime' Should query instances with param 'VerifyingObserverSequence.VerificationDateTime=19990101' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "509b4b68-b276-44c6-98e5-31740034308a",
                      "parentUUID": "08ab08b2-e884-4beb-bc5f-db1edfd4001e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'VerifyingObserverSequence.VerificationDateTime=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'VerifyingObserverSequence.VerificationDateTime' Should query instances with param 'VerifyingObserverSequence.VerificationDateTime=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "c525a14e-0d46-44be-9508-33a64ef097ca",
                      "parentUUID": "08ab08b2-e884-4beb-bc5f-db1edfd4001e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4f488342-5817-4a55-afaa-0d5560e7c2e9",
                    "509b4b68-b276-44c6-98e5-31740034308a",
                    "c525a14e-0d46-44be-9508-33a64ef097ca"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 19,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "3e5b97ca-5b70-4679-8918-771dc33fb35e",
                  "title": "query instances with 'VerifyingObserverSequence.VerifyingOrganization'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'VerifyingObserverSequence.VerifyingOrganization=Test Org' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'VerifyingObserverSequence.VerifyingOrganization' Should query instances with param 'VerifyingObserverSequence.VerifyingOrganization=Test Org' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "ef6fd7d0-9279-4c0a-8cba-7c316911f8db",
                      "parentUUID": "3e5b97ca-5b70-4679-8918-771dc33fb35e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'VerifyingObserverSequence.VerifyingOrganization=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'VerifyingObserverSequence.VerifyingOrganization' Should query instances with param 'VerifyingObserverSequence.VerifyingOrganization=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "42484b4f-ea32-4e5d-8bfe-2e308da7c307",
                      "parentUUID": "3e5b97ca-5b70-4679-8918-771dc33fb35e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ef6fd7d0-9279-4c0a-8cba-7c316911f8db",
                    "42484b4f-ea32-4e5d-8bfe-2e308da7c307"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 14,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "64f346f4-70c4-414f-88ad-a71569921f5e",
          "title": "QIDOR-RS search patient '/dicom-web/patients'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"QIDOR-RS search patient '/dicom-web/patients'\"",
              "fullTitle": "QIDOR-RS search patient '/dicom-web/patients' \"before all\" hook in \"QIDOR-RS search patient '/dicom-web/patients'\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/patients\",\n    body: testPatient,\n});",
              "err": {},
              "uuid": "2eff9f99-c709-4d83-99fb-69698ada1597",
              "parentUUID": "64f346f4-70c4-414f-88ad-a71569921f5e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should search patients",
              "fullTitle": "QIDOR-RS search patient '/dicom-web/patients' Should search patients",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/patients\",\n});\nexpect(response.statusCode).to.equal(200);\nlet patients = await response.json();\nexpect(patients).to.be.an(\"array\");\nexpect(patients).have.lengthOf(1);",
              "err": {},
              "uuid": "638e4ba6-39dd-4147-a32f-ea5c14153d3a",
              "parentUUID": "64f346f4-70c4-414f-88ad-a71569921f5e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "735b0e77-5719-485b-b8ed-3deb31e6b9de",
              "title": "query with params",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "7b6da826-03f4-418e-a99d-e67f84501f90",
                  "title": "query with param 'PatientName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query patients with param 'PatientName=John^Doe' and get patient successfully",
                      "fullTitle": "QIDOR-RS search patient '/dicom-web/patients' query with params query with param 'PatientName' Should query patients with param 'PatientName=John^Doe' and get patient successfully",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "84576582-8392-4c8b-86ee-84265d2d8aad",
                      "parentUUID": "7b6da826-03f4-418e-a99d-e67f84501f90",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query patients with param 'PatientName=foo' and get patient successfully",
                      "fullTitle": "QIDOR-RS search patient '/dicom-web/patients' query with params query with param 'PatientName' Should query patients with param 'PatientName=foo' and get patient successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "1d6ffab7-cdd0-46cb-8b7a-ebfddb8aac14",
                      "parentUUID": "7b6da826-03f4-418e-a99d-e67f84501f90",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query patients with param 'PatientName=John*&PatientName=*Doe' and get 1 patient successfully",
                      "fullTitle": "QIDOR-RS search patient '/dicom-web/patients' query with params query with param 'PatientName' Should query patients with param 'PatientName=John*&PatientName=*Doe' and get 1 patient successfully",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?PatientName=John*&PatientName=*Doe`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\n        \nexpect(response.statusCode).to.equal(200);\n        \nlet data = await response.json();\n        \nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(1);",
                      "err": {},
                      "uuid": "1f1b68b1-299f-4e20-b027-1f038739020c",
                      "parentUUID": "7b6da826-03f4-418e-a99d-e67f84501f90",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "84576582-8392-4c8b-86ee-84265d2d8aad",
                    "1d6ffab7-cdd0-46cb-8b7a-ebfddb8aac14",
                    "1f1b68b1-299f-4e20-b027-1f038739020c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "29fd8c0d-142a-4049-8f36-1358dfdc0691",
                  "title": "query with param 'PatientID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query patients with param 'PatientID=12345' and get patient successfully",
                      "fullTitle": "QIDOR-RS search patient '/dicom-web/patients' query with params query with param 'PatientID' Should query patients with param 'PatientID=12345' and get patient successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "d2ecf176-599d-4458-9107-17d36f4e4876",
                      "parentUUID": "29fd8c0d-142a-4049-8f36-1358dfdc0691",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query patients with param 'PatientID=foo' and get patient successfully",
                      "fullTitle": "QIDOR-RS search patient '/dicom-web/patients' query with params query with param 'PatientID' Should query patients with param 'PatientID=foo' and get patient successfully",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "a2f4319f-53ae-4f9a-ac62-c8ffa81770c5",
                      "parentUUID": "29fd8c0d-142a-4049-8f36-1358dfdc0691",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d2ecf176-599d-4458-9107-17d36f4e4876",
                    "a2f4319f-53ae-4f9a-ac62-c8ffa81770c5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "347489e4-a716-4dd2-9f84-19f3d9f51170",
                  "title": "query with param 'PatientBirthDate'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query patients with param 'PatientBirthDate=19800101' and get patient successfully",
                      "fullTitle": "QIDOR-RS search patient '/dicom-web/patients' query with params query with param 'PatientBirthDate' Should query patients with param 'PatientBirthDate=19800101' and get patient successfully",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "c92526d9-61ed-4045-99bb-d763470b620c",
                      "parentUUID": "347489e4-a716-4dd2-9f84-19f3d9f51170",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query patients with param 'PatientBirthDate=19000101' and get patient successfully",
                      "fullTitle": "QIDOR-RS search patient '/dicom-web/patients' query with params query with param 'PatientBirthDate' Should query patients with param 'PatientBirthDate=19000101' and get patient successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "5ce5dae5-c3f6-4227-a921-c5d3880592a0",
                      "parentUUID": "347489e4-a716-4dd2-9f84-19f3d9f51170",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c92526d9-61ed-4045-99bb-d763470b620c",
                    "5ce5dae5-c3f6-4227-a921-c5d3880592a0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "cddbc547-5f11-4716-a2e2-7e73fa1e0c79",
                  "title": "query with param 'IssuerOfPatientID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query patients with param 'IssuerOfPatientID=Issuer ID' and get patient successfully",
                      "fullTitle": "QIDOR-RS search patient '/dicom-web/patients' query with params query with param 'IssuerOfPatientID' Should query patients with param 'IssuerOfPatientID=Issuer ID' and get patient successfully",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "5c0569f0-7a4b-4301-9cf7-743ea2c33334",
                      "parentUUID": "cddbc547-5f11-4716-a2e2-7e73fa1e0c79",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query patients with param 'IssuerOfPatientID=foo' and get patient successfully",
                      "fullTitle": "QIDOR-RS search patient '/dicom-web/patients' query with params query with param 'IssuerOfPatientID' Should query patients with param 'IssuerOfPatientID=foo' and get patient successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "21645ad3-835c-47dd-b3b1-a7be04f96840",
                      "parentUUID": "cddbc547-5f11-4716-a2e2-7e73fa1e0c79",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5c0569f0-7a4b-4301-9cf7-743ea2c33334",
                    "21645ad3-835c-47dd-b3b1-a7be04f96840"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "638e4ba6-39dd-4147-a32f-ea5c14153d3a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a64b5a53-26ad-42c7-8a11-68d5e9780362",
          "title": "query series",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query series\"",
              "fullTitle": "query series \"before all\" hook in \"query series\"",
              "timedOut": false,
              "duration": 980,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/dicomFiles/1-01-mod-vo\")\n);",
              "err": {},
              "uuid": "36e2af18-1d43-4f79-bf57-e707ef1c6805",
              "parentUUID": "a64b5a53-26ad-42c7-8a11-68d5e9780362",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"query series\"",
              "fullTitle": "query series \"after all\" hook in \"query series\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "01624c70-f7d0-410e-8945-97f834eee38f",
              "parentUUID": "a64b5a53-26ad-42c7-8a11-68d5e9780362",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should query series successfully and get 9 series",
              "fullTitle": "query series Should query series successfully and get 9 series",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/series\",\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(9);",
              "err": {},
              "uuid": "6dc766f7-af4d-4a3f-9d87-def8360af5f6",
              "parentUUID": "a64b5a53-26ad-42c7-8a11-68d5e9780362",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "73e97fa4-0a3d-439f-b270-e86ac504307e",
              "title": "query series with param 'PerformingPhysicianName'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'PerformingPhysicianName=cName' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'PerformingPhysicianName' Should query series with param 'PerformingPhysicianName=cName' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "02264dc4-ad1d-449e-be3b-bde9bdc9d402",
                  "parentUUID": "73e97fa4-0a3d-439f-b270-e86ac504307e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'PerformingPhysicianName=dName' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'PerformingPhysicianName' Should query series with param 'PerformingPhysicianName=dName' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "d2030cfa-2329-47e9-8f1b-1762330d8186",
                  "parentUUID": "73e97fa4-0a3d-439f-b270-e86ac504307e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'PerformingPhysicianName=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'PerformingPhysicianName' Should query series with param 'PerformingPhysicianName=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "a499234f-133c-4776-8d3a-afded2ebd386",
                  "parentUUID": "73e97fa4-0a3d-439f-b270-e86ac504307e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02264dc4-ad1d-449e-be3b-bde9bdc9d402",
                "d2030cfa-2329-47e9-8f1b-1762330d8186",
                "a499234f-133c-4776-8d3a-afded2ebd386"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 35,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "bed0c6fd-5443-4fb6-a96c-6d4b527e441c",
              "title": "query series with param 'OperatorsName'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'OperatorsName=pyName' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'OperatorsName' Should query series with param 'OperatorsName=pyName' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "7ec66ceb-4bb7-44d9-b5a7-b1a39c890247",
                  "parentUUID": "bed0c6fd-5443-4fb6-a96c-6d4b527e441c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'OperatorsName=py' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'OperatorsName' Should query series with param 'OperatorsName=py' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "773a9f1f-25d5-45e4-9cb9-ce1b51535bd5",
                  "parentUUID": "bed0c6fd-5443-4fb6-a96c-6d4b527e441c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'OperatorsName=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'OperatorsName' Should query series with param 'OperatorsName=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "32cb0347-50c2-4e49-8ed7-3b1759aceabf",
                  "parentUUID": "bed0c6fd-5443-4fb6-a96c-6d4b527e441c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ec66ceb-4bb7-44d9-b5a7-b1a39c890247",
                "773a9f1f-25d5-45e4-9cb9-ce1b51535bd5",
                "32cb0347-50c2-4e49-8ed7-3b1759aceabf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "2fec6a4f-760d-4ffe-a609-1875363d58ba",
              "title": "query series with param 'RequestAttributesSequence.AccessionNumber'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'RequestAttributesSequence.AccessionNumber=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.AccessionNumber' Should query series with param 'RequestAttributesSequence.AccessionNumber=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "976ac489-49f7-44c4-aa24-657cdae0e2f4",
                  "parentUUID": "2fec6a4f-760d-4ffe-a609-1875363d58ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'RequestAttributesSequence.AccessionNumber=123456789' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.AccessionNumber' Should query series with param 'RequestAttributesSequence.AccessionNumber=123456789' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "837b1010-ffa2-42eb-ba43-3d0e4efcb9cc",
                  "parentUUID": "2fec6a4f-760d-4ffe-a609-1875363d58ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "976ac489-49f7-44c4-aa24-657cdae0e2f4",
                "837b1010-ffa2-42eb-ba43-3d0e4efcb9cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "7077928b-e476-4db4-bbe4-ad69759381d7",
              "title": "query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.LocalNamespaceEntityID'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.LocalNamespaceEntityID' Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "0c311e03-e289-4509-9408-9bc023ccbc6b",
                  "parentUUID": "7077928b-e476-4db4-bbe4-ad69759381d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=fuckyou' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.LocalNamespaceEntityID' Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=fuckyou' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "72a5cfd0-8a84-47cc-819f-44646901b552",
                  "parentUUID": "7077928b-e476-4db4-bbe4-ad69759381d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c311e03-e289-4509-9408-9bc023ccbc6b",
                "72a5cfd0-8a84-47cc-819f-44646901b552"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "959f6fed-1f0d-4849-bfed-6a71838dfcd9",
              "title": "query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityID'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityID=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityID' Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityID=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "4d0e45ea-35d0-455c-bf91-9d72aae2a46d",
                  "parentUUID": "959f6fed-1f0d-4849-bfed-6a71838dfcd9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityID=b459025d-58f8-45c1-8ea9-0dc108fabc4c' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityID' Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityID=b459025d-58f8-45c1-8ea9-0dc108fabc4c' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "b19f4768-1eda-47fd-a1c4-97824ba8926d",
                  "parentUUID": "959f6fed-1f0d-4849-bfed-6a71838dfcd9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d0e45ea-35d0-455c-bf91-9d72aae2a46d",
                "b19f4768-1eda-47fd-a1c4-97824ba8926d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "87489402-41a0-4702-aa53-c0f8678e9165",
              "title": "query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityIDType'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityIDType=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityIDType' Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityIDType=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "a013e891-221c-45c0-a49a-82214ce5a14a",
                  "parentUUID": "87489402-41a0-4702-aa53-c0f8678e9165",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityIDType=UUID' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityIDType' Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityIDType=UUID' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "f253f941-1824-4336-bf1e-6c35b2af5c17",
                  "parentUUID": "87489402-41a0-4702-aa53-c0f8678e9165",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a013e891-221c-45c0-a49a-82214ce5a14a",
                "f253f941-1824-4336-bf1e-6c35b2af5c17"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "5af761d4-ea1f-4fa1-b2b4-351f803b371b",
              "title": "query series with param 'RequestAttributesSequence.StudyInstanceUID'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'RequestAttributesSequence.StudyInstanceUID=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.StudyInstanceUID' Should query series with param 'RequestAttributesSequence.StudyInstanceUID=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "816bb917-aa21-4a94-a360-0bf5f1af31ce",
                  "parentUUID": "5af761d4-ea1f-4fa1-b2b4-351f803b371b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'RequestAttributesSequence.StudyInstanceUID=1.2.826.0.1.3680043.8.498.11038417314486293343745968896540168442' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.StudyInstanceUID' Should query series with param 'RequestAttributesSequence.StudyInstanceUID=1.2.826.0.1.3680043.8.498.11038417314486293343745968896540168442' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "5e0090b5-a37e-4219-8d92-edb7a2ae0682",
                  "parentUUID": "5af761d4-ea1f-4fa1-b2b4-351f803b371b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "816bb917-aa21-4a94-a360-0bf5f1af31ce",
                "5e0090b5-a37e-4219-8d92-edb7a2ae0682"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "92229fe1-4dd1-495e-997b-0a0daa1b4766",
              "title": "query series with param 'RequestAttributesSequence.ScheduledProcedureStepID'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'RequestAttributesSequence.ScheduledProcedureStepID=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.ScheduledProcedureStepID' Should query series with param 'RequestAttributesSequence.ScheduledProcedureStepID=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "ec55f2e7-ff05-42c0-a423-e4ad45e74f2a",
                  "parentUUID": "92229fe1-4dd1-495e-997b-0a0daa1b4766",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'RequestAttributesSequence.ScheduledProcedureStepID=aaa' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.ScheduledProcedureStepID' Should query series with param 'RequestAttributesSequence.ScheduledProcedureStepID=aaa' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "d66b7882-75d8-4f73-b642-44046aead614",
                  "parentUUID": "92229fe1-4dd1-495e-997b-0a0daa1b4766",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec55f2e7-ff05-42c0-a423-e4ad45e74f2a",
                "d66b7882-75d8-4f73-b642-44046aead614"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "a91c9dfe-19c0-42a5-bcd6-3aa48ac96797",
              "title": "query series with param 'RequestAttributesSequence.RequestedProcedureID'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'RequestAttributesSequence.RequestedProcedureID=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.RequestedProcedureID' Should query series with param 'RequestAttributesSequence.RequestedProcedureID=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "9dd1a431-d120-41a4-af77-fa0bffa876dc",
                  "parentUUID": "a91c9dfe-19c0-42a5-bcd6-3aa48ac96797",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'RequestAttributesSequence.RequestedProcedureID=bbb' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.RequestedProcedureID' Should query series with param 'RequestAttributesSequence.RequestedProcedureID=bbb' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "4a146aa5-583a-42df-a47a-7397384b5677",
                  "parentUUID": "a91c9dfe-19c0-42a5-bcd6-3aa48ac96797",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9dd1a431-d120-41a4-af77-fa0bffa876dc",
                "4a146aa5-583a-42df-a47a-7397384b5677"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "6dc766f7-af4d-4a3f-9d87-def8360af5f6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7122e5d5-f84b-4af0-b5e2-acc61da3004e",
          "title": "query studies '/dicom-web/studies'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query studies '/dicom-web/studies'\"",
              "fullTitle": "query studies '/dicom-web/studies' \"before all\" hook in \"query studies '/dicom-web/studies'\"",
              "timedOut": false,
              "duration": 861,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "b4ce50f6-1379-428b-b00e-ac34e9960883",
              "parentUUID": "7122e5d5-f84b-4af0-b5e2-acc61da3004e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"query studies '/dicom-web/studies'\"",
              "fullTitle": "query studies '/dicom-web/studies' \"after all\" hook in \"query studies '/dicom-web/studies'\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "b0b4d636-fa20-4cf9-880f-1f1322fd19bf",
              "parentUUID": "7122e5d5-f84b-4af0-b5e2-acc61da3004e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should query studies and get 4 studies successfully",
              "fullTitle": "query studies '/dicom-web/studies' Should query studies and get 4 studies successfully",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/studies\",\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\n\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);\nlet firstData = data[0];\n// Required Matching Attributes\n// {@link https://dicom.nema.org/medical/dicom/current/output/html/part18.html#table_10.6.1-5}\nexpect(firstData).to.have.property(\"00080020\");\nexpect(firstData).to.have.property(\"00080030\");\nexpect(firstData).to.have.property(\"00080050\");\nexpect(firstData).to.have.property(\"00080061\");\nexpect(firstData).to.have.property(\"00080090\");\nexpect(firstData).to.have.property(\"00100010\");\nexpect(firstData).to.have.property(\"00100020\");\nexpect(firstData).to.have.property(\"0020000D\");\nexpect(firstData).to.have.property(\"00200010\");",
              "err": {},
              "uuid": "15ca8e6d-1484-4be9-a794-8e2ffb8af474",
              "parentUUID": "7122e5d5-f84b-4af0-b5e2-acc61da3004e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a056ce83-6e1b-4cc9-81d4-41f3e3345995",
              "title": "query studies with param 'StudyDate'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'StudyDate=20100213' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyDate' Should query studies with param 'StudyDate=20100213' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "fcc7775b-53c0-456e-9204-86a627856432",
                  "parentUUID": "a056ce83-6e1b-4cc9-81d4-41f3e3345995",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyDate=-20100213' and get 3 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyDate' Should query studies with param 'StudyDate=-20100213' and get 3 studies successfully",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "d23e6940-7055-4cd0-9e45-1390d1e2e61d",
                  "parentUUID": "a056ce83-6e1b-4cc9-81d4-41f3e3345995",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyDate=20100101-' and get 2 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyDate' Should query studies with param 'StudyDate=20100101-' and get 2 studies successfully",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "4a0f991c-b1a3-49e6-92ca-f4acd5d28a4b",
                  "parentUUID": "a056ce83-6e1b-4cc9-81d4-41f3e3345995",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyDate=20100212-20181031' and get 2 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyDate' Should query studies with param 'StudyDate=20100212-20181031' and get 2 studies successfully",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "18b9a3eb-2dbc-492f-9b2a-85f932f2f8f5",
                  "parentUUID": "a056ce83-6e1b-4cc9-81d4-41f3e3345995",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fcc7775b-53c0-456e-9204-86a627856432",
                "d23e6940-7055-4cd0-9e45-1390d1e2e61d",
                "4a0f991c-b1a3-49e6-92ca-f4acd5d28a4b",
                "18b9a3eb-2dbc-492f-9b2a-85f932f2f8f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 51,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "0bd6a5a0-4a29-4cc8-aab9-f804f65d3a5b",
              "title": "query studies with param 'StudyTime'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'StudyTime=170922' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyTime' Should query studies with param 'StudyTime=170922' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "d21d3071-863c-41ab-82e7-d759f622a3bc",
                  "parentUUID": "0bd6a5a0-4a29-4cc8-aab9-f804f65d3a5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyTime=-170922' and get 4 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyTime' Should query studies with param 'StudyTime=-170922' and get 4 studies successfully",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "70e5432f-0af7-4d1c-b551-41d2c0e1248e",
                  "parentUUID": "0bd6a5a0-4a29-4cc8-aab9-f804f65d3a5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyTime=150000-' and get 2 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyTime' Should query studies with param 'StudyTime=150000-' and get 2 studies successfully",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "ff57af6c-7182-4460-b15d-7eaf950089d7",
                  "parentUUID": "0bd6a5a0-4a29-4cc8-aab9-f804f65d3a5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyTime=130000-160000' and get 2 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyTime' Should query studies with param 'StudyTime=130000-160000' and get 2 studies successfully",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "ad01c3b1-0a07-4a9f-ae06-1898affc0dd8",
                  "parentUUID": "0bd6a5a0-4a29-4cc8-aab9-f804f65d3a5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d21d3071-863c-41ab-82e7-d759f622a3bc",
                "70e5432f-0af7-4d1c-b551-41d2c0e1248e",
                "ff57af6c-7182-4460-b15d-7eaf950089d7",
                "ad01c3b1-0a07-4a9f-ae06-1898affc0dd8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "5de2a4cb-d54f-4585-a111-7438ae9123dd",
              "title": "query studies with param 'AccessionNumber'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'AccessionNumber=123456' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'AccessionNumber' Should query studies with param 'AccessionNumber=123456' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "321b63fd-f26f-47f0-b34e-b21544d0f324",
                  "parentUUID": "5de2a4cb-d54f-4585-a111-7438ae9123dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'AccessionNumber=3266660953883852' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'AccessionNumber' Should query studies with param 'AccessionNumber=3266660953883852' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "8ce366e2-5dd3-46e4-9c3d-30de86de9a45",
                  "parentUUID": "5de2a4cb-d54f-4585-a111-7438ae9123dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "321b63fd-f26f-47f0-b34e-b21544d0f324",
                "8ce366e2-5dd3-46e4-9c3d-30de86de9a45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "aaf7acbb-3811-4988-a1db-6f6815e6f346",
              "title": "query studies with param 'ModalitiesInStudy'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'ModalitiesInStudy=CT' and get 2 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'ModalitiesInStudy' Should query studies with param 'ModalitiesInStudy=CT' and get 2 studies successfully",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "cdc0e35f-f3b5-493e-a5e6-8bf27bd45895",
                  "parentUUID": "aaf7acbb-3811-4988-a1db-6f6815e6f346",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'ModalitiesInStudy=DOC' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'ModalitiesInStudy' Should query studies with param 'ModalitiesInStudy=DOC' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "8df05557-e6b2-40fd-870f-382317b9d600",
                  "parentUUID": "aaf7acbb-3811-4988-a1db-6f6815e6f346",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cdc0e35f-f3b5-493e-a5e6-8bf27bd45895",
                "8df05557-e6b2-40fd-870f-382317b9d600"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "96834ff7-4490-4f8d-8b27-aee92eb4e0e4",
              "title": "query studies with param 'PatientName'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'PatientName=Philips^Amy' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'PatientName' Should query studies with param 'PatientName=Philips^Amy' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "9a450f9b-0846-4835-89bb-7312164c1325",
                  "parentUUID": "96834ff7-4490-4f8d-8b27-aee92eb4e0e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'PatientName=Philips*' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'PatientName' Should query studies with param 'PatientName=Philips*' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "fcd930ef-8ed3-42c8-b375-05fe3eda3138",
                  "parentUUID": "96834ff7-4490-4f8d-8b27-aee92eb4e0e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'PatientName=foobar' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'PatientName' Should query studies with param 'PatientName=foobar' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "be63d493-a0fc-4aac-b92d-58b8cdad18ee",
                  "parentUUID": "96834ff7-4490-4f8d-8b27-aee92eb4e0e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'PatientName=Philips*&PatientName=*Amy' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'PatientName' Should query studies with param 'PatientName=Philips*&PatientName=*Amy' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?PatientName=Philips*&PatientName=*Amy`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\n    \nexpect(response.statusCode).to.equal(200);\n    \nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(1);",
                  "err": {},
                  "uuid": "9fa4b816-2e0e-40c3-98a0-eebda93e9a43",
                  "parentUUID": "96834ff7-4490-4f8d-8b27-aee92eb4e0e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a450f9b-0846-4835-89bb-7312164c1325",
                "fcd930ef-8ed3-42c8-b375-05fe3eda3138",
                "be63d493-a0fc-4aac-b92d-58b8cdad18ee",
                "9fa4b816-2e0e-40c3-98a0-eebda93e9a43"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 41,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "44711fe9-cbf0-4b83-b874-e3aa2fbb3188",
              "title": "query studies with param 'PatientID'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'PatientID=123456' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'PatientID' Should query studies with param 'PatientID=123456' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "188472b8-dee8-4583-8269-b2a47d3a73d3",
                  "parentUUID": "44711fe9-cbf0-4b83-b874-e3aa2fbb3188",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'PatientID=C3*' and get 2 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'PatientID' Should query studies with param 'PatientID=C3*' and get 2 studies successfully",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "aafaa1e9-c242-4264-bea2-f283ffc728b6",
                  "parentUUID": "44711fe9-cbf0-4b83-b874-e3aa2fbb3188",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'PatientID=foobar' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'PatientID' Should query studies with param 'PatientID=foobar' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "084a1cc2-e865-4430-a94e-daf001bea4d9",
                  "parentUUID": "44711fe9-cbf0-4b83-b874-e3aa2fbb3188",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "188472b8-dee8-4583-8269-b2a47d3a73d3",
                "aafaa1e9-c242-4264-bea2-f283ffc728b6",
                "084a1cc2-e865-4430-a94e-daf001bea4d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 29,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "ed19c011-64e5-4c91-bd26-3013158cdb44",
              "title": "query studies with param 'StudyInstanceUID'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596634768' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyInstanceUID' Should query studies with param 'StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596634768' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "32128d1a-dc3c-4471-be47-331ba56f8b3a",
                  "parentUUID": "ed19c011-64e5-4c91-bd26-3013158cdb44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596123456' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyInstanceUID' Should query studies with param 'StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596123456' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "df74d5b0-2926-4cf0-b288-3833f7a5f975",
                  "parentUUID": "ed19c011-64e5-4c91-bd26-3013158cdb44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32128d1a-dc3c-4471-be47-331ba56f8b3a",
                "df74d5b0-2926-4cf0-b288-3833f7a5f975"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "d1b2cf08-88ab-40c5-bd2d-418e344b7f1d",
              "title": "query studies with param 'StudyID'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'StudyID=D18-1001' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyID' Should query studies with param 'StudyID=D18-1001' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "e2fa8909-3863-49be-bb4c-8c93fab0668f",
                  "parentUUID": "d1b2cf08-88ab-40c5-bd2d-418e344b7f1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyID=foo' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyID' Should query studies with param 'StudyID=foo' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "f714abac-a14b-4873-8d66-2fce27e81a1e",
                  "parentUUID": "d1b2cf08-88ab-40c5-bd2d-418e344b7f1d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2fa8909-3863-49be-bb4c-8c93fab0668f",
                "f714abac-a14b-4873-8d66-2fce27e81a1e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "346f2250-1015-445e-995a-5373be97663d",
              "title": "query studies with param 'ReferringPhysicianName'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'ReferringPhysicianName=ROBERT^BROWN' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'ReferringPhysicianName' Should query studies with param 'ReferringPhysicianName=ROBERT^BROWN' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "89c16c3f-a1ad-44d7-b588-e7173f090e3d",
                  "parentUUID": "346f2250-1015-445e-995a-5373be97663d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'ReferringPhysicianName=foo' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'ReferringPhysicianName' Should query studies with param 'ReferringPhysicianName=foo' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "b12b8d1b-d5d1-4d39-bf64-cea10d7cc72a",
                  "parentUUID": "346f2250-1015-445e-995a-5373be97663d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89c16c3f-a1ad-44d7-b588-e7173f090e3d",
                "b12b8d1b-d5d1-4d39-bf64-cea10d7cc72a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "fe3631f6-9d28-42c0-923a-e69838d428d2",
              "title": "query studies with param 'StudyDescription'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'StudyDescription=foo' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyDescription' Should query studies with param 'StudyDescription=foo' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "f4550000-4c3b-4a5b-9302-9d43a60923c9",
                  "parentUUID": "fe3631f6-9d28-42c0-923a-e69838d428d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyDescription=XR CHEST 2 VIEWS AP OR PA+LAT' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyDescription' Should query studies with param 'StudyDescription=XR CHEST 2 VIEWS AP OR PA+LAT' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "7d79d765-79df-4764-b6f4-dfded2407de3",
                  "parentUUID": "fe3631f6-9d28-42c0-923a-e69838d428d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4550000-4c3b-4a5b-9302-9d43a60923c9",
                "7d79d765-79df-4764-b6f4-dfded2407de3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "0b7a3f62-1abc-4b97-9871-6e7b31460ffd",
              "title": "sort",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should sort studies by 00080020",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should sort studies by 00080020",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);",
                  "err": {},
                  "uuid": "20544546-4f72-4d45-8102-a7e0e6d3b0f4",
                  "parentUUID": "0b7a3f62-1abc-4b97-9871-6e7b31460ffd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort studies by -00080020",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should sort studies by -00080020",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);",
                  "err": {},
                  "uuid": "b2c081f8-8dc4-4f16-88e7-f5dc1c495a46",
                  "parentUUID": "0b7a3f62-1abc-4b97-9871-6e7b31460ffd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort studies by 00080030",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should sort studies by 00080030",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);",
                  "err": {},
                  "uuid": "692b3772-5a70-442d-889c-647c7335e2cd",
                  "parentUUID": "0b7a3f62-1abc-4b97-9871-6e7b31460ffd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort studies by 00080050",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should sort studies by 00080050",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);",
                  "err": {},
                  "uuid": "e23b15d1-06f0-4937-a67c-d2dfb30c547d",
                  "parentUUID": "0b7a3f62-1abc-4b97-9871-6e7b31460ffd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort studies by 0020000D",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should sort studies by 0020000D",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);",
                  "err": {},
                  "uuid": "a5c64111-e6e5-418b-b94d-17ba866a8ef7",
                  "parentUUID": "0b7a3f62-1abc-4b97-9871-6e7b31460ffd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort studies by 00200010",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should sort studies by 00200010",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);",
                  "err": {},
                  "uuid": "3f12639c-3616-4dfb-96d5-0ea13738451b",
                  "parentUUID": "0b7a3f62-1abc-4b97-9871-6e7b31460ffd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort studies by 00100020",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should sort studies by 00100020",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);",
                  "err": {},
                  "uuid": "78bda7b6-96a3-4b08-967f-6886ebcc95a5",
                  "parentUUID": "0b7a3f62-1abc-4b97-9871-6e7b31460ffd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 400 (Bad Request) when sorting by unsupported field",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should raise 400 (Bad Request) when sorting by unsupported field",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${dictionary.keyword.NumberOfStudyRelatedInstances}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\n    \nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "bd3f851c-9e32-409c-a35a-86ff7bf13653",
                  "parentUUID": "0b7a3f62-1abc-4b97-9871-6e7b31460ffd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20544546-4f72-4d45-8102-a7e0e6d3b0f4",
                "b2c081f8-8dc4-4f16-88e7-f5dc1c495a46",
                "692b3772-5a70-442d-889c-647c7335e2cd",
                "e23b15d1-06f0-4937-a67c-d2dfb30c547d",
                "a5c64111-e6e5-418b-b94d-17ba866a8ef7",
                "3f12639c-3616-4dfb-96d5-0ea13738451b",
                "78bda7b6-96a3-4b08-967f-6886ebcc95a5",
                "bd3f851c-9e32-409c-a35a-86ff7bf13653"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 105,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "15ca8e6d-1484-4be9-a794-8e2ffb8af474"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "80d6c99b-b342-4921-8cd1-20bfcbba3e97",
          "title": "query study-series",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query study-series\"",
              "fullTitle": "query study-series \"before all\" hook in \"query study-series\"",
              "timedOut": false,
              "duration": 831,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nreturn;",
              "err": {},
              "uuid": "f9469813-2466-428f-a61d-9566ba8d8189",
              "parentUUID": "80d6c99b-b342-4921-8cd1-20bfcbba3e97",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should query study-series and get 3 series successfully and have proper attributes",
              "fullTitle": "query study-series Should query study-series and get 3 series successfully and have proper attributes",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(3);\nlet firstData = data[0];\nexpect(firstData).to.be.an(\"object\");\nexpect(firstData).have.property(\"00080060\");\nexpect(firstData).have.property(\"0020000E\");\nexpect(firstData).have.property(\"00200011\");",
              "err": {},
              "uuid": "766ffa83-4f2d-4c04-bfe2-edb68488837c",
              "parentUUID": "80d6c99b-b342-4921-8cd1-20bfcbba3e97",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "7308f4d8-4a6e-49c5-9be1-5d5f21127f69",
              "title": "query study-series with param 'Modality'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query study-series with param 'Modality=OT' and get 1 series successfully",
                  "fullTitle": "query study-series query study-series with param 'Modality' Should query study-series with param 'Modality=OT' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "e9bd7f39-f38f-4318-a7f5-f08d5d2f7969",
                  "parentUUID": "7308f4d8-4a6e-49c5-9be1-5d5f21127f69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query study-series with param 'Modality=CT' and get 2 series successfully",
                  "fullTitle": "query study-series query study-series with param 'Modality' Should query study-series with param 'Modality=CT' and get 2 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "1617aadf-ef4f-45ce-a626-3f33af050db5",
                  "parentUUID": "7308f4d8-4a6e-49c5-9be1-5d5f21127f69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query study-series with param 'Modality=DOC' and get 0 series successfully",
                  "fullTitle": "query study-series query study-series with param 'Modality' Should query study-series with param 'Modality=DOC' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "5ce8581c-0295-49e8-937f-c72cf64fdf4f",
                  "parentUUID": "7308f4d8-4a6e-49c5-9be1-5d5f21127f69",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e9bd7f39-f38f-4318-a7f5-f08d5d2f7969",
                "1617aadf-ef4f-45ce-a626-3f33af050db5",
                "5ce8581c-0295-49e8-937f-c72cf64fdf4f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "6dbaaa78-6ecf-41ab-b147-3710fdfc14e8",
              "title": "query study-series with param 'SeriesInstanceUID'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query study-series with param 'SeriesInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.101062900156808513233428214720' and get 1 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesInstanceUID' Should query study-series with param 'SeriesInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.101062900156808513233428214720' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "8c2635f9-7595-4470-9f97-ef2f4d125e92",
                  "parentUUID": "6dbaaa78-6ecf-41ab-b147-3710fdfc14e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query study-series with param 'SeriesInstanceUID=123456' and get 0 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesInstanceUID' Should query study-series with param 'SeriesInstanceUID=123456' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "55b67632-b1ea-4548-bb70-eafb7f03fd73",
                  "parentUUID": "6dbaaa78-6ecf-41ab-b147-3710fdfc14e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c2635f9-7595-4470-9f97-ef2f4d125e92",
                "55b67632-b1ea-4548-bb70-eafb7f03fd73"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "7c2f5819-2253-4c3e-bbb0-a6df5f7bd9d3",
              "title": "query study-series with param 'SeriesNumber'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query study-series with param 'SeriesNumber=1' and get 1 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesNumber' Should query study-series with param 'SeriesNumber=1' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "b09ef079-0ff5-476f-a546-7de345cb483d",
                  "parentUUID": "7c2f5819-2253-4c3e-bbb0-a6df5f7bd9d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query study-series with param 'SeriesNumber=3001' and get 1 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesNumber' Should query study-series with param 'SeriesNumber=3001' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "d2db1395-713b-41a8-b378-29b969e88b42",
                  "parentUUID": "7c2f5819-2253-4c3e-bbb0-a6df5f7bd9d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query study-series with param 'SeriesNumber=5678' and get 0 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesNumber' Should query study-series with param 'SeriesNumber=5678' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "c9f08929-7872-4e6c-90f8-eef81e0f8fda",
                  "parentUUID": "7c2f5819-2253-4c3e-bbb0-a6df5f7bd9d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b09ef079-0ff5-476f-a546-7de345cb483d",
                "d2db1395-713b-41a8-b378-29b969e88b42",
                "c9f08929-7872-4e6c-90f8-eef81e0f8fda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "0740d687-103d-4f97-ba77-7423d0dd113b",
              "title": "query study-series with param 'SeriesDate'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query study-series with param 'SeriesDate=19990417' and get 1 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesDate' Should query study-series with param 'SeriesDate=19990417' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "7bb9ffb0-d217-4d7c-b722-2fe0458108c3",
                  "parentUUID": "0740d687-103d-4f97-ba77-7423d0dd113b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query study-series with param 'SeriesDate=19990101' and get 0 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesDate' Should query study-series with param 'SeriesDate=19990101' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "09acf5e2-1f70-456d-b906-6bb1f7d8e218",
                  "parentUUID": "0740d687-103d-4f97-ba77-7423d0dd113b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7bb9ffb0-d217-4d7c-b722-2fe0458108c3",
                "09acf5e2-1f70-456d-b906-6bb1f7d8e218"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "26dc1e79-44e3-4d48-a764-31401866027f",
              "title": "query study-series with param 'SeriesDescription'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query study-series with param 'SeriesDescription=*Capture*' and get 1 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesDescription' Should query study-series with param 'SeriesDescription=*Capture*' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "d113ab58-c29a-434e-9ec1-03e359f3952b",
                  "parentUUID": "26dc1e79-44e3-4d48-a764-31401866027f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query study-series with param 'SeriesDescription=24861268' and get 0 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesDescription' Should query study-series with param 'SeriesDescription=24861268' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "ac3c027a-fab3-43c1-8cf0-69caf6908861",
                  "parentUUID": "26dc1e79-44e3-4d48-a764-31401866027f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d113ab58-c29a-434e-9ec1-03e359f3952b",
                "ac3c027a-fab3-43c1-8cf0-69caf6908861"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "9bd5953c-834b-41f2-a0c3-142e3619e4a4",
              "title": "sort",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should sort series by 00080021",
                  "fullTitle": "query study-series sort Should sort series by 00080021",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(3);",
                  "err": {},
                  "uuid": "f29b0c02-efae-4954-a1cf-b5ffeae8c4a1",
                  "parentUUID": "9bd5953c-834b-41f2-a0c3-142e3619e4a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort series by 00080060",
                  "fullTitle": "query study-series sort Should sort series by 00080060",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(3);",
                  "err": {},
                  "uuid": "7151774b-7600-4b80-b4b7-deb9f1f8c16d",
                  "parentUUID": "9bd5953c-834b-41f2-a0c3-142e3619e4a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort series by 0008103E",
                  "fullTitle": "query study-series sort Should sort series by 0008103E",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(3);",
                  "err": {},
                  "uuid": "41ed70c7-e6e4-41fe-9f44-d65daeeab68d",
                  "parentUUID": "9bd5953c-834b-41f2-a0c3-142e3619e4a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort series by 00200011",
                  "fullTitle": "query study-series sort Should sort series by 00200011",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(3);",
                  "err": {},
                  "uuid": "9d2414c3-949c-453f-99b3-42e4a8a0ca8c",
                  "parentUUID": "9bd5953c-834b-41f2-a0c3-142e3619e4a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort series by 0020000E",
                  "fullTitle": "query study-series sort Should sort series by 0020000E",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(3);",
                  "err": {},
                  "uuid": "a4749b4d-3bfa-4e6b-9b91-47860020dbb3",
                  "parentUUID": "9bd5953c-834b-41f2-a0c3-142e3619e4a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort series by 00080020",
                  "fullTitle": "query study-series sort Should sort series by 00080020",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(3);",
                  "err": {},
                  "uuid": "798f76df-9428-46ac-9c25-e18d8c457709",
                  "parentUUID": "9bd5953c-834b-41f2-a0c3-142e3619e4a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f29b0c02-efae-4954-a1cf-b5ffeae8c4a1",
                "7151774b-7600-4b80-b4b7-deb9f1f8c16d",
                "41ed70c7-e6e4-41fe-9f44-d65daeeab68d",
                "9d2414c3-949c-453f-99b3-42e4a8a0ca8c",
                "a4749b4d-3bfa-4e6b-9b91-47860020dbb3",
                "798f76df-9428-46ac-9c25-e18d8c457709"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 54,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "766ffa83-4f2d-4c04-bfe2-edb68488837c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9c390b66-6888-4e4f-a0d8-19277a39f4e9",
          "title": "query study-series-instances",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeriesInstances.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeriesInstances.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query study-series-instances\"",
              "fullTitle": "query study-series-instances \"before all\" hook in \"query study-series-instances\"",
              "timedOut": false,
              "duration": 902,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "8f3fe6d4-f8d7-45cd-accd-ec170158ac1a",
              "parentUUID": "9c390b66-6888-4e4f-a0d8-19277a39f4e9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"query study-series-instances\"",
              "fullTitle": "query study-series-instances \"after all\" hook in \"query study-series-instances\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "d4d24497-0680-46ce-bea0-d6ac3a5746dd",
              "parentUUID": "9c390b66-6888-4e4f-a0d8-19277a39f4e9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should query study-series-instances and get 5 instances",
              "fullTitle": "query study-series-instances Should query study-series-instances and get 5 instances",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
              "err": {},
              "uuid": "8fdb6fea-c586-441e-b8fb-a866e94126ae",
              "parentUUID": "9c390b66-6888-4e4f-a0d8-19277a39f4e9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "630763a7-af42-439c-9c46-fd18d4365e7c",
              "title": "sort",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeriesInstances.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeriesInstances.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should sort instances by 00080016",
                  "fullTitle": "query study-series-instances sort Should sort instances by 00080016",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
                  "err": {},
                  "uuid": "78eec467-3546-4712-bff2-ed77ef50ba02",
                  "parentUUID": "630763a7-af42-439c-9c46-fd18d4365e7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort instances by 00080018",
                  "fullTitle": "query study-series-instances sort Should sort instances by 00080018",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
                  "err": {},
                  "uuid": "055b0a69-f11f-45ce-a027-8ded84a976c4",
                  "parentUUID": "630763a7-af42-439c-9c46-fd18d4365e7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort instances by 00080023",
                  "fullTitle": "query study-series-instances sort Should sort instances by 00080023",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
                  "err": {},
                  "uuid": "d66a978a-3b55-45e0-aaac-8d381c0efe33",
                  "parentUUID": "630763a7-af42-439c-9c46-fd18d4365e7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort instances by 00080033",
                  "fullTitle": "query study-series-instances sort Should sort instances by 00080033",
                  "timedOut": false,
                  "duration": 575,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
                  "err": {},
                  "uuid": "7d40314e-663b-459d-8879-3a7d79b53272",
                  "parentUUID": "630763a7-af42-439c-9c46-fd18d4365e7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort instances by 00200013",
                  "fullTitle": "query study-series-instances sort Should sort instances by 00200013",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
                  "err": {},
                  "uuid": "e03d252d-d9b1-463c-b50f-12d609733c88",
                  "parentUUID": "630763a7-af42-439c-9c46-fd18d4365e7c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort instances by 00080060",
                  "fullTitle": "query study-series-instances sort Should sort instances by 00080060",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
                  "err": {},
                  "uuid": "6957a66e-66b2-4b75-886a-669e63f4913f",
                  "parentUUID": "630763a7-af42-439c-9c46-fd18d4365e7c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78eec467-3546-4712-bff2-ed77ef50ba02",
                "055b0a69-f11f-45ce-a027-8ded84a976c4",
                "d66a978a-3b55-45e0-aaac-8d381c0efe33",
                "7d40314e-663b-459d-8879-3a7d79b53272",
                "e03d252d-d9b1-463c-b50f-12d609733c88",
                "6957a66e-66b2-4b75-886a-669e63f4913f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 655,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "8fdb6fea-c586-441e-b8fb-a866e94126ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
          "title": "Store DICOM Instance route: POST '/dicom-web/studies'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\STOW-RS\\storeInstance.test.js",
          "file": "\\test\\api\\dicom-web\\STOW-RS\\storeInstance.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Store DICOM Instance route: POST '/dicom-web/studies'\"",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' \"before all\" hook in \"Store DICOM Instance route: POST '/dicom-web/studies'\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "20411b39-f624-4b7e-828a-227772d64210",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Store DICOM Instance route: POST '/dicom-web/studies'\"",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' \"after all\" hook in \"Store DICOM Instance route: POST '/dicom-web/studies'\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "14dd2553-37c8-470f-b4df-7312f018a9a4",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should store a DICOM instance with complete attributes successfully and have proper attributes",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store a DICOM instance with complete attributes successfully and have proper attributes",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDicomFilename = resolve(__dirname, \"../../../testData/dicomFiles/1-01-mod-vo\");\n        const response = await storeInstanceForTest(testDicomFilename);\n        expect(response.statusCode).to.be.equal(200);\n        let testFileDicomJson = await JDcm2Json.get(testDicomFilename);\n        await expectInstanceHaveProperAttributes(testFileDicomJson);",
              "err": {},
              "uuid": "93fea501-6f37-4873-89c7-9546273a6046",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should update a DICOM instance",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should update a DICOM instance",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDicomFilename = resolve(__dirname, \"../../../testData/forStore/1-01-mod-vo-updated\");\nconst response = await storeInstanceForTest(testDicomFilename);\nexpect(response.statusCode).to.be.equal(200);\nlet testFileDicomJson = await JDcm2Json.get(testDicomFilename);\nawait expectInstanceHaveProperAttributes(testFileDicomJson);",
              "err": {},
              "uuid": "2c31d758-dd86-4fb1-b199-2132f720720f",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1, CR) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1, CR) successfully",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "556c9614-f387-4120-9295-ba9ed244bb9a",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1.1, DX) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1.1, DX) successfully",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "5ed9aa2b-c798-4efe-8b94-b0506ce1c57a",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, CT) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, CT) successfully",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "f5c4aa5e-fecc-43b7-bee1-800e5f21afc1",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.4, MR) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.4, MR) successfully",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "a308963c-816e-438f-9ab4-d5b0dc0a6184",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, US) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, US) successfully",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "76437bb3-653d-4699-898c-05abcc533e00",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.104.1, US) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.104.1, US) successfully",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "94ede5b8-c665-406b-9f3d-9b928537082f",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, SC) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, SC) successfully",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "2928ea65-e89e-4cb1-bac6-20001fab6681",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, OT) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, OT) successfully",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "2890ec73-3090-42f9-a1e8-eef8892878ab",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.9.1.1, ECG) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.9.1.1, ECG) successfully",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "6556cbc6-6a45-4fda-8d8e-d58f608fa3c1",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.12.1, XA) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.12.1, XA) successfully",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "73f1539c-8614-4c68-ab7b-53a3d03298da",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.3.1, Multi-Frame (US)) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.3.1, Multi-Frame (US)) successfully",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "f25795e9-4df3-4e43-9977-caa01c694dc6",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.91.1, ANN) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.91.1, ANN) successfully",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "1a8c31ff-5df6-49ca-a7be-27930358f368",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.481.3, RTSTRUCT) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.481.3, RTSTRUCT) successfully",
              "timedOut": false,
              "duration": 85,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "4097bcb3-6dbc-4f8f-866e-7db2717033c9",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.66.4, SEG) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.66.4, SEG) successfully",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "53af9f34-445a-4521-9468-29a46504ff58",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.11.1, GSPS) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.11.1, GSPS) successfully",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "db37ba2a-38ac-4df5-b617-9d2a6c6d795e",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.91, JPEG 2000) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.91, JPEG 2000) successfully",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "8ac71608-875e-4ae2-b503-2b153e1f8d1f",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.51, JPEG Lossless) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.51, JPEG Lossless) successfully",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "8ebb48ba-646d-46f7-9ee7-890821fa5907",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.50, JPEG Baseline) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.50, JPEG Baseline) successfully",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "035dc5bf-306f-4bbf-b360-3be8fc8050da",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.1, Explicit VR Little Endian (Uncompressed)) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.1, Explicit VR Little Endian (Uncompressed)) successfully",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "fa8d9255-4116-4b09-8ff1-de9159457d21",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return error when store not DICOM file",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should return error when store not DICOM file",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(resolve(__dirname, \"../../../testData/dicomFiles/data.json\"));\nexpect(response.statusCode).to.be.not.equal(200);",
              "err": {},
              "uuid": "7a155f84-20c9-464d-942c-4fcdf9b6b34f",
              "parentUUID": "60fe8fb2-f4ae-4202-8c1a-821ba102c09c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "93fea501-6f37-4873-89c7-9546273a6046",
            "2c31d758-dd86-4fb1-b199-2132f720720f",
            "556c9614-f387-4120-9295-ba9ed244bb9a",
            "5ed9aa2b-c798-4efe-8b94-b0506ce1c57a",
            "f5c4aa5e-fecc-43b7-bee1-800e5f21afc1",
            "a308963c-816e-438f-9ab4-d5b0dc0a6184",
            "76437bb3-653d-4699-898c-05abcc533e00",
            "94ede5b8-c665-406b-9f3d-9b928537082f",
            "2928ea65-e89e-4cb1-bac6-20001fab6681",
            "2890ec73-3090-42f9-a1e8-eef8892878ab",
            "6556cbc6-6a45-4fda-8d8e-d58f608fa3c1",
            "73f1539c-8614-4c68-ab7b-53a3d03298da",
            "f25795e9-4df3-4e43-9977-caa01c694dc6",
            "1a8c31ff-5df6-49ca-a7be-27930358f368",
            "4097bcb3-6dbc-4f8f-866e-7db2717033c9",
            "53af9f34-445a-4521-9468-29a46504ff58",
            "db37ba2a-38ac-4df5-b617-9d2a6c6d795e",
            "8ac71608-875e-4ae2-b503-2b153e1f8d1f",
            "8ebb48ba-646d-46f7-9ee7-890821fa5907",
            "035dc5bf-306f-4bbf-b360-3be8fc8050da",
            "fa8d9255-4116-4b09-8ff1-de9159457d21",
            "7a155f84-20c9-464d-942c-4fcdf9b6b34f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 889,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d5924530-9a97-4e59-8c55-a5057eca3539",
          "title": "UPS-RS workitem cancellation",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ea9c835c-6ae2-42fe-a26e-c970f519774b",
              "title": "cancel IN PROGRESS",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"cancel IN PROGRESS\"",
                  "fullTitle": "UPS-RS workitem cancellation cancel IN PROGRESS \"before all\" hook in \"cancel IN PROGRESS\"",
                  "timedOut": false,
                  "duration": 44,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await dbInstance.destroyAll();\nawait createTestInProgressWorkitem();",
                  "err": {},
                  "uuid": "6ce0382e-f196-4d51-ac36-fb51fcc2d332",
                  "parentUUID": "ea9c835c-6ae2-42fe-a26e-c970f519774b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should cancel workitem successfully",
                  "fullTitle": "UPS-RS workitem cancellation cancel IN PROGRESS Should cancel workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}/cancelrequest`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify(cancellationRequestPayload)\n});\nexpect(response.statusCode).to.equal(202);",
                  "err": {},
                  "uuid": "a3c34849-c251-47c1-9da0-0aa63fca1555",
                  "parentUUID": "ea9c835c-6ae2-42fe-a26e-c970f519774b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3c34849-c251-47c1-9da0-0aa63fca1555"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "e40f68f1-f855-4ad6-8643-58138a39ee0f",
              "title": "cancel CANCELED",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"cancel CANCELED\"",
                  "fullTitle": "UPS-RS workitem cancellation cancel CANCELED \"before all\" hook in \"cancel CANCELED\"",
                  "timedOut": false,
                  "duration": 45,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await dbInstance.destroyAll();\nawait createTestCanceledWorkitem();",
                  "err": {},
                  "uuid": "54dc3243-a449-4c40-a420-321d52c30cab",
                  "parentUUID": "e40f68f1-f855-4ad6-8643-58138a39ee0f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should cancel workitem successfully",
                  "fullTitle": "UPS-RS workitem cancellation cancel CANCELED Should cancel workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}/cancelrequest`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify(cancellationRequestPayload)\n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "39c883e6-9e15-44fe-b87c-92798bce8e3e",
                  "parentUUID": "e40f68f1-f855-4ad6-8643-58138a39ee0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39c883e6-9e15-44fe-b87c-92798bce8e3e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "2d13e4eb-03d0-405f-be99-a02b9b0b2122",
              "title": "cancel SCHEDULED",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"cancel SCHEDULED\"",
                  "fullTitle": "UPS-RS workitem cancellation cancel SCHEDULED \"before all\" hook in \"cancel SCHEDULED\"",
                  "timedOut": false,
                  "duration": 12,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await dbInstance.destroyAll();\nawait createTestScheduledWorkitem();",
                  "err": {},
                  "uuid": "296ba966-cf2e-4a9d-9086-8b7f9ce9ff8d",
                  "parentUUID": "2d13e4eb-03d0-405f-be99-a02b9b0b2122",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should raise 409 (Conflict) when cancelling SCHEDULED workitem",
                  "fullTitle": "UPS-RS workitem cancellation cancel SCHEDULED Should raise 409 (Conflict) when cancelling SCHEDULED workitem",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}/cancelrequest`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify(cancellationRequestPayload)\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "2ffe8b5e-d54b-47ea-a7a1-b5a08f21c447",
                  "parentUUID": "2d13e4eb-03d0-405f-be99-a02b9b0b2122",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ffe8b5e-d54b-47ea-a7a1-b5a08f21c447"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "32609735-dfbe-4042-815a-ffa363702ba1",
              "title": "cancel COMPLETED",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"cancel COMPLETED\"",
                  "fullTitle": "UPS-RS workitem cancellation cancel COMPLETED \"before all\" hook in \"cancel COMPLETED\"",
                  "timedOut": false,
                  "duration": 61,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await dbInstance.destroyAll();\nawait createTestCompletedWorkitem();",
                  "err": {},
                  "uuid": "b5e33f96-96b5-462b-849c-340834a1f6db",
                  "parentUUID": "32609735-dfbe-4042-815a-ffa363702ba1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should raise 409 (Conflict) when cancelling COMPLETED workitem",
                  "fullTitle": "UPS-RS workitem cancellation cancel COMPLETED Should raise 409 (Conflict) when cancelling COMPLETED workitem",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}/cancelrequest`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify(cancellationRequestPayload)\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "009b3ed3-890a-42f6-99fc-be3545c88f40",
                  "parentUUID": "32609735-dfbe-4042-815a-ffa363702ba1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "009b3ed3-890a-42f6-99fc-be3545c88f40"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a029068f-61b1-4475-b32c-2823fd939902",
          "title": "UPS-RS change workitem state",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS change workitem state\"",
              "fullTitle": "UPS-RS change workitem state \"before all\" hook in \"UPS-RS change workitem state\"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet createWorkitemResponse = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    payload: testWorkitem,\n});\ncreatedWorkitemLocation = createWorkitemResponse.headers[\"content-location\"];",
              "err": {},
              "uuid": "6cc09735-77ae-4f4e-822f-cbd02168c127",
              "parentUUID": "a029068f-61b1-4475-b32c-2823fd939902",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should raise 409 (Conflict) when changing SCHEDULED to COMPLETED",
              "fullTitle": "UPS-RS change workitem state Should raise 409 (Conflict) when changing SCHEDULED to COMPLETED",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n            method: \"PUT\",\n            url: `/dicom-web/workitems/${workitemUID}/state`,\n            headers: {\n                \"Content-Type\": \"application/dicom+json\"\n            },\n            payload: JSON.stringify([changeUpsStateToCompletedRequestPayload])\n        });\n        expect(response.statusCode).to.equal(409);",
              "err": {},
              "uuid": "78c5fff5-fd23-48ba-8744-d510e6d89d9a",
              "parentUUID": "a029068f-61b1-4475-b32c-2823fd939902",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "1740fdd8-01ee-4a7d-8830-6647386f3d93",
              "title": "change workitem state to IN PROGRESS",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should change workitem to IN PROGRESS successfully",
                  "fullTitle": "UPS-RS change workitem state change workitem state to IN PROGRESS Should change workitem to IN PROGRESS successfully",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n                method: \"PUT\",\n                url: `/dicom-web/workitems/${workitemUID}/state`,\n                headers: {\n                    \"Content-Type\": \"application/dicom+json\"\n                },\n                payload: JSON.stringify([changeUpsStateRequestPayload])\n            });\n            expect(response.statusCode).to.equal(200);\n            let fetchWorkitemResponse = await inject(app, {\n                method: \"GET\",\n                url: createdWorkitemLocation\n            });\n            let data = await fetchWorkitemResponse.json();\n            expect(data).to.be.an(\"array\");\n            expect(data[0]).to.be.an(\"object\");\n            expect(data[0]).have.property(\"00741000\").have.property(\"Value\").have.property(\"0\").to.be.equal(\"IN PROGRESS\");",
                  "err": {},
                  "uuid": "219df930-a3fd-4388-b642-30df9b478caf",
                  "parentUUID": "1740fdd8-01ee-4a7d-8830-6647386f3d93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise Bad Request (400) when missing Transaction UID",
                  "fullTitle": "UPS-RS change workitem state change workitem state to IN PROGRESS Should raise Bad Request (400) when missing Transaction UID",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let clonedPayload = structuredClone(changeUpsStateRequestPayload);\ndelete clonedPayload[\"00081195\"];\nlet response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([clonedPayload])\n});\nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "e31e4c25-02bf-4013-bb0d-155a3f6e8de9",
                  "parentUUID": "1740fdd8-01ee-4a7d-8830-6647386f3d93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 409 (Conflict) when workitem is already IN PROGRESS",
                  "fullTitle": "UPS-RS change workitem state change workitem state to IN PROGRESS Should raise 409 (Conflict) when workitem is already IN PROGRESS",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateRequestPayload])\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "66ff58f6-0737-405c-a3c7-43d703aeb32f",
                  "parentUUID": "1740fdd8-01ee-4a7d-8830-6647386f3d93",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "b449d0a5-5726-4c60-a35e-c9dbf3474095",
                  "title": "update workitem that state is IN PROGRESS",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
                  "file": "\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should raise Bad Request (400) when missing Transaction UID in request payload",
                      "fullTitle": "UPS-RS change workitem state change workitem state to IN PROGRESS update workitem that state is IN PROGRESS Should raise Bad Request (400) when missing Transaction UID in request payload",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify(testWorkitem)\n});\nexpect(response.statusCode).to.equal(400);",
                      "err": {},
                      "uuid": "2ed3e5c2-5744-4451-9377-c2fab1df3585",
                      "parentUUID": "b449d0a5-5726-4c60-a35e-c9dbf3474095",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should raise Bad Request (400) when Transaction UID not consistent",
                      "fullTitle": "UPS-RS change workitem state change workitem state to IN PROGRESS update workitem that state is IN PROGRESS Should raise Bad Request (400) when Transaction UID not consistent",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let aTestWorkitem = structuredClone(testWorkitem[0]);\naTestWorkitem[\"00081195\"][\"Value\"] = [\"1.2.3.4\"];\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([aTestWorkitem])\n});\nexpect(response.statusCode).to.equal(400);",
                      "err": {},
                      "uuid": "3578c321-4002-4415-8b4c-01ed08768699",
                      "parentUUID": "b449d0a5-5726-4c60-a35e-c9dbf3474095",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2ed3e5c2-5744-4451-9377-c2fab1df3585",
                    "3578c321-4002-4415-8b4c-01ed08768699"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [
                "219df930-a3fd-4388-b642-30df9b478caf",
                "e31e4c25-02bf-4013-bb0d-155a3f6e8de9",
                "66ff58f6-0737-405c-a3c7-43d703aeb32f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "262424ee-9978-492b-a626-c46343b51dfe",
              "title": "change workitem state to COMPLETED",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should raise Bad Request (400) when changing state to COMPLETED that workitem not meet to final state",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should raise Bad Request (400) when changing state to COMPLETED that workitem not meet to final state",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCompletedRequestPayload])\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "eecfc4d5-de78-4431-a44f-234475c66cd2",
                  "parentUUID": "262424ee-9978-492b-a626-c46343b51dfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise Bad Request (400) when Transaction UID not consistent",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should raise Bad Request (400) when Transaction UID not consistent",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let requestPayload = structuredClone(changeUpsStateRequestPayload);\nrequestPayload[\"00081195\"][\"Value\"][0] = \"1.2.3.4\";\nrequestPayload[\"00741000\"][\"Value\"][0] = \"COMPLETED\";\nlet response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([requestPayload])\n});\nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "a9e9fbac-d564-40f0-a3f5-65c53050564b",
                  "parentUUID": "262424ee-9978-492b-a626-c46343b51dfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should update workitem with 'Unified Procedure Step Performed Procedure Sequence'",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should update workitem with 'Unified Procedure Step Performed Procedure Sequence'",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let upsPerformedProcedureSequence = {\n    \"00741216\": {\n        \"vr\": \"SQ\",\n        \"Value\": [\n            {\n                \"00404050\": {\n                    \"vr\": \"DT\",\n                    \"Value\": [\n                        \"20230523051211.171171+0800\"\n                    ]\n                },\n                \"00404051\": {\n                    \"vr\": \"DT\",\n                    \"Value\": [\n                        \"20230523053011.171171+0800\"\n                    ]\n                },\n                \"00404028\": {\n                    \"vr\": \"SQ\",\n                    \"Value\": [\n                        {\n                            \"00080100\": {\n                                \"vr\": \"SH\",\n                                \"Value\": [\n                                    \"AnyStation\"\n                                ]\n                            },\n                            \"00080102\": {\n                                \"vr\": \"SH\",\n                                \"Value\": [\n                                    \"RadReadingGroup\"\n                                ]\n                            },\n                            \"00080104\": {\n                                \"vr\": \"LO\",\n                                \"Value\": [\n                                    \"performerAE\"\n                                ]\n                            }\n                        }\n                    ]\n                },\n                \"00404019\": {\n                    \"vr\": \"SQ\",\n                    \"Value\": [\n                        {\n                            \"00080100\": {\n                                \"vr\": \"SH\",\n                                \"Value\": [\n                                    \"AnyMethod\"\n                                ]\n                            },\n                            \"00080102\": {\n                                \"vr\": \"SH\",\n                                \"Value\": [\n                                    \"99RACCOON\"\n                                ]\n                            },\n                            \"00080104\": {\n                                \"vr\": \"LO\",\n                                \"Value\": [\n                                    \"Local Any Method\"\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n};\nlet clonedPayload = structuredClone(testWorkitem[0]);\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([\n        {\n            ...clonedPayload,\n            ...{ \"00081195\": changeUpsStateRequestPayload[\"00081195\"] },\n            ...upsPerformedProcedureSequence\n        }\n    ])\n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "f07a8510-8dfe-44da-aa98-ea2622419570",
                  "parentUUID": "262424ee-9978-492b-a626-c46343b51dfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should change workitem state to COMPLETED successfully",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should change workitem state to COMPLETED successfully",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCompletedRequestPayload])\n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "8c73adba-a0e4-4c29-ac6a-40a4911d8b0e",
                  "parentUUID": "262424ee-9978-492b-a626-c46343b51dfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise Bad Request (400) when updating workitem in COMPLETED state",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should raise Bad Request (400) when updating workitem in COMPLETED state",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let clonedPayload = structuredClone(testWorkitem[0]);\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([{\n        ...clonedPayload,\n        ...{ \"00081195\": changeUpsStateRequestPayload[\"00081195\"] },\n    }])\n});\nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "76fe055b-5806-41d2-8f03-50bcb477cd62",
                  "parentUUID": "262424ee-9978-492b-a626-c46343b51dfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 409 (Conflict) when changing state COMPLETED to CANCELED",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should raise 409 (Conflict) when changing state COMPLETED to CANCELED",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCanceledRequestPayload])\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "85ddf673-3fcd-4677-815c-fa82d3390aab",
                  "parentUUID": "262424ee-9978-492b-a626-c46343b51dfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 409 (Conflict) when changing state COMPLETED to IN PROGRESS",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should raise 409 (Conflict) when changing state COMPLETED to IN PROGRESS",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateRequestPayload])\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "a559289a-7052-4ab5-b8af-11312d20d5d5",
                  "parentUUID": "262424ee-9978-492b-a626-c46343b51dfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should have 'warning' in headers when state already be COMPLETED",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should have 'warning' in headers when state already be COMPLETED",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCompletedRequestPayload])\n});\nconsole.log(response.headers);\nexpect(response.headers).have.property(\"warning\");",
                  "err": {},
                  "uuid": "2cc690ad-19ea-496e-8080-cb5608075d15",
                  "parentUUID": "262424ee-9978-492b-a626-c46343b51dfe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eecfc4d5-de78-4431-a44f-234475c66cd2",
                "a9e9fbac-d564-40f0-a3f5-65c53050564b",
                "f07a8510-8dfe-44da-aa98-ea2622419570",
                "8c73adba-a0e4-4c29-ac6a-40a4911d8b0e",
                "76fe055b-5806-41d2-8f03-50bcb477cd62",
                "85ddf673-3fcd-4677-815c-fa82d3390aab",
                "a559289a-7052-4ab5-b8af-11312d20d5d5",
                "2cc690ad-19ea-496e-8080-cb5608075d15"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 47,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "5e737841-2e88-4df3-a54a-8d3c11e565c5",
              "title": "change workitem state to CANCELED",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"change workitem state to CANCELED\"",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED \"before all\" hook in \"change workitem state to CANCELED\"",
                  "timedOut": false,
                  "duration": 14,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await dbInstance.destroyAll();\nawait inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    payload: testWorkitem,\n});",
                  "err": {},
                  "uuid": "6a0a8be6-7dd9-470c-a3a3-825bf8958fe6",
                  "parentUUID": "5e737841-2e88-4df3-a54a-8d3c11e565c5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should raise 409 (Conflict) when changing state SCHEDULED to CANCELED",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED Should raise 409 (Conflict) when changing state SCHEDULED to CANCELED",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCanceledRequestPayload])\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "741beccd-6a9e-406f-9a07-8abb4f4b24fd",
                  "parentUUID": "5e737841-2e88-4df3-a54a-8d3c11e565c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should change state to IN PROGRESS",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED Should change state to IN PROGRESS",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let changeStateToInProgressResponse = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateRequestPayload])\n});\nexpect(changeStateToInProgressResponse.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "fd61c4d4-7714-472a-a60e-f1b28181b682",
                  "parentUUID": "5e737841-2e88-4df3-a54a-8d3c11e565c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise Bad Request (400) when Transaction UID not consistent",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED Should raise Bad Request (400) when Transaction UID not consistent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let requestPayload = structuredClone(changeUpsStateRequestPayload);\nrequestPayload[\"00081195\"][\"Value\"][0] = \"1.2.3.4\";\nrequestPayload[\"00741000\"][\"Value\"][0] = \"CANCELED\";\nlet response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([requestPayload])\n});\nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "74b8077b-691d-44d8-9445-37d08069defd",
                  "parentUUID": "5e737841-2e88-4df3-a54a-8d3c11e565c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should change workitem state to CANCELED successfully",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED Should change workitem state to CANCELED successfully",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCanceledRequestPayload])\n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "c998365f-366c-4cf6-887b-8af060584e93",
                  "parentUUID": "5e737841-2e88-4df3-a54a-8d3c11e565c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should have 'warning' in headers when state already be CANCELED",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED Should have 'warning' in headers when state already be CANCELED",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCanceledRequestPayload])\n});\nconsole.log(response.headers);\nexpect(response.headers).have.property(\"warning\");",
                  "err": {},
                  "uuid": "600cff8f-8662-48b7-b796-8f5a7a971e25",
                  "parentUUID": "5e737841-2e88-4df3-a54a-8d3c11e565c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 409 (Conflict) when changing state CANCELED to IN PROGRESS",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED Should raise 409 (Conflict) when changing state CANCELED to IN PROGRESS",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateRequestPayload])\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "2bd6c875-61ff-446b-bd98-3918b259e0e7",
                  "parentUUID": "5e737841-2e88-4df3-a54a-8d3c11e565c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 409 (Conflict) when changing state CANCELED to COMPLETED",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED Should raise 409 (Conflict) when changing state CANCELED to COMPLETED",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCompletedRequestPayload])\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "e6f6f8ec-d9d1-401f-8f2f-9871a8f1f3c2",
                  "parentUUID": "5e737841-2e88-4df3-a54a-8d3c11e565c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "741beccd-6a9e-406f-9a07-8abb4f4b24fd",
                "fd61c4d4-7714-472a-a60e-f1b28181b682",
                "74b8077b-691d-44d8-9445-37d08069defd",
                "c998365f-366c-4cf6-887b-8af060584e93",
                "600cff8f-8662-48b7-b796-8f5a7a971e25",
                "2bd6c875-61ff-446b-bd98-3918b259e0e7",
                "e6f6f8ec-d9d1-401f-8f2f-9871a8f1f3c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 53,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "78c5fff5-fd23-48ba-8744-d510e6d89d9a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "64149404-7a76-49ff-ac98-39b164dcc254",
          "title": "UPS-RS create workitem",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\createWorkitem.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\createWorkitem.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS create workitem\"",
              "fullTitle": "UPS-RS create workitem \"before all\" hook in \"UPS-RS create workitem\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "7403449a-2eb6-4f94-99fc-7ca22312a53a",
              "parentUUID": "64149404-7a76-49ff-ac98-39b164dcc254",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"UPS-RS create workitem\"",
              "fullTitle": "UPS-RS create workitem \"after all\" hook in \"UPS-RS create workitem\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "33190112-505e-4d6d-ab3c-6ce5b5959287",
              "parentUUID": "64149404-7a76-49ff-ac98-39b164dcc254",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should create workitem and have required attributes",
              "fullTitle": "UPS-RS create workitem Should create workitem and have required attributes",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\",\n    },\n    body: JSON.stringify(testWorkitem)\n});\nexpect(response.statusCode).to.equal(201);\nexpect(response.headers).have.property(\"content-location\").to.be.a(\"string\");\nlet fetchWorkitemResponse = await inject(app, {\n    method: \"GET\",\n    url: response.headers[\"content-location\"],\n});\nexpect(fetchWorkitemResponse.statusCode).to.equal(200);\nlet data = await fetchWorkitemResponse.json();\nlet workitem = data[0];\n// The origin server shall create a new Workitem in the SCHEDULED state\nexpect(workitem).have.property(\"00741000\").have.property(\"Value\").have.property(\"0\").to.be.equal(\"SCHEDULED\");\n// #region Patient level\nexpect(workitem).to.be.a(\"object\");\nexpect(workitem).have.property(\"00100010\").to.be.deep.equal(testWorkitem[0][\"00100010\"]);\nexpect(workitem).have.property(\"00100020\").to.be.deep.equal(testWorkitem[0][\"00100020\"]);\nexpect(workitem).have.property(\"00100021\").to.be.deep.equal(testWorkitem[0][\"00100021\"]);\nexpect(workitem).have.property(\"00100030\").to.be.deep.equal(testWorkitem[0][\"00100030\"]);\nexpect(workitem).have.property(\"00100040\").to.be.deep.equal(testWorkitem[0][\"00100040\"]);\nexpect(workitem).have.property(\"00104000\").to.be.deep.equal(testWorkitem[0][\"00104000\"]);\n// #endregion\n// #region UPS level\nexpect(workitem).have.property(\"00080018\");\nexpect(workitem).have.property(\"00380010\").to.be.deep.equal(testWorkitem[0][\"00380010\"]);\nexpect(workitem).have.property(\"00380014\").to.be.deep.equal(testWorkitem[0][\"00380014\"]);\nexpect(workitem).have.property(\"00404005\").to.be.deep.equal(testWorkitem[0][\"00404005\"]);\nexpect(workitem).have.property(\"00404018\").to.be.deep.equal(testWorkitem[0][\"00404018\"]);\nexpect(workitem).have.property(\"00404025\").to.be.deep.equal(testWorkitem[0][\"00404025\"]);\nexpect(workitem).have.property(\"00404026\").to.be.deep.equal(testWorkitem[0][\"00404026\"]);\nexpect(workitem).have.property(\"00404027\").to.be.deep.equal(testWorkitem[0][\"00404027\"]);\nexpect(workitem).have.property(\"00404041\").to.be.deep.equal(testWorkitem[0][\"00404041\"]);\nexpect(workitem).have.property(\"0040A370\").to.be.deep.equal(testWorkitem[0][\"0040A370\"]);\nexpect(workitem).have.property(\"00741200\").to.be.deep.equal(testWorkitem[0][\"00741200\"]);\nexpect(workitem).have.property(\"00741202\").to.be.deep.equal(testWorkitem[0][\"00741202\"]);\nexpect(workitem).have.property(\"00741204\").to.be.deep.equal(testWorkitem[0][\"00741204\"]);\nexpect(workitem).have.property(\"0040E020\").to.be.deep.equal(testWorkitem[0][\"0040E020\"]);\nexpect(workitem).have.property(\"00404034\").to.be.deep.equal(testWorkitem[0][\"00404034\"]);\n// #endregion",
              "err": {},
              "uuid": "fa50e59a-e5c5-4b34-873d-43955c282631",
              "parentUUID": "64149404-7a76-49ff-ac98-39b164dcc254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should create workitem with specified instance UID",
              "fullTitle": "UPS-RS create workitem Should create workitem with specified instance UID",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\",\n    },\n    body: JSON.stringify(testWorkitem)\n});\nexpect(response.statusCode).to.equal(201);\nlet fetchWorkitemResponse = await inject(app, {\n    method: \"GET\",\n    url: response.headers[\"content-location\"],\n});\nexpect(fetchWorkitemResponse.statusCode).to.equal(200);\nlet data = await fetchWorkitemResponse.json();\nlet workitem = data[0];\nexpect(workitem).to.be.a(\"object\");\nexpect(workitem).have.property(\"00080018\").have.property(\"Value\").have.property(\"0\").to.be.equal(workitemUID);",
              "err": {},
              "uuid": "a0324a53-11f3-490c-b351-dc458eac5ebc",
              "parentUUID": "64149404-7a76-49ff-ac98-39b164dcc254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should supply a work list when payload missing one",
              "fullTitle": "UPS-RS create workitem Should supply a work list when payload missing one",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedTestWorkitem = structuredClone(testWorkitem[0]);\ndelete clonedTestWorkitem[\"00741202\"];\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/workitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\",\n    },\n    body: JSON.stringify([clonedTestWorkitem])\n});\nexpect(response.statusCode).to.equal(201);\nlet dataLocation = response.headers[\"content-location\"];\nlet fetchWorkitemResponse = await inject(app, {\n    method: \"GET\",\n    url: dataLocation,\n});\nexpect(fetchWorkitemResponse.statusCode).to.equal(200);\nlet data = await fetchWorkitemResponse.json();\nexpect(data).to.be.an(\"array\");\nexpect(data[0]).to.be.an(\"object\");\nexpect(data[0]).have.property(\"00741202\").have.property(\"Value\").have.property(\"0\");",
              "err": {},
              "uuid": "7579a9c8-1612-44af-80aa-b8002731d659",
              "parentUUID": "64149404-7a76-49ff-ac98-39b164dcc254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when state is not SCHEDULED",
              "fullTitle": "UPS-RS create workitem Should raise 400 (Bad Request) when state is not SCHEDULED",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedTestWorkitem = structuredClone(testWorkitem[0]);\nclonedTestWorkitem[\"00741000\"][\"Value\"][0] = \"IN PROGRESS\";\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\",\n    },\n    body: JSON.stringify([clonedTestWorkitem])\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "261bdc07-36c7-462b-9161-e11adf4a43c1",
              "parentUUID": "64149404-7a76-49ff-ac98-39b164dcc254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when create workitem that already exists",
              "fullTitle": "UPS-RS create workitem Should raise 400 (Bad Request) when create workitem that already exists",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\",\n    },\n    body: JSON.stringify(testWorkitem)\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "58d2b0ef-1852-45d3-8a98-db48457f86be",
              "parentUUID": "64149404-7a76-49ff-ac98-39b164dcc254",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa50e59a-e5c5-4b34-873d-43955c282631",
            "a0324a53-11f3-490c-b351-dc458eac5ebc",
            "7579a9c8-1612-44af-80aa-b8002731d659",
            "261bdc07-36c7-462b-9161-e11adf4a43c1",
            "58d2b0ef-1852-45d3-8a98-db48457f86be"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 40,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b32cf0ae-0f80-41d3-a86f-cc6349cf6159",
          "title": "UPS-RS retrieve workitem",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\retrieveWorkitem.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\retrieveWorkitem.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS retrieve workitem\"",
              "fullTitle": "UPS-RS retrieve workitem \"before all\" hook in \"UPS-RS retrieve workitem\"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet createWorkitemResponse = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/workitems\",\n    payload: testWorkitem,\n});\ncreatedWorkitemLocation = createWorkitemResponse.headers[\"content-location\"];",
              "err": {},
              "uuid": "f9884463-5d9b-439d-ad2c-45efd08566e6",
              "parentUUID": "b32cf0ae-0f80-41d3-a86f-cc6349cf6159",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve workitem successfully",
              "fullTitle": "UPS-RS retrieve workitem Should retrieve workitem successfully",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n            method: \"GET\",\n            url: createdWorkitemLocation\n        });\n        expect(response.statusCode).to.equal(200);\n        let data = await response.json();\n        expect(data).to.be.an(\"array\");\n        expect(data[0]).to.be.an(\"object\");\n        expect(data[0]).have.property(\"00741000\").have.property(\"Value\").have.property(\"0\").to.be.equal(\"SCHEDULED\");",
              "err": {},
              "uuid": "140f58c8-b85d-4a59-a5a9-31ce16be3761",
              "parentUUID": "b32cf0ae-0f80-41d3-a86f-cc6349cf6159",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when workitem not found",
              "fullTitle": "UPS-RS retrieve workitem Should raise 404 (Not Found) when workitem not found",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n            method: \"GET\",\n            url: \"/dicom-web/workitems/foobar\",\n        });\n        expect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "2e5d0b44-f0fa-4396-a127-0432ebe2c96c",
              "parentUUID": "b32cf0ae-0f80-41d3-a86f-cc6349cf6159",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "140f58c8-b85d-4a59-a5a9-31ce16be3761",
            "2e5d0b44-f0fa-4396-a127-0432ebe2c96c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "c61f8672-93a9-49eb-9b82-0a7ef9a6eeba",
          "title": "UPS-RS search workitems",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS search workitems\"",
              "fullTitle": "UPS-RS search workitems \"before all\" hook in \"UPS-RS search workitems\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    payload: testWorkitem,\n});",
              "err": {},
              "uuid": "7725df7c-bfe1-4c03-b85c-cdb23355bd47",
              "parentUUID": "c61f8672-93a9-49eb-9b82-0a7ef9a6eeba",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should query workitem successfully",
              "fullTitle": "UPS-RS search workitems Should query workitem successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems`,\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(1);",
              "err": {},
              "uuid": "86429381-8e5f-42a2-bad7-42816d597414",
              "parentUUID": "c61f8672-93a9-49eb-9b82-0a7ef9a6eeba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "2a3b64e3-c916-4804-b0ad-7b0c0a5ed0f4",
              "title": "query with param 'SOPInstanceUID'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'SOPInstanceUID=1.2.826.0.1.3680043.8.498.10446888627027530123168162507860718519' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'SOPInstanceUID' Should query workitem with param 'SOPInstanceUID=1.2.826.0.1.3680043.8.498.10446888627027530123168162507860718519' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "c88b3ab4-8463-4e28-b72d-f222236f6ee6",
                  "parentUUID": "2a3b64e3-c916-4804-b0ad-7b0c0a5ed0f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'SOPInstanceUID=1.2.3.4' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'SOPInstanceUID' Should query workitem with param 'SOPInstanceUID=1.2.3.4' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "8189e91a-5caa-4267-8e7d-f176828d6299",
                  "parentUUID": "2a3b64e3-c916-4804-b0ad-7b0c0a5ed0f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c88b3ab4-8463-4e28-b72d-f222236f6ee6",
                "8189e91a-5caa-4267-8e7d-f176828d6299"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "da844538-22d4-4854-bc94-b10ad80144d5",
              "title": "query with param 'ScheduledProcedureStepPriority'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepPriority=MEDIUM' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepPriority' Should query workitem with param 'ScheduledProcedureStepPriority=MEDIUM' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "8d165374-e0be-405f-8556-f52f99aa2fa8",
                  "parentUUID": "da844538-22d4-4854-bc94-b10ad80144d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepPriority=LOW' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepPriority' Should query workitem with param 'ScheduledProcedureStepPriority=LOW' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "be27e8da-b300-4af3-9d28-054fb861eaae",
                  "parentUUID": "da844538-22d4-4854-bc94-b10ad80144d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d165374-e0be-405f-8556-f52f99aa2fa8",
                "be27e8da-b300-4af3-9d28-054fb861eaae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "1a82b0a3-2bc1-462e-ab2f-7235468017a3",
              "title": "query with param 'ScheduledProcedureStepModificationDateTime'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepModificationDateTime=20211202115531-' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepModificationDateTime' Should query workitem with param 'ScheduledProcedureStepModificationDateTime=20211202115531-' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "7ea0f16c-9997-42fb-8b63-60f99627b033",
                  "parentUUID": "1a82b0a3-2bc1-462e-ab2f-7235468017a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepModificationDateTime=20211202115532' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepModificationDateTime' Should query workitem with param 'ScheduledProcedureStepModificationDateTime=20211202115532' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "b5b255eb-4390-4e87-bdb0-dfb2de68954c",
                  "parentUUID": "1a82b0a3-2bc1-462e-ab2f-7235468017a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ea0f16c-9997-42fb-8b63-60f99627b033",
                "b5b255eb-4390-4e87-bdb0-dfb2de68954c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "60bb75eb-c69a-4eb0-b369-9eb031051904",
              "title": "query with param 'ProcedureStepLabel'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ProcedureStepLabel=Scheduled procedure step description' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ProcedureStepLabel' Should query workitem with param 'ProcedureStepLabel=Scheduled procedure step description' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "b486bd4d-c91c-4b5e-8cbc-441f408af17a",
                  "parentUUID": "60bb75eb-c69a-4eb0-b369-9eb031051904",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ProcedureStepLabel=label' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ProcedureStepLabel' Should query workitem with param 'ProcedureStepLabel=label' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "00cea057-7818-4409-860c-a453ea86e109",
                  "parentUUID": "60bb75eb-c69a-4eb0-b369-9eb031051904",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b486bd4d-c91c-4b5e-8cbc-441f408af17a",
                "00cea057-7818-4409-860c-a453ea86e109"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "58980467-a5f3-4296-b59a-a8a8ba6a6e8e",
              "title": "query with param 'WorklistLabel'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'WorklistLabel=WORKLIST' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'WorklistLabel' Should query workitem with param 'WorklistLabel=WORKLIST' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "38b78dd2-dff8-4534-a153-e77b6566b25d",
                  "parentUUID": "58980467-a5f3-4296-b59a-a8a8ba6a6e8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'WorklistLabel=label' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'WorklistLabel' Should query workitem with param 'WorklistLabel=label' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "d418000c-322f-4d5e-85f9-71f902f677a0",
                  "parentUUID": "58980467-a5f3-4296-b59a-a8a8ba6a6e8e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38b78dd2-dff8-4534-a153-e77b6566b25d",
                "d418000c-322f-4d5e-85f9-71f902f677a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "56834fc0-c58d-4424-890b-a52c9f35a47d",
              "title": "query with param 'ScheduledProcedureStepStartDateTime'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepStartDateTime=20211202115531-' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepStartDateTime' Should query workitem with param 'ScheduledProcedureStepStartDateTime=20211202115531-' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "704135e2-40cd-453a-a4f4-8f1a0d4a34ae",
                  "parentUUID": "56834fc0-c58d-4424-890b-a52c9f35a47d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepStartDateTime=20211202115532' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepStartDateTime' Should query workitem with param 'ScheduledProcedureStepStartDateTime=20211202115532' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "3b9d9cb5-0db0-4079-806d-e3f1a9861dda",
                  "parentUUID": "56834fc0-c58d-4424-890b-a52c9f35a47d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "704135e2-40cd-453a-a4f4-8f1a0d4a34ae",
                "3b9d9cb5-0db0-4079-806d-e3f1a9861dda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "85a395af-ce55-469f-ac28-c0666120acf2",
              "title": "query with param 'ExpectedCompletionDateTime'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ExpectedCompletionDateTime=20211202115532-' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ExpectedCompletionDateTime' Should query workitem with param 'ExpectedCompletionDateTime=20211202115532-' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "6407ec68-26d7-4815-bf81-74071b421f00",
                  "parentUUID": "85a395af-ce55-469f-ac28-c0666120acf2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ExpectedCompletionDateTime=20211202115533' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ExpectedCompletionDateTime' Should query workitem with param 'ExpectedCompletionDateTime=20211202115533' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "4ef05e9a-b631-4ae2-919e-9bae4abe37d8",
                  "parentUUID": "85a395af-ce55-469f-ac28-c0666120acf2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6407ec68-26d7-4815-bf81-74071b421f00",
                "4ef05e9a-b631-4ae2-919e-9bae4abe37d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "c4e696db-5156-4cac-bf47-d8593d788692",
              "title": "query with param 'ScheduledProcedureStepExpirationDateTime'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepExpirationDateTime=20221202115532-' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepExpirationDateTime' Should query workitem with param 'ScheduledProcedureStepExpirationDateTime=20221202115532-' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "547f94da-4196-4e7c-9b64-b7b9d1268c95",
                  "parentUUID": "c4e696db-5156-4cac-bf47-d8593d788692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepExpirationDateTime=20221202115532' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepExpirationDateTime' Should query workitem with param 'ScheduledProcedureStepExpirationDateTime=20221202115532' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "9830e68b-4516-4d23-9bc8-9645ab5b7791",
                  "parentUUID": "c4e696db-5156-4cac-bf47-d8593d788692",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "547f94da-4196-4e7c-9b64-b7b9d1268c95",
                "9830e68b-4516-4d23-9bc8-9645ab5b7791"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "5db36fdd-9b7a-4e2f-806b-019aa741a90f",
              "title": "query with param 'InputReadinessState'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'InputReadinessState=READY' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'InputReadinessState' Should query workitem with param 'InputReadinessState=READY' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "86039a8c-57b0-4c04-8d0d-c4b041b71ddd",
                  "parentUUID": "5db36fdd-9b7a-4e2f-806b-019aa741a90f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'InputReadinessState=UNAVAILABLE' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'InputReadinessState' Should query workitem with param 'InputReadinessState=UNAVAILABLE' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "a7762e3b-a2c6-4699-b92a-2d43821b00e2",
                  "parentUUID": "5db36fdd-9b7a-4e2f-806b-019aa741a90f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86039a8c-57b0-4c04-8d0d-c4b041b71ddd",
                "a7762e3b-a2c6-4699-b92a-2d43821b00e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "446580d9-1e3b-4dd5-a200-f3a2033d94f7",
              "title": "query with param 'AdmissionID'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'AdmissionID=11111' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'AdmissionID' Should query workitem with param 'AdmissionID=11111' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "9e1337e8-2971-4fbf-9b0b-b6f596f8a139",
                  "parentUUID": "446580d9-1e3b-4dd5-a200-f3a2033d94f7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'AdmissionID=123456' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'AdmissionID' Should query workitem with param 'AdmissionID=123456' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "c4d2232d-f3c7-4787-ac78-aeac6d544ae3",
                  "parentUUID": "446580d9-1e3b-4dd5-a200-f3a2033d94f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e1337e8-2971-4fbf-9b0b-b6f596f8a139",
                "c4d2232d-f3c7-4787-ac78-aeac6d544ae3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "0297c225-e028-4cff-a2fa-7ab8d7bba39f",
              "title": "query with param 'IssuerOfAdmissionIDSequence'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=123456789' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'IssuerOfAdmissionIDSequence' Should query workitem with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=123456789' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "2af011a1-eefa-4aac-8f30-6e5e80b17f5f",
                  "parentUUID": "0297c225-e028-4cff-a2fa-7ab8d7bba39f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=aaa' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'IssuerOfAdmissionIDSequence' Should query workitem with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=aaa' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "36393e38-c9c4-41ed-8d43-ea99bae34e0e",
                  "parentUUID": "0297c225-e028-4cff-a2fa-7ab8d7bba39f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=29c737e3-b739-4169-aca7-eea07a808643' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'IssuerOfAdmissionIDSequence' Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=29c737e3-b739-4169-aca7-eea07a808643' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "a4636658-4329-40e7-840a-2f38070ab816",
                  "parentUUID": "0297c225-e028-4cff-a2fa-7ab8d7bba39f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=bbb' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'IssuerOfAdmissionIDSequence' Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=bbb' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "788f5742-5af3-4e73-8392-495a3887efb7",
                  "parentUUID": "0297c225-e028-4cff-a2fa-7ab8d7bba39f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=UUID' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'IssuerOfAdmissionIDSequence' Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=UUID' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "b7b87324-1ec4-4a39-8417-d86743738354",
                  "parentUUID": "0297c225-e028-4cff-a2fa-7ab8d7bba39f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=ISO' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'IssuerOfAdmissionIDSequence' Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=ISO' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "f96321f6-27d9-461c-9121-787d8fc86ad4",
                  "parentUUID": "0297c225-e028-4cff-a2fa-7ab8d7bba39f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2af011a1-eefa-4aac-8f30-6e5e80b17f5f",
                "36393e38-c9c4-41ed-8d43-ea99bae34e0e",
                "a4636658-4329-40e7-840a-2f38070ab816",
                "788f5742-5af3-4e73-8392-495a3887efb7",
                "b7b87324-1ec4-4a39-8417-d86743738354",
                "f96321f6-27d9-461c-9121-787d8fc86ad4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "8612c0b4-8687-47f2-92ff-acb1449142e9",
              "title": "query with param 'ScheduledHumanPerformersSequence'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerName=fkyou' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledHumanPerformersSequence' Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerName=fkyou' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "f550b642-8611-418a-87d1-310d11d8d54f",
                  "parentUUID": "8612c0b4-8687-47f2-92ff-acb1449142e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerName=aaa' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledHumanPerformersSequence' Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerName=aaa' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "61b2f737-c1f6-4435-9f91-5782384288e9",
                  "parentUUID": "8612c0b4-8687-47f2-92ff-acb1449142e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerOrganization=My-Org' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledHumanPerformersSequence' Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerOrganization=My-Org' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "f18baa9b-16e6-42b6-a7b7-c426cd5bf53c",
                  "parentUUID": "8612c0b4-8687-47f2-92ff-acb1449142e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerOrganization=bbb' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledHumanPerformersSequence' Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerOrganization=bbb' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "ce13a982-730b-4cbf-8896-79b55942a368",
                  "parentUUID": "8612c0b4-8687-47f2-92ff-acb1449142e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f550b642-8611-418a-87d1-310d11d8d54f",
                "61b2f737-c1f6-4435-9f91-5782384288e9",
                "f18baa9b-16e6-42b6-a7b7-c426cd5bf53c",
                "ce13a982-730b-4cbf-8896-79b55942a368"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "2623e218-6b04-4b95-bc3d-23e280531367",
              "title": "query with param 'ProcedureStepState'",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ProcedureStepState=SCHEDULED' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ProcedureStepState' Should query workitem with param 'ProcedureStepState=SCHEDULED' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "c074ebe8-da7c-4fef-b2e8-a394f6a53295",
                  "parentUUID": "2623e218-6b04-4b95-bc3d-23e280531367",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ProcedureStepState=COMPLETED' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ProcedureStepState' Should query workitem with param 'ProcedureStepState=COMPLETED' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`,\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "debe83ef-dad0-4fb4-8053-6638896d5284",
                  "parentUUID": "2623e218-6b04-4b95-bc3d-23e280531367",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c074ebe8-da7c-4fef-b2e8-a394f6a53295",
                "debe83ef-dad0-4fb4-8053-6638896d5284"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "86429381-8e5f-42a2-bad7-42816d597414"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "bd3ee1c2-5b53-452e-b9cb-bf7436daf18f",
          "title": "UPS-RS subscribe workitem",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS subscribe workitem\"",
              "fullTitle": "UPS-RS subscribe workitem \"before all\" hook in \"UPS-RS subscribe workitem\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nrandomPort = await getPorts();\nserver.listen({ host: localIp, port: randomPort }, () => {\n    console.log(`Listening on ${localIp}:${randomPort}`);\n});\nawait createTestWorkitem();",
              "err": {},
              "uuid": "e00e4dfc-ab52-4662-9ae6-d6154f05a722",
              "parentUUID": "bd3ee1c2-5b53-452e-b9cb-bf7436daf18f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"UPS-RS subscribe workitem\"",
              "fullTitle": "UPS-RS subscribe workitem \"after all\" hook in \"UPS-RS subscribe workitem\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "globalWs.close();\nserver.close();\nawait dbInstance.destroyAll();",
              "err": {},
              "uuid": "b379043f-65da-4559-8036-8affa1fa7ffe",
              "parentUUID": "bd3ee1c2-5b53-452e-b9cb-bf7436daf18f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "22609bb1-1566-458e-9d66-5ead29739997",
              "title": "global subscription",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should subscribe global subscription and receive 1 initial event from ws",
                  "fullTitle": "UPS-RS subscribe workitem global subscription Should subscribe global subscription and receive 1 initial event from ws",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let received = false;\n\nlet ws = new WebSocket(`ws://${localIp}:${randomPort}/ws/subscribers/RACCOON`);\nws.on(\"message\", function (data) {\n    let receivedData = JSON.parse(data);\n    expect(receivedData).to.have.property(\"00001002\").have.property(\"Value\").is.an(\"array\");\n    ws.close();\n    done();\n    received = true;\n});\ninject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/RACCOON`,\n})\n    .then(({ statusCode }) => {\n        expect(statusCode).to.equal(201);\n    });\nsetTimeout(() => {\n    if (!received) done(new Error(\"timeout\"));\n}, 2500);",
                  "err": {},
                  "uuid": "6fc32298-6bed-43dd-ad0f-b8594b7c6c9e",
                  "parentUUID": "22609bb1-1566-458e-9d66-5ead29739997",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should receive 1 initial event from ws when creating new workitem",
                  "fullTitle": "UPS-RS subscribe workitem global subscription Should receive 1 initial event from ws when creating new workitem",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let received = false;\nlet ws = new WebSocket(`ws://${localIp}:${randomPort}/ws/subscribers/RACCOON`);\nws.on(\"message\", function (data) {\n    let receivedData = JSON.parse(data);\n    expect(receivedData).to.have.property(\"00001002\").have.property(\"Value\").is.an(\"array\");\n    ws.close();\n    done();\n    received = true;\n});\ninject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\",\n    },\n    body: JSON.stringify(testWorkitem)\n});\nsetTimeout(() => {\n    if (!received) done(new Error(\"timeout\"));\n}, 2500);",
                  "err": {},
                  "uuid": "a3e11cc5-d1b2-483b-bd3f-cfe6bc12b7ff",
                  "parentUUID": "22609bb1-1566-458e-9d66-5ead29739997",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should update global subscription",
                  "fullTitle": "UPS-RS subscribe workitem global subscription Should update global subscription",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/RACCOON?deletionlock=false`,\n});\nexpect(response.statusCode).to.equal(201);",
                  "err": {},
                  "uuid": "02b5609f-f8a3-4a86-b99e-eef955b59a50",
                  "parentUUID": "22609bb1-1566-458e-9d66-5ead29739997",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should update progress information sequence and receive progress info update event",
                  "fullTitle": "UPS-RS subscribe workitem global subscription Should update progress information sequence and receive progress info update event",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let received = false;\nlet ws = new WebSocket(`ws://${localIp}:${randomPort}/ws/subscribers/RACCOON`);\nws.on(\"message\", function (data) {\n    let receivedData = JSON.parse(data);\n    expect(receivedData).to.have.property(\"00741002\").have.property(\"Value\").is.an(\"array\");\n    ws.close();\n    done();\n    received = true;\n});\nlet clonedWorkitem = structuredClone(testWorkitem[0]);\nclonedWorkitem[\"00741002\"] = {\n    \"vr\": \"SQ\",\n    \"Value\": [\n        {\n            \"00741004\": {\n                \"vr\": \"DS\",\n                \"Value\": [\n                    \"20\"\n                ]\n            }\n        }\n    ]\n}\ninject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}`,\n    payload: [clonedWorkitem]\n}).then(({ statusCode }) => {\n    expect(statusCode).to.equal(200);\n}\n);\nsetTimeout(() => {\n    if (!received) done(new Error(\"timeout\"));\n}, 2500);",
                  "err": {},
                  "uuid": "286c46e5-48a5-4f72-bbe8-1d574e854bff",
                  "parentUUID": "22609bb1-1566-458e-9d66-5ead29739997",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should change state to IN PROGRESS and receive state change report event",
                  "fullTitle": "UPS-RS subscribe workitem global subscription Should change state to IN PROGRESS and receive state change report event",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let received = false;\nlet ws = new WebSocket(`ws://${localIp}:${randomPort}/ws/subscribers/RACCOON`);\nws.on(\"message\", function (data) {\n    let receivedData = JSON.parse(data);\n    expect(receivedData).to.have.property(\"00741000\").have.property(\"Value\").is.an(\"array\").have.property(\"0\").to.be.equal(\"IN PROGRESS\");\n    ws.close();\n    done();\n    received = true;\n});\ninject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateRequestPayload])\n}).then(({ statusCode }) => {\n    expect(statusCode).to.be.equal(200);\n});\nsetTimeout(() => {\n    if (!received) done(new Error(\"timeout\"));\n}, 2500);",
                  "err": {},
                  "uuid": "e137dee8-1e7c-4ec4-9c9b-4cef083138d1",
                  "parentUUID": "22609bb1-1566-458e-9d66-5ead29739997",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should suspend global subscription",
                  "fullTitle": "UPS-RS subscribe workitem global subscription Should suspend global subscription",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/RACCOON/suspend`,\n}).then(({ statusCode }) => {\n    expect(statusCode).to.be.equal(200);\n    done();\n});",
                  "err": {},
                  "uuid": "77ed7265-a1d0-4c53-91e4-d8456e17fbcf",
                  "parentUUID": "22609bb1-1566-458e-9d66-5ead29739997",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should unsubscribe global subscription",
                  "fullTitle": "UPS-RS subscribe workitem global subscription Should unsubscribe global subscription",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/RACCOON`,\n})\nlet response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/RACCOON`,\n});\nexpect(response.statusCode).to.be.equal(200);",
                  "err": {},
                  "uuid": "92477aaf-f618-4509-bc7b-57583d2c222f",
                  "parentUUID": "22609bb1-1566-458e-9d66-5ead29739997",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6fc32298-6bed-43dd-ad0f-b8594b7c6c9e",
                "a3e11cc5-d1b2-483b-bd3f-cfe6bc12b7ff",
                "02b5609f-f8a3-4a86-b99e-eef955b59a50",
                "286c46e5-48a5-4f72-bbe8-1d574e854bff",
                "e137dee8-1e7c-4ec4-9c9b-4cef083138d1",
                "77ed7265-a1d0-4c53-91e4-d8456e17fbcf",
                "92477aaf-f618-4509-bc7b-57583d2c222f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 70,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "68e2ec25-ba6c-439d-af88-4d7516ff90b1",
              "title": "filtered global subscription",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"filtered global subscription\"",
                  "fullTitle": "UPS-RS subscribe workitem filtered global subscription \"before all\" hook in \"filtered global subscription\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await dbInstance.destroyAll();\nawait createTestWorkitem();\nlet clonedTestWorkitem = structuredClone(testWorkitem[0]);\nclonedTestWorkitem[\"00380014\"][\"Value\"][0][\"00400031\"][\"Value\"][0] = \"987654321\";\nawait inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\",\n    },\n    body: JSON.stringify([clonedTestWorkitem])\n});",
                  "err": {},
                  "uuid": "659d44c8-84f7-40d4-83b2-657836ea54b3",
                  "parentUUID": "68e2ec25-ba6c-439d-af88-4d7516ff90b1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should subscribe filtered global subscription and receive 1 initial event from ws",
                  "fullTitle": "UPS-RS subscribe workitem filtered global subscription Should subscribe filtered global subscription and receive 1 initial event from ws",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let received = false;\nlet ws = new WebSocket(`ws://${localIp}:${randomPort}/ws/subscribers/RACCOON`);\nws.on(\"message\", function (data) {\n    let receivedData = JSON.parse(data);\n    expect(receivedData).to.have.property(\"00001002\").have.property(\"Value\").is.an(\"array\");\n    expect(receivedData).to.have.property(\"00001000\").have.property(\"Value\").is.an(\"array\").have.property(\"0\").to.be.equal(workitemUID);\n    ws.close();\n    done();\n    received = true;\n});\ninject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5.1/subscribers/RACCOON?00380014.00400031=123456789`,\n})\n    .then(({ statusCode }) => {\n        expect(statusCode).to.equal(201);\n    });\nsetTimeout(() => {\n    if (!received) done(new Error(\"timeout\"));\n}, 2500);",
                  "err": {},
                  "uuid": "17092916-f230-478e-817a-d07d7cb9b58f",
                  "parentUUID": "68e2ec25-ba6c-439d-af88-4d7516ff90b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17092916-f230-478e-817a-d07d7cb9b58f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "abd171b2-a8c9-441d-b7eb-11882c6627d7",
              "title": "workitem subscription",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"workitem subscription\"",
                  "fullTitle": "UPS-RS subscribe workitem workitem subscription \"before all\" hook in \"workitem subscription\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await dbInstance.destroyAll();\nawait createTestWorkitem();",
                  "err": {},
                  "uuid": "3918ef3b-1bce-4a44-b112-1fc733b08c02",
                  "parentUUID": "abd171b2-a8c9-441d-b7eb-11882c6627d7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should subscribe workitem subscription",
                  "fullTitle": "UPS-RS subscribe workitem workitem subscription Should subscribe workitem subscription",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}/subscribers/RACCOON`,\n});\nexpect(response.statusCode).to.be.equal(201);",
                  "err": {},
                  "uuid": "2c58a148-c0bb-4275-ba46-bead0f847b0c",
                  "parentUUID": "abd171b2-a8c9-441d-b7eb-11882c6627d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should change state to IN PROGRESS and receive state change report event",
                  "fullTitle": "UPS-RS subscribe workitem workitem subscription Should change state to IN PROGRESS and receive state change report event",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let received = false;\nlet ws = new WebSocket(`ws://${localIp}:${randomPort}/ws/subscribers/RACCOON`);\nws.on(\"message\", function (data) {\n    let receivedData = JSON.parse(data);\n    expect(receivedData).to.have.property(\"00741000\").have.property(\"Value\").is.an(\"array\").have.property(\"0\").to.be.equal(\"IN PROGRESS\");\n    ws.close();\n    done();\n    received = true;\n});\ninject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateRequestPayload])\n}).then(({ statusCode }) => {\n    expect(statusCode).to.be.equal(200);\n});\nsetTimeout(() => {\n    if (!received) done(new Error(\"timeout\"));\n}, 2500);",
                  "err": {},
                  "uuid": "5767c6b4-de9c-4ed9-9209-313986890459",
                  "parentUUID": "abd171b2-a8c9-441d-b7eb-11882c6627d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c58a148-c0bb-4275-ba46-bead0f847b0c",
                "5767c6b4-de9c-4ed9-9209-313986890459"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "fb010b83-fdec-46b8-9cac-362b1d852768",
          "title": "UPS-RS unsubscribe workitem",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS unsubscribe workitem\"",
              "fullTitle": "UPS-RS unsubscribe workitem \"before all\" hook in \"UPS-RS unsubscribe workitem\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nrandomPort = await getPorts();\nserver.listen({ host: localIp, port: randomPort }, () => {\n    console.log(`Listening on ${randomPort}`);\n});\nawait createTestWorkitem();",
              "err": {},
              "uuid": "a39c83d6-596c-4efe-87dc-f49344234e42",
              "parentUUID": "fb010b83-fdec-46b8-9cac-362b1d852768",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"UPS-RS unsubscribe workitem\"",
              "fullTitle": "UPS-RS unsubscribe workitem \"after all\" hook in \"UPS-RS unsubscribe workitem\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server.close();\nglobalWs.close();\nawait dbInstance.destroyAll();",
              "err": {},
              "uuid": "646274d6-b6cd-4cab-91f6-f1a1c940b604",
              "parentUUID": "fb010b83-fdec-46b8-9cac-362b1d852768",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "22e75355-66f0-4a72-afeb-b50a38b4327b",
              "title": "unsubscribe global subscription",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"unsubscribe global subscription\"",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe global subscription \"before all\" hook in \"unsubscribe global subscription\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/RACCOON`,\n});",
                  "err": {},
                  "uuid": "ea0469b1-d64c-4a0d-bcb5-db990ab7838e",
                  "parentUUID": "22e75355-66f0-4a72-afeb-b50a38b4327b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should unsubscribe global subscription",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe global subscription Should unsubscribe global subscription",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/RACCOON`, \n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "8a850d95-05b5-47be-bf85-0836b7a513a9",
                  "parentUUID": "22e75355-66f0-4a72-afeb-b50a38b4327b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 404 when global subscription not exist",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe global subscription Should raise 404 when global subscription not exist",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/FOOBAR`, \n});\nexpect(response.statusCode).to.equal(404);",
                  "err": {},
                  "uuid": "e967c986-287d-4420-9b8b-2e8778649d8d",
                  "parentUUID": "22e75355-66f0-4a72-afeb-b50a38b4327b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a850d95-05b5-47be-bf85-0836b7a513a9",
                "e967c986-287d-4420-9b8b-2e8778649d8d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "a6231e22-52b7-4272-8113-324f2f3d2dc3",
              "title": "unsubscribe filtered global subscription",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"unsubscribe filtered global subscription\"",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe filtered global subscription \"before all\" hook in \"unsubscribe filtered global subscription\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5.1/subscribers/RACCOON?00380014.00400031=123456789`,\n});",
                  "err": {},
                  "uuid": "120cbdcc-5c15-4c6d-adb7-4726f5359f1e",
                  "parentUUID": "a6231e22-52b7-4272-8113-324f2f3d2dc3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should unsubscribe filtered global subscription",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe filtered global subscription Should unsubscribe filtered global subscription",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5.1/subscribers/RACCOON`, \n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "828f5a65-e355-4adc-9f69-f4cac8e2e486",
                  "parentUUID": "a6231e22-52b7-4272-8113-324f2f3d2dc3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "828f5a65-e355-4adc-9f69-f4cac8e2e486"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "11779da1-55f1-4325-b900-4b131c4db778",
              "title": "unsubscribe workitem subscription",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"unsubscribe workitem subscription\"",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe workitem subscription \"before all\" hook in \"unsubscribe workitem subscription\"",
                  "timedOut": false,
                  "duration": 5,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}/subscribers/RACCOON`,\n});",
                  "err": {},
                  "uuid": "da18e762-7c01-4140-a607-4f410aa7a52b",
                  "parentUUID": "11779da1-55f1-4325-b900-4b131c4db778",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should unsubscribe workitem subscription",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe workitem subscription Should unsubscribe workitem subscription",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/workitems/${workitemUID}/subscribers/RACCOON`, \n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "077839b7-c618-42aa-bde8-7debaa08f49c",
                  "parentUUID": "11779da1-55f1-4325-b900-4b131c4db778",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 404 when global subscription not exist",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe workitem subscription Should raise 404 when global subscription not exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/FOOBAR`, \n});\nexpect(response.statusCode).to.equal(404);",
                  "err": {},
                  "uuid": "7b217944-2626-471d-927f-bd853238f917",
                  "parentUUID": "11779da1-55f1-4325-b900-4b131c4db778",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "077839b7-c618-42aa-bde8-7debaa08f49c",
                "7b217944-2626-471d-927f-bd853238f917"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "aa54c366-725a-4f26-98e0-fc5560dffd05",
          "title": "UPS-RS retrieve workitem",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\UPS-RS\\updateWorkitem.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\updateWorkitem.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS retrieve workitem\"",
              "fullTitle": "UPS-RS retrieve workitem \"before all\" hook in \"UPS-RS retrieve workitem\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet createWorkitemResponse = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    payload: testWorkitem,\n});\ncreatedWorkitemLocation = createWorkitemResponse.headers[\"content-location\"];",
              "err": {},
              "uuid": "938621c7-bfdd-4a21-a2fc-e51b0b91f5bc",
              "parentUUID": "aa54c366-725a-4f26-98e0-fc5560dffd05",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should update workitem successfully",
              "fullTitle": "UPS-RS retrieve workitem Should update workitem successfully",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let fetchWorkitemResponse = await inject(app, {\n            method: \"GET\",\n            url: createdWorkitemLocation\n        });\n        expect(fetchWorkitemResponse.statusCode).to.equal(200);\n        let data = await fetchWorkitemResponse.json();\n        let createdWorkitem = data[0];\n        let updatedWorkItem = {\n            ...createdWorkitem,\n            \"00741002\": {\n                \"vr\": \"SQ\",\n                \"Value\": [\n                    {\n                        \"00741007\": {\n                            \"vr\": \"SQ\",\n                            \"Value\": [\n                                {\n                                    \"0040A040\": {\n                                        \"vr\": \"CS\",\n                                        \"Value\": [\n                                            \"TEXT\"\n                                        ]\n                                    },\n                                    \"0040A160\": {\n                                        \"vr\": \"UT\",\n                                        \"Value\": [\n                                            \"text value\"\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        };\n        let updateWorkitemResponse = await inject(app, {\n            method: \"POST\",\n            url: createdWorkitemLocation,\n            headers: {\n                \"Content-Type\": \"application/dicom+json\"\n            },\n            payload: JSON.stringify([updatedWorkItem])\n        });\n        expect(updateWorkitemResponse.statusCode).to.equal(200);\n        let fetchUpdatedWorkitemResponse = await inject(app, {\n            method: \"GET\",\n            url: createdWorkitemLocation\n        });\n        let updatedWorkitemResponseData = await fetchUpdatedWorkitemResponse.json();\n        let updatedWorkitemFromResponse = updatedWorkitemResponseData[0];\n        expect(updatedWorkitemFromResponse).have.property(\"00741002\").to.be.deep.equal(updatedWorkItem[\"00741002\"]);",
              "err": {},
              "uuid": "fa987198-bc01-41a0-9003-d59707e82e28",
              "parentUUID": "aa54c366-725a-4f26-98e0-fc5560dffd05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise Bad Request (400) when updating workitem in SCHEDULED state with Transaction UID",
              "fullTitle": "UPS-RS retrieve workitem Should raise Bad Request (400) when updating workitem in SCHEDULED state with Transaction UID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let fetchWorkitemResponse = await inject(app, {\n    method: \"GET\",\n    url: createdWorkitemLocation\n});\nexpect(fetchWorkitemResponse.statusCode).to.equal(200);\nlet data = await fetchWorkitemResponse.json();\nlet createdWorkitem = data[0];\nlet updatedWorkItem = {\n    ...createdWorkitem,\n    \"00081195\": {\n        \"vr\": \"UI\",\n        \"Value\": [\n            \"1.2.3.4\"\n        ]\n    }\n};\nlet updateWorkitemResponse = await inject(app, {\n    method: \"POST\",\n    url: createdWorkitemLocation,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([updatedWorkItem])\n});\nexpect(updateWorkitemResponse.statusCode).to.equal(400);",
              "err": {},
              "uuid": "2dfda3c2-ddc5-4df7-8b51-e6f1247dbed0",
              "parentUUID": "aa54c366-725a-4f26-98e0-fc5560dffd05",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa987198-bc01-41a0-9003-d59707e82e28",
            "2dfda3c2-ddc5-4df7-8b51-e6f1247dbed0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8a44cfa1-4661-4b93-81f9-7133586daf77",
          "title": "retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudyBulkdata.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudyBulkdata.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata'\"",
              "fullTitle": "retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' \"before all\" hook in \"retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata'\"",
              "timedOut": false,
              "duration": 896,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "b7291a47-bbd4-4206-a0c3-cf23e44fefb8",
              "parentUUID": "8a44cfa1-4661-4b93-81f9-7133586daf77",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata'\"",
              "fullTitle": "retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' \"after all\" hook in \"retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata'\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "7ac2dac8-8b47-4639-a5a4-3cb96e2c249c",
              "parentUUID": "8a44cfa1-4661-4b93-81f9-7133586daf77",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study bulkdata",
              "fullTitle": "retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' Should retrieve study bulkdata",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/bulkdata`,\n});\nexpect(response.statusCode).to.equal(200);\n\nlet data = response.rawPayload;\nlet buffer = multipartDecode(data);\nexpect(buffer).to.be.an(\"array\");",
              "err": {},
              "uuid": "83af0dde-1300-4349-a0dc-3bc7b37a3c20",
              "parentUUID": "8a44cfa1-4661-4b93-81f9-7133586daf77",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "83af0dde-1300-4349-a0dc-3bc7b37a3c20"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "753228ab-01ea-407d-a39e-06cc7458eb3f",
          "title": "retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudySeriesBulkdata.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudySeriesBulkdata.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata'\"",
              "fullTitle": "retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' \"before all\" hook in \"retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata'\"",
              "timedOut": false,
              "duration": 873,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "caa1bc61-7d34-4f49-872f-84e4edbfed2d",
              "parentUUID": "753228ab-01ea-407d-a39e-06cc7458eb3f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata'\"",
              "fullTitle": "retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' \"after all\" hook in \"retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata'\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "1711d195-f8c7-4957-b2bb-2e023e2a687b",
              "parentUUID": "753228ab-01ea-407d-a39e-06cc7458eb3f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series bulkdata",
              "fullTitle": "retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' Should retrieve study-series bulkdata",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/bulkdata`,\n});\nexpect(response.statusCode).to.equal(200);\n\nlet data = response.rawPayload;\nlet buffer = multipartDecode(data);\nexpect(buffer).to.be.an(\"array\");",
              "err": {},
              "uuid": "3ec8ca8f-421f-409d-bf39-6bd6c594712b",
              "parentUUID": "753228ab-01ea-407d-a39e-06cc7458eb3f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ec8ca8f-421f-409d-bf39-6bd6c594712b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "01ec40a4-0e6f-426e-9bea-9504e1964466",
          "title": "retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudySeriesInstancesBulkdata.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudySeriesInstancesBulkdata.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata'\"",
              "fullTitle": "retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' \"before all\" hook in \"retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata'\"",
              "timedOut": false,
              "duration": 897,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "c10abdee-69b3-48cf-a277-995da13088d7",
              "parentUUID": "01ec40a4-0e6f-426e-9bea-9504e1964466",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata'\"",
              "fullTitle": "retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' \"after all\" hook in \"retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata'\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "b9ee1b10-4197-4f88-b110-68c294125211",
              "parentUUID": "01ec40a4-0e6f-426e-9bea-9504e1964466",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instances bulkdata",
              "fullTitle": "retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' Should retrieve study-series-instances bulkdata",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/bulkdata`,\n});\nexpect(response.statusCode).to.equal(200);\n\nlet data = response.rawPayload;\nlet buffer = multipartDecode(data);\nexpect(buffer).to.be.an(\"array\");",
              "err": {},
              "uuid": "8ba9c3e3-3fde-41b3-b362-8781f60a5780",
              "parentUUID": "01ec40a4-0e6f-426e-9bea-9504e1964466",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8ba9c3e3-3fde-41b3-b362-8781f60a5780"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6d1ab6f8-42f9-422c-a65e-17c8b9d06e42",
          "title": "retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudySeriesInstancesSpecifiedBulkdata.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudySeriesInstancesSpecifiedBulkdata.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath'\"",
              "fullTitle": "retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath' \"before all\" hook in \"retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath'\"",
              "timedOut": false,
              "duration": 872,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "e0e7b643-8376-4164-843c-d8ce0fa89a91",
              "parentUUID": "6d1ab6f8-42f9-422c-a65e-17c8b9d06e42",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath'\"",
              "fullTitle": "retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath' \"after all\" hook in \"retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath'\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "6233882a-49c6-4c21-a9ff-8f3f7fb519fe",
              "parentUUID": "6d1ab6f8-42f9-422c-a65e-17c8b9d06e42",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instances bulkdata",
              "fullTitle": "retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath' Should retrieve study-series-instances bulkdata",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/bulkdata/${binaryValuePath}`,\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nlet buffer = multipartDecode(data);\nexpect(buffer).to.be.an(\"array\").have.lengthOf(1);",
              "err": {},
              "uuid": "806282f7-2c5a-4c95-800e-c2ec00c0f353",
              "parentUUID": "6d1ab6f8-42f9-422c-a65e-17c8b9d06e42",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "806282f7-2c5a-4c95-800e-c2ec00c0f353"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "db1544e1-9b3c-498f-9446-c15747367992",
          "title": "retrieve study metadata",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\metadata\\retrieveStudyMetadata.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\metadata\\retrieveStudyMetadata.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study metadata\"",
              "fullTitle": "retrieve study metadata \"before all\" hook in \"retrieve study metadata\"",
              "timedOut": false,
              "duration": 874,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "30fd940c-8e83-4717-903e-a66420293a23",
              "parentUUID": "db1544e1-9b3c-498f-9446-c15747367992",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve study with 14 instances' metadata",
              "fullTitle": "retrieve study metadata Should retrieve study with 14 instances' metadata",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/metadata`,\n    headers: {\n        \"accept\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(14);",
              "err": {},
              "uuid": "c7af181a-21ab-46bd-97bc-7083c636203b",
              "parentUUID": "db1544e1-9b3c-498f-9446-c15747367992",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 204 when study not exist",
              "fullTitle": "retrieve study metadata Should raise 204 when study not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}1268/metadata`,\n});\nexpect(response.statusCode).to.equal(204);",
              "err": {},
              "uuid": "d036d97b-2061-40ea-af2f-15a99064c15b",
              "parentUUID": "db1544e1-9b3c-498f-9446-c15747367992",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c7af181a-21ab-46bd-97bc-7083c636203b",
            "d036d97b-2061-40ea-af2f-15a99064c15b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a8582481-92d1-4898-9824-aba0dc06cc0d",
          "title": "retrieve study-series metadata",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\metadata\\retrieveStudySeriesInstancesMetadata.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\metadata\\retrieveStudySeriesInstancesMetadata.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series metadata\"",
              "fullTitle": "retrieve study-series metadata \"before all\" hook in \"retrieve study-series metadata\"",
              "timedOut": false,
              "duration": 1370,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "9b64e031-a866-4325-aa57-570c7e2b6afe",
              "parentUUID": "a8582481-92d1-4898-9824-aba0dc06cc0d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve study-series-instances with 1 instance's metadata",
              "fullTitle": "retrieve study-series metadata Should retrieve study-series-instances with 1 instance's metadata",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/metadata`,\n    headers: {\n        \"accept\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(1);",
              "err": {},
              "uuid": "b250f711-802e-4e4b-b257-a7a75f95aad9",
              "parentUUID": "a8582481-92d1-4898-9824-aba0dc06cc0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 204 when study-series not exist",
              "fullTitle": "retrieve study-series metadata Should raise 204 when study-series not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}1268/metadata`,\n});\nexpect(response.statusCode).to.equal(204);",
              "err": {},
              "uuid": "c2beff3a-e722-4e7b-a820-6002b439bc52",
              "parentUUID": "a8582481-92d1-4898-9824-aba0dc06cc0d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b250f711-802e-4e4b-b257-a7a75f95aad9",
            "c2beff3a-e722-4e7b-a820-6002b439bc52"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "807e50fb-55af-4769-abef-1dabb70381ea",
          "title": "retrieve study-series metadata",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\metadata\\retrieveStudySeriesMetadata.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\metadata\\retrieveStudySeriesMetadata.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series metadata\"",
              "fullTitle": "retrieve study-series metadata \"before all\" hook in \"retrieve study-series metadata\"",
              "timedOut": false,
              "duration": 870,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "f27bbcf1-8b10-425e-a60d-1f7d47c500eb",
              "parentUUID": "807e50fb-55af-4769-abef-1dabb70381ea",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve study-series with 5 instances' metadata",
              "fullTitle": "retrieve study-series metadata Should retrieve study-series with 5 instances' metadata",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/metadata`,\n    headers: {\n        \"accept\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
              "err": {},
              "uuid": "1721487d-56c5-4ac4-a7f2-afe9af4c4150",
              "parentUUID": "807e50fb-55af-4769-abef-1dabb70381ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 204 when study-series not exist",
              "fullTitle": "retrieve study-series metadata Should raise 204 when study-series not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}126888/metadata`,\n});\nexpect(response.statusCode).to.equal(204);",
              "err": {},
              "uuid": "29a66557-96ab-4e9d-ac21-29afe3142b8e",
              "parentUUID": "807e50fb-55af-4769-abef-1dabb70381ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1721487d-56c5-4ac4-a7f2-afe9af4c4150",
            "29a66557-96ab-4e9d-ac21-29afe3142b8e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "74ec82fd-c3a3-41cf-808d-c8f10f3f9da3",
          "title": "retrieve rendered study '/dicom-web/studies/:studyUID/rendered'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudy.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudy.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/rendered'\"",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/rendered' \"before all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/rendered'\"",
              "timedOut": false,
              "duration": 863,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "a8e63d4f-171d-4cdd-ac58-5ce51ebf74ca",
              "parentUUID": "74ec82fd-c3a3-41cf-808d-c8f10f3f9da3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/rendered'\"",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/rendered' \"after all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/rendered'\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "c4d75037-a22b-4149-8911-b4877acdf998",
              "parentUUID": "74ec82fd-c3a3-41cf-808d-c8f10f3f9da3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study with 15 rendered images",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/rendered' Should retrieve study with 15 rendered images",
              "timedOut": false,
              "duration": 513,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/rendered`,\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(15);",
              "err": {},
              "uuid": "0ecf337a-43f2-4e45-85d0-fd5be629e977",
              "parentUUID": "74ec82fd-c3a3-41cf-808d-c8f10f3f9da3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study not exist",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/rendered' Should raise 404 when study not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}1268/rendered`,\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "f2e48279-5ce1-49a5-a68c-1e58996e137e",
              "parentUUID": "74ec82fd-c3a3-41cf-808d-c8f10f3f9da3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 206 when study only have partial images",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/rendered' Should raise 206 when study only have partial images",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let studyImagePathFactory = new StudyImagePathFactory({ studyUID: studyUIDs[2]});\nlet imagePaths = await studyImagePathFactory.getImagePaths();\nlet firstImagePath = imagePaths[0];\nawait unlink(firstImagePath.instancePath);\nlet response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${studyUIDs[2]}/rendered`\n});\nexpect(response.statusCode).to.equal(206);",
              "err": {},
              "uuid": "7112a3ea-27c9-4b26-88d6-885ead07d10b",
              "parentUUID": "74ec82fd-c3a3-41cf-808d-c8f10f3f9da3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 410 when study gone",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/rendered' Should raise 410 when study gone",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let studyImagePathFactory = new StudyImagePathFactory({ studyUID: STUDY_UID});\nlet imagePaths = await studyImagePathFactory.getImagePaths();\nlet firstImagePath = imagePaths[0];\nawait unlink(firstImagePath.instancePath);\nlet response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/rendered`\n});\nexpect(response.statusCode).to.equal(410);",
              "err": {},
              "uuid": "cd921442-f3df-4759-a94c-4796e6363274",
              "parentUUID": "74ec82fd-c3a3-41cf-808d-c8f10f3f9da3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0ecf337a-43f2-4e45-85d0-fd5be629e977",
            "f2e48279-5ce1-49a5-a68c-1e58996e137e",
            "7112a3ea-27c9-4b26-88d6-885ead07d10b",
            "cd921442-f3df-4759-a94c-4796e6363274"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 598,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "247fe9b3-8a90-4403-b804-5ca2cbb35cbe",
          "title": "retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeries.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeries.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'\"",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered' \"before all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'\"",
              "timedOut": false,
              "duration": 860,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "3155bc25-f0db-4a8a-be01-3d4868fa7bc1",
              "parentUUID": "247fe9b3-8a90-4403-b804-5ca2cbb35cbe",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'\"",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered' \"after all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "1d735f24-5d44-4f45-97c0-0463c522e155",
              "parentUUID": "247fe9b3-8a90-4403-b804-5ca2cbb35cbe",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series with 15 rendered images",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered' Should retrieve study-series with 15 rendered images",
              "timedOut": false,
              "duration": 505,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/rendered`,\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(15);",
              "err": {},
              "uuid": "46cfc089-ad34-484a-af10-fe0ad3cfc7cc",
              "parentUUID": "247fe9b3-8a90-4403-b804-5ca2cbb35cbe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "46cfc089-ad34-484a-af10-fe0ad3cfc7cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 505,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f237e078-cc3a-497f-a9ac-c6513789002f",
          "title": "retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeriesInstances.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeriesInstances.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'\"",
              "fullTitle": "retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered' \"before all\" hook in \"retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'\"",
              "timedOut": false,
              "duration": 844,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "2d107deb-c031-42e1-b211-65e4e5d959b2",
              "parentUUID": "f237e078-cc3a-497f-a9ac-c6513789002f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'\"",
              "fullTitle": "retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered' \"after all\" hook in \"retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "8edf51ce-7e44-4ad6-a22a-1efe57ab3f92",
              "parentUUID": "f237e078-cc3a-497f-a9ac-c6513789002f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instances with 15 rendered images",
              "fullTitle": "retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered' Should retrieve study-series-instances with 15 rendered images",
              "timedOut": false,
              "duration": 495,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/rendered`,\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(15);",
              "err": {},
              "uuid": "93e97708-fb57-43f7-99bd-0d754e95d7a2",
              "parentUUID": "f237e078-cc3a-497f-a9ac-c6513789002f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when using invalid accept header",
              "fullTitle": "retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered' Should raise 400 (Bad Request) when using invalid accept header",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/rendered`,\n    headers: {\n        \"accept\": \"text/html\"\n    }\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "db388590-fa3c-4d2d-9747-f2f8213209a7",
              "parentUUID": "f237e078-cc3a-497f-a9ac-c6513789002f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "93e97708-fb57-43f7-99bd-0d754e95d7a2",
            "db388590-fa3c-4d2d-9747-f2f8213209a7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 496,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
          "title": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeriesInstancesFrames.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeriesInstancesFrames.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'\"",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' \"before all\" hook in \"retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'\"",
              "timedOut": false,
              "duration": 873,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "5c547bfc-34b1-44be-a22c-78143c9c9a3a",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'\"",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' \"after all\" hook in \"retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "35a20a10-670d-4091-b082-65801113dc21",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve 1 frame",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve 1 frame",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "ac3bac9a-0ddc-47c5-abb6-d75a1fa5c061",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve 3 frames",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve 3 frames",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1,2,3/rendered`,\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(3);",
              "err": {},
              "uuid": "5c06f960-2027-4434-bae9-11022af2a689",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with quality=30",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with quality=30",
              "timedOut": false,
              "duration": 230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "e67a2a1c-2595-4669-93dd-1f6389ce1310",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with iccprofile=no",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with iccprofile=no",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "3bb42c5d-65e1-4790-b768-93ba371f2a1a",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with iccprofile=yes",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with iccprofile=yes",
              "timedOut": false,
              "duration": 75,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "52adfa81-1508-422b-8877-7f25731145fe",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with iccprofile=srgb",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with iccprofile=srgb",
              "timedOut": false,
              "duration": 190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "ead1b15a-19e4-4177-8775-975b09a63fc7",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with iccprofile=adobergb",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with iccprofile=adobergb",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "0098c06c-097b-4b50-b9ed-a5f74fd706ab",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with iccprofile=rommrgb",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with iccprofile=rommrgb",
              "timedOut": false,
              "duration": 77,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "8f27cc58-2488-4aea-bf0d-303db4081351",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with viewport=100,100",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with viewport=100,100",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "22b49e7f-5afe-486b-a050-7c314bda4c29",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with viewport=100,100,0,0,10,10",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with viewport=100,100,0,0,10,10",
              "timedOut": false,
              "duration": 174,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "0ae6b04a-a16d-4a0b-9cac-18371d3bb3b1",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with viewport=100,100,10,10,-50,-50",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with viewport=100,100,10,10,-50,-50",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "0c5ee77f-fe5b-4e13-9e23-202d853def38",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise BadRequest (400) error when retrieving frame with bad quality=-1",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should raise BadRequest (400) error when retrieving frame with bad quality=-1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "d6520ffd-fd3c-4768-8b5b-a72b1c206969",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise BadRequest (400) error when retrieving frame with bad iccprofile=foobar",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should raise BadRequest (400) error when retrieving frame with bad iccprofile=foobar",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "e2f1996f-248f-4854-aae1-6e0f8b9f74fd",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise BadRequest (400) error when retrieving frame with bad viewport=1,1,,1",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should raise BadRequest (400) error when retrieving frame with bad viewport=1,1,,1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "f6750eae-6178-4a77-a300-290d826a1248",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise BadRequest (400) error when retrieving frame with bad viewport=1,1,1,",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should raise BadRequest (400) error when retrieving frame with bad viewport=1,1,1,",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "3bf0aa00-3ffe-4458-bfd0-b7ada2bb01da",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw error when retrieve frame without iccprofile and apply the icc profile",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should throw error when retrieve frame without iccprofile and apply the icc profile",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${NO_ICC_PROFILE_STUDY_UID}/series/${NO_ICC_PROFILE_SERIES_UID}/instances/${NO_ICC_PROFILE_INSTANCE_UID}/frames/1/rendered?iccprofile=yes`,\n});\nexpect(response.statusCode).to.equal(500);",
              "err": {},
              "uuid": "ac8343c4-73ea-49de-96b0-719c73f18412",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study not exist",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should raise 404 when study not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}2486/frames/1/rendered`,\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "59e70d87-8f69-46d3-87c4-5af4cb8e9a2e",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 when frame is out of range",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should raise 400 when frame is out of range",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/2486/rendered`,\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "82371707-9a41-4d2a-b245-e612abc91db9",
              "parentUUID": "8368a828-e2b6-4dce-9d00-0b49aca57a2c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "ba58439c-8325-4ff8-966a-3a9caab1969b",
              "title": "retrieve rendered frame without pixel data",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeriesInstancesFrames.test.js",
              "file": "\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeriesInstancesFrames.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"retrieve rendered frame without pixel data\"",
                  "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' retrieve rendered frame without pixel data \"before all\" hook in \"retrieve rendered frame without pixel data\"",
                  "timedOut": false,
                  "duration": 32,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await storeInstanceForTest(\n    resolve(\n        __dirname,\n        `../../../../testData/forStore/ANN/instance_6.dcm`\n    )\n);",
                  "err": {},
                  "uuid": "dea3881b-b378-4aa2-ba7a-df60d872e210",
                  "parentUUID": "ba58439c-8325-4ff8-966a-3a9caab1969b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should raise 400 when frame have no pixel data",
                  "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' retrieve rendered frame without pixel data Should raise 400 when frame have no pixel data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${ANN_STUDY_UID}/series/${ANN_SERIES_UID}/instances/${ANN_INSTANCE_UID}/frames/1/rendered`,\n});\nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "4f435331-b554-402b-858e-97347053f374",
                  "parentUUID": "ba58439c-8325-4ff8-966a-3a9caab1969b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f435331-b554-402b-858e-97347053f374"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "ac3bac9a-0ddc-47c5-abb6-d75a1fa5c061",
            "5c06f960-2027-4434-bae9-11022af2a689",
            "e67a2a1c-2595-4669-93dd-1f6389ce1310",
            "3bb42c5d-65e1-4790-b768-93ba371f2a1a",
            "52adfa81-1508-422b-8877-7f25731145fe",
            "ead1b15a-19e4-4177-8775-975b09a63fc7",
            "0098c06c-097b-4b50-b9ed-a5f74fd706ab",
            "8f27cc58-2488-4aea-bf0d-303db4081351",
            "22b49e7f-5afe-486b-a050-7c314bda4c29",
            "0ae6b04a-a16d-4a0b-9cac-18371d3bb3b1",
            "0c5ee77f-fe5b-4e13-9e23-202d853def38",
            "d6520ffd-fd3c-4768-8b5b-a72b1c206969",
            "e2f1996f-248f-4854-aae1-6e0f8b9f74fd",
            "f6750eae-6178-4a77-a300-290d826a1248",
            "3bf0aa00-3ffe-4458-bfd0-b7ada2bb01da",
            "ac8343c4-73ea-49de-96b0-719c73f18412",
            "59e70d87-8f69-46d3-87c4-5af4cb8e9a2e",
            "82371707-9a41-4d2a-b245-e612abc91db9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1292,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5a2ede7f-2e4e-4958-a6c6-e8c21d193e0a",
          "title": "retrieve study",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\retrieveStudy.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\retrieveStudy.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study\"",
              "fullTitle": "retrieve study \"before all\" hook in \"retrieve study\"",
              "timedOut": false,
              "duration": 891,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "8bf1399a-9e77-44d4-b0c8-56f95d1cb0a1",
              "parentUUID": "5a2ede7f-2e4e-4958-a6c6-e8c21d193e0a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study\"",
              "fullTitle": "retrieve study \"after all\" hook in \"retrieve study\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "unlink(zipFullPath);",
              "err": {},
              "uuid": "5d0790a7-d697-4442-ba7b-fb5bf83fc5c8",
              "parentUUID": "5a2ede7f-2e4e-4958-a6c6-e8c21d193e0a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study with 14 instances",
              "fullTitle": "retrieve study Should retrieve study with 14 instances",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(14);",
              "err": {},
              "uuid": "f158cce8-9a66-4065-9ff3-4313d60e7c09",
              "parentUUID": "5a2ede7f-2e4e-4958-a6c6-e8c21d193e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study with 14 instances with ZIP",
              "fullTitle": "retrieve study Should retrieve study with 14 instances with ZIP",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}`,\n    headers: {\n        \"accept\": \"application/zip\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nawait writeFile(zipFullPath, data);\nlet fileListInZip = await SevenZip.list(zipFullPath);\nexpect(fileListInZip).to.be.an(\"array\");\nexpect(fileListInZip.length).to.equal(14);",
              "err": {},
              "uuid": "07e94782-974f-4c23-b1d2-d85b5cbd31e6",
              "parentUUID": "5a2ede7f-2e4e-4958-a6c6-e8c21d193e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study not exist with zip route",
              "fullTitle": "retrieve study Should raise 404 when study not exist with zip route",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}1268`,\n    headers: {\n        \"accept\": \"application/zip\"\n    }\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "52e0db39-679e-41de-97a0-2cebd4fe7d6f",
              "parentUUID": "5a2ede7f-2e4e-4958-a6c6-e8c21d193e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study with 14 instances with accept '*'",
              "fullTitle": "retrieve study Should retrieve study with 14 instances with accept '*'",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}`,\n    headers: {\n        \"accept\": \"*\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(14);",
              "err": {},
              "uuid": "49928573-9b29-4dea-b8cd-e8fd60c8f924",
              "parentUUID": "5a2ede7f-2e4e-4958-a6c6-e8c21d193e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise not supported type",
              "fullTitle": "retrieve study Should raise not supported type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"not-application/dicom\\\"\"\n    }\n});\nexpect(response.statusCode).to.equal(406);",
              "err": {},
              "uuid": "cbe6e490-3272-47a2-8d6a-d40bedc816a5",
              "parentUUID": "5a2ede7f-2e4e-4958-a6c6-e8c21d193e0a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f158cce8-9a66-4065-9ff3-4313d60e7c09",
            "07e94782-974f-4c23-b1d2-d85b5cbd31e6",
            "52e0db39-679e-41de-97a0-2cebd4fe7d6f",
            "49928573-9b29-4dea-b8cd-e8fd60c8f924",
            "cbe6e490-3272-47a2-8d6a-d40bedc816a5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 187,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e61a52d2-b3ef-4a9e-af64-d2977fa9682e",
          "title": "retrieve study-series",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\retrieveStudySeries.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\retrieveStudySeries.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series\"",
              "fullTitle": "retrieve study-series \"before all\" hook in \"retrieve study-series\"",
              "timedOut": false,
              "duration": 1526,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "d6200366-8a20-4481-a3f6-8d3bb71e8177",
              "parentUUID": "e61a52d2-b3ef-4a9e-af64-d2977fa9682e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series\"",
              "fullTitle": "retrieve study-series \"after all\" hook in \"retrieve study-series\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "unlink(zipFullPath);",
              "err": {},
              "uuid": "63407c95-0118-4b3b-98ac-e7397f8b38fe",
              "parentUUID": "e61a52d2-b3ef-4a9e-af64-d2977fa9682e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series with 5 instances",
              "fullTitle": "retrieve study-series Should retrieve study-series with 5 instances",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(5);",
              "err": {},
              "uuid": "35e067c4-a9fc-4ac1-850e-69f1620a9102",
              "parentUUID": "e61a52d2-b3ef-4a9e-af64-d2977fa9682e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study-series with 5 instances with ZIP",
              "fullTitle": "retrieve study-series Should retrieve study-series with 5 instances with ZIP",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}`,\n    headers: {\n        \"accept\": \"application/zip\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nawait writeFile(zipFullPath, data);\nlet fileListInZip = await SevenZip.list(zipFullPath);\nexpect(fileListInZip).to.be.an(\"array\");\nexpect(fileListInZip.length).to.equal(5);",
              "err": {},
              "uuid": "cbbdf6a7-0a9f-4502-9726-ce305e3624ec",
              "parentUUID": "e61a52d2-b3ef-4a9e-af64-d2977fa9682e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "35e067c4-a9fc-4ac1-850e-69f1620a9102",
            "cbbdf6a7-0a9f-4502-9726-ce305e3624ec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 87,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4bb13920-5b95-4a7c-9c9a-5dca56ee6aea",
          "title": "retrieve study-series-instances",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\retrieveStudySeriesInstances.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\retrieveStudySeriesInstances.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances\"",
              "fullTitle": "retrieve study-series-instances \"before all\" hook in \"retrieve study-series-instances\"",
              "timedOut": false,
              "duration": 875,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "88127016-73e8-485b-b14b-15ab9a18c3fd",
              "parentUUID": "4bb13920-5b95-4a7c-9c9a-5dca56ee6aea",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series-instances\"",
              "fullTitle": "retrieve study-series-instances \"after all\" hook in \"retrieve study-series-instances\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "unlink(zipFullPath);",
              "err": {},
              "uuid": "9cbbf6c6-66f1-4117-91a4-3aabd4aaa530",
              "parentUUID": "4bb13920-5b95-4a7c-9c9a-5dca56ee6aea",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instances with 1 instance",
              "fullTitle": "retrieve study-series-instances Should retrieve study-series-instances with 1 instance",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(1);",
              "err": {},
              "uuid": "2d0d915a-41f1-4542-b139-9b1747704256",
              "parentUUID": "4bb13920-5b95-4a7c-9c9a-5dca56ee6aea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study-series-instances with 1 instance with ZIP",
              "fullTitle": "retrieve study-series-instances Should retrieve study-series-instances with 1 instance with ZIP",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}`,\n    headers: {\n        \"accept\": \"application/zip\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nawait writeFile(zipFullPath, data);\nlet fileListInZip = await SevenZip.list(zipFullPath);\nexpect(fileListInZip).to.be.an(\"array\");\nexpect(fileListInZip.length).to.equal(1);",
              "err": {},
              "uuid": "0da4fa44-10da-4f1d-b796-5036b43b9be0",
              "parentUUID": "4bb13920-5b95-4a7c-9c9a-5dca56ee6aea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d0d915a-41f1-4542-b139-9b1747704256",
            "0da4fa44-10da-4f1d-b796-5036b43b9be0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 73,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b18e6d17-7c53-4153-8107-7c736f12a574",
          "title": "retrieve study with transfer syntax",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\retrieveStudyWithTransferSyntax.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\retrieveStudyWithTransferSyntax.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study with transfer syntax\"",
              "fullTitle": "retrieve study with transfer syntax \"before all\" hook in \"retrieve study with transfer syntax\"",
              "timedOut": false,
              "duration": 872,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "07be7382-d199-49d1-918c-b21da9a5f63c",
              "parentUUID": "b18e6d17-7c53-4153-8107-7c736f12a574",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study with transfer syntax\"",
              "fullTitle": "retrieve study with transfer syntax \"after all\" hook in \"retrieve study with transfer syntax\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "unlink(zipFullPath);",
              "err": {},
              "uuid": "dfc81046-0b2e-42cc-b017-7d2ef99f73b6",
              "parentUUID": "b18e6d17-7c53-4153-8107-7c736f12a574",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study with 1 instance with ZIP and transcode with transfer syntax",
              "fullTitle": "retrieve study with transfer syntax Should retrieve study with 1 instance with ZIP and transcode with transfer syntax",
              "timedOut": false,
              "duration": 417,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID_FOR_TRANSFER_SYNTAX}`,\n    headers: {\n        \"accept\": \"application/zip; transfer-syntax=1.2.840.10008.1.2.4.50\" // JPEG Baseline\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nawait writeFile(zipFullPath, data);\nlet fileListInZip = await SevenZip.list(zipFullPath);\nexpect(fileListInZip).to.be.an(\"array\");\nexpect(fileListInZip.length).to.equal(1);",
              "err": {},
              "uuid": "1d259ef4-8db5-406b-8421-1ee3ed3b9a7f",
              "parentUUID": "b18e6d17-7c53-4153-8107-7c736f12a574",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d259ef4-8db5-406b-8421-1ee3ed3b9a7f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 417,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3db68788-2c27-4714-9e23-7ef7d242b65c",
          "title": "retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudySeriesInstancesFrameThumbnail.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudySeriesInstancesFrameThumbnail.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail'\"",
              "fullTitle": "retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail' \"before all\" hook in \"retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail'\"",
              "timedOut": false,
              "duration": 873,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "ebac1791-eecb-4b54-854b-63d82601bf5b",
              "parentUUID": "3db68788-2c27-4714-9e23-7ef7d242b65c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail'\"",
              "fullTitle": "retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail' \"after all\" hook in \"retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail'\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "b1ec072b-2b21-4513-834e-ad49dd2c72f5",
              "parentUUID": "3db68788-2c27-4714-9e23-7ef7d242b65c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instances-frame thumbnail",
              "fullTitle": "retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail' Should retrieve study-series-instances-frame thumbnail",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/thumbnail`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "5026bfa8-35f2-4b49-8421-a2dd43808b34",
              "parentUUID": "3db68788-2c27-4714-9e23-7ef7d242b65c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 500 when using bad frame number",
              "fullTitle": "retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail' Should raise 500 when using bad frame number",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/2486/thumbnail`,\n});\nexpect(response.statusCode).to.equal(500);",
              "err": {},
              "uuid": "5abb03b4-02f3-4d40-9e3c-87fe95622ca4",
              "parentUUID": "3db68788-2c27-4714-9e23-7ef7d242b65c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when image not exist",
              "fullTitle": "retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail' Should raise 404 when image not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}2486/frames/1/thumbnail`,\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "b6747733-8682-490b-9396-fc6b1709cab2",
              "parentUUID": "3db68788-2c27-4714-9e23-7ef7d242b65c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5026bfa8-35f2-4b49-8421-a2dd43808b34",
            "5abb03b4-02f3-4d40-9e3c-87fe95622ca4",
            "b6747733-8682-490b-9396-fc6b1709cab2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 76,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "317c26a0-b7f8-4f22-bed8-9cdd807be611",
          "title": "retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudySeriesInstancesThumbnail.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudySeriesInstancesThumbnail.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'\"",
              "fullTitle": "retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail' \"before all\" hook in \"retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'\"",
              "timedOut": false,
              "duration": 912,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "55a02ef5-c50a-487a-bec3-b19d9beb663f",
              "parentUUID": "317c26a0-b7f8-4f22-bed8-9cdd807be611",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'\"",
              "fullTitle": "retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail' \"after all\" hook in \"retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "d7e1ceca-e270-4855-8e91-86fb2c0b0cb4",
              "parentUUID": "317c26a0-b7f8-4f22-bed8-9cdd807be611",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instances thumbnail",
              "fullTitle": "retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail' Should retrieve study-series-instances thumbnail",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/thumbnail`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "61c650a0-0fd4-4bdf-a5b1-9e17bb601a50",
              "parentUUID": "317c26a0-b7f8-4f22-bed8-9cdd807be611",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study-series-instances not exist",
              "fullTitle": "retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail' Should raise 404 when study-series-instances not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}2486/thumbnail`,\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "ea8ba055-0ca3-4a6e-adfd-938f3269b99c",
              "parentUUID": "317c26a0-b7f8-4f22-bed8-9cdd807be611",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "61c650a0-0fd4-4bdf-a5b1-9e17bb601a50",
            "ea8ba055-0ca3-4a6e-adfd-938f3269b99c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 56,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b4d052c3-43b8-4ca1-ab21-0375408aab91",
          "title": "retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudySeriesThumbnail.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudySeriesThumbnail.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'\"",
              "fullTitle": "retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail' \"before all\" hook in \"retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'\"",
              "timedOut": false,
              "duration": 853,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "2f1d7035-9881-4309-aa02-6562750ddc5a",
              "parentUUID": "b4d052c3-43b8-4ca1-ab21-0375408aab91",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'\"",
              "fullTitle": "retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail' \"after all\" hook in \"retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "9027e605-e2f1-4f39-aa4d-943be9660956",
              "parentUUID": "b4d052c3-43b8-4ca1-ab21-0375408aab91",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series thumbnail",
              "fullTitle": "retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail' Should retrieve study-series thumbnail",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/thumbnail`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "34d86bb4-8b03-4e9a-b59d-13cf1cbd2a9d",
              "parentUUID": "b4d052c3-43b8-4ca1-ab21-0375408aab91",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study-series not exist",
              "fullTitle": "retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail' Should raise 404 when study-series not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}2486/thumbnail`,\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "aa8a1b8f-1416-422b-9c8e-0e7ff4c25527",
              "parentUUID": "b4d052c3-43b8-4ca1-ab21-0375408aab91",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "34d86bb4-8b03-4e9a-b59d-13cf1cbd2a9d",
            "aa8a1b8f-1416-422b-9c8e-0e7ff4c25527"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 51,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cb8a933d-9bd8-4c09-aa91-413cef804647",
          "title": "retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudyThumbnail.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudyThumbnail.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail'\"",
              "fullTitle": "retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail' \"before all\" hook in \"retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail'\"",
              "timedOut": false,
              "duration": 862,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "c087e743-0d3d-48a8-bc17-17095e4e44ca",
              "parentUUID": "cb8a933d-9bd8-4c09-aa91-413cef804647",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail'\"",
              "fullTitle": "retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail' \"after all\" hook in \"retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail'\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "d1adfad8-58cb-4534-9561-73343042d100",
              "parentUUID": "cb8a933d-9bd8-4c09-aa91-413cef804647",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study thumbnail",
              "fullTitle": "retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail' Should retrieve study thumbnail",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/thumbnail`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "6694c2da-22f5-46f3-bab1-2c046281fc33",
              "parentUUID": "cb8a933d-9bd8-4c09-aa91-413cef804647",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study not exist",
              "fullTitle": "retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail' Should raise 404 when study not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}1268/thumbnail`,\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "ef9157db-88f5-432f-a1a6-62635cb34a95",
              "parentUUID": "cb8a933d-9bd8-4c09-aa91-413cef804647",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6694c2da-22f5-46f3-bab1-2c046281fc33",
            "ef9157db-88f5-432f-a1a6-62635cb34a95"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 42,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "8490cc54-5f39-4690-b64b-295d5a7edf69",
          "title": "retrieve study-series-instances using WADO-URI",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-URI\\retrieveInstanceWadoUri.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-URI\\retrieveInstanceWadoUri.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances using WADO-URI\"",
              "fullTitle": "retrieve study-series-instances using WADO-URI \"before all\" hook in \"retrieve study-series-instances using WADO-URI\"",
              "timedOut": false,
              "duration": 871,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "99a92a06-58df-45ca-92ef-706ebd6ffb21",
              "parentUUID": "8490cc54-5f39-4690-b64b-295d5a7edf69",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series-instances using WADO-URI\"",
              "fullTitle": "retrieve study-series-instances using WADO-URI \"after all\" hook in \"retrieve study-series-instances using WADO-URI\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "f452d309-ce45-4cff-a855-a68fba7bed98",
              "parentUUID": "8490cc54-5f39-4690-b64b-295d5a7edf69",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve DICOM instance",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&contentType=application/dicom`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "734669ae-e5d8-4646-af1c-ce96a1cf746c",
              "parentUUID": "8490cc54-5f39-4690-b64b-295d5a7edf69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance in JPEG",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance in JPEG",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&contentType=image/jpeg`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "4907041c-11b0-412d-a6eb-d570660d45c9",
              "parentUUID": "8490cc54-5f39-4690-b64b-295d5a7edf69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance with frameNumber=1",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance with frameNumber=1",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "32c36d04-af6c-4664-b98d-e850a503384b",
              "parentUUID": "8490cc54-5f39-4690-b64b-295d5a7edf69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance with imageQuality=50",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance with imageQuality=50",
              "timedOut": false,
              "duration": 75,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "c02ecc66-1719-493c-beab-accd95081a10",
              "parentUUID": "8490cc54-5f39-4690-b64b-295d5a7edf69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance with region=0.1,0.1,1,1",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance with region=0.1,0.1,1,1",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "72e86f90-c2f7-4a9f-bff7-093d488ac9d9",
              "parentUUID": "8490cc54-5f39-4690-b64b-295d5a7edf69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance with rows=500",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance with rows=500",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "033298d4-2686-471a-83fe-0ec1dbe8cedb",
              "parentUUID": "8490cc54-5f39-4690-b64b-295d5a7edf69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance with columns=500",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance with columns=500",
              "timedOut": false,
              "duration": 80,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "e744015d-5041-4260-b067-3f4782fde511",
              "parentUUID": "8490cc54-5f39-4690-b64b-295d5a7edf69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance with iccprofile=yes",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance with iccprofile=yes",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&${param}=${value}`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "641b7f5d-1cc3-44b9-82e3-f2ba789036ae",
              "parentUUID": "8490cc54-5f39-4690-b64b-295d5a7edf69",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "71e1c1e3-f02a-47d4-8ec3-852df599ebc5",
              "title": "windowing",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-URI\\retrieveInstanceWadoUri.test.js",
              "file": "\\test\\api\\dicom-web\\WADO-URI\\retrieveInstanceWadoUri.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should retrieve instance with param windowing",
                  "fullTitle": "retrieve study-series-instances using WADO-URI windowing Should retrieve instance with param windowing",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&windowCenter=100&windowWidth=200`,\n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "ec61615c-c8ed-42bc-a626-eb1e7ac70c98",
                  "parentUUID": "71e1c1e3-f02a-47d4-8ec3-852df599ebc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 400 when missing windowCenter",
                  "fullTitle": "retrieve study-series-instances using WADO-URI windowing Should raise 400 when missing windowCenter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&windowWidth=200`,\n});\nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "5ff6c63c-d7ee-46c1-990a-c6ff23ce1cde",
                  "parentUUID": "71e1c1e3-f02a-47d4-8ec3-852df599ebc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 400 when missing windowWidth",
                  "fullTitle": "retrieve study-series-instances using WADO-URI windowing Should raise 400 when missing windowWidth",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&windowCenter=200`,\n});\nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "63b54b67-762f-4cf1-9ffc-f4a7696a0a07",
                  "parentUUID": "71e1c1e3-f02a-47d4-8ec3-852df599ebc5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec61615c-c8ed-42bc-a626-eb1e7ac70c98",
                "5ff6c63c-d7ee-46c1-990a-c6ff23ce1cde",
                "63b54b67-762f-4cf1-9ffc-f4a7696a0a07"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "3c6b76bb-69d7-43f4-b70f-7b7e5bdcfee1",
              "title": "param 'region' error cases",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\dicom-web\\WADO-URI\\retrieveInstanceWadoUri.test.js",
              "file": "\\test\\api\\dicom-web\\WADO-URI\\retrieveInstanceWadoUri.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should raise 400 (Bad Request) when region is not have complete values",
                  "fullTitle": "retrieve study-series-instances using WADO-URI param 'region' error cases Should raise 400 (Bad Request) when region is not have complete values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&region=0.1,0.1,1`,\n});\n    \nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "1fe9e9c9-6e15-4987-b80d-a24eafaa8a66",
                  "parentUUID": "3c6b76bb-69d7-43f4-b70f-7b7e5bdcfee1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 400 (Bad Request) when region is not between 0 and 1",
                  "fullTitle": "retrieve study-series-instances using WADO-URI param 'region' error cases Should raise 400 (Bad Request) when region is not between 0 and 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&region=0.1,0.1,1,100`,\n});\n    \nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "516b2219-bf5f-4bde-b511-070feadf2932",
                  "parentUUID": "3c6b76bb-69d7-43f4-b70f-7b7e5bdcfee1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 400 (Bad Request) when xMin > xMax",
                  "fullTitle": "retrieve study-series-instances using WADO-URI param 'region' error cases Should raise 400 (Bad Request) when xMin > xMax",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&region=1,0.1,0.5,1`,\n});\n    \nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "ed2201e7-4b15-4e3e-861e-0bc1067ddd66",
                  "parentUUID": "3c6b76bb-69d7-43f4-b70f-7b7e5bdcfee1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 400 (Bad Request) when yMin > yMax",
                  "fullTitle": "retrieve study-series-instances using WADO-URI param 'region' error cases Should raise 400 (Bad Request) when yMin > yMax",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&region=0.1,1,1,0.5`,\n});\n    \nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "b7312841-f390-4af3-8b44-bdd17d108991",
                  "parentUUID": "3c6b76bb-69d7-43f4-b70f-7b7e5bdcfee1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1fe9e9c9-6e15-4987-b80d-a24eafaa8a66",
                "516b2219-bf5f-4bde-b511-070feadf2932",
                "ed2201e7-4b15-4e3e-861e-0bc1067ddd66",
                "b7312841-f390-4af3-8b44-bdd17d108991"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "734669ae-e5d8-4646-af1c-ce96a1cf746c",
            "4907041c-11b0-412d-a6eb-d570660d45c9",
            "32c36d04-af6c-4664-b98d-e850a503384b",
            "c02ecc66-1719-493c-beab-accd95081a10",
            "72e86f90-c2f7-4a9f-bff7-093d488ac9d9",
            "033298d4-2686-471a-83fe-0ec1dbe8cedb",
            "e744015d-5041-4260-b067-3f4782fde511",
            "641b7f5d-1cc3-44b9-82e3-f2ba789036ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 510,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a75b3792-3e68-4af0-8f72-7142c939d8ce",
          "title": "Convert DICOM to FHIR '/fhir-convert'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\fhir-convert\\convertDicomToFhir.test.js",
          "file": "\\test\\api\\fhir-convert\\convertDicomToFhir.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Convert DICOM to FHIR '/fhir-convert'\"",
              "fullTitle": "Convert DICOM to FHIR '/fhir-convert' \"before all\" hook in \"Convert DICOM to FHIR '/fhir-convert'\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "9c8e77e3-f755-40c4-83f0-164603652bef",
              "parentUUID": "a75b3792-3e68-4af0-8f72-7142c939d8ce",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should convert DICOM to FHIR",
              "fullTitle": "Convert DICOM to FHIR '/fhir-convert' Should convert DICOM to FHIR",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const myForm = formAutoContent({\n    file: createReadStream(\n        resolve(__dirname, \"../../testData/forStore/1-01-mod-vo-updated\")\n    )\n});\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/fhir-convert\",\n    ...myForm\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.have.property(\"patient\");\nexpect(data.patient).to.have.property(\"resourceType\").to.be.equal(\"Patient\");\nexpect(data).to.have.property(\"imagingStudy\");\nexpect(data.imagingStudy).to.have.property(\"resourceType\").to.be.equal(\"ImagingStudy\");\nexpect(data).to.have.property(\"endpoint\");\nexpect(data.endpoint).to.have.property(\"resourceType\").to.be.equal(\"Endpoint\");",
              "err": {},
              "uuid": "a3bc7ea8-0104-4b75-9297-0c0117a814e4",
              "parentUUID": "a75b3792-3e68-4af0-8f72-7142c939d8ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when missing DICOM file",
              "fullTitle": "Convert DICOM to FHIR '/fhir-convert' Should raise 400 (Bad Request) when missing DICOM file",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: \"/fhir-convert\"\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "80421e9a-7561-4252-a32b-988d7a825bce",
              "parentUUID": "a75b3792-3e68-4af0-8f72-7142c939d8ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a3bc7ea8-0104-4b75-9297-0c0117a814e4",
            "80421e9a-7561-4252-a32b-988d7a825bce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "9bd48eaa-4041-4079-8d03-c710acb81350",
          "title": "Label create label for image '/label/:uid'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\label\\createLabel.test.js",
          "file": "\\test\\api\\label\\createLabel.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Label create label for image '/label/:uid'\"",
              "fullTitle": "Label create label for image '/label/:uid' \"before all\" hook in \"Label create label for image '/label/:uid'\"",
              "timedOut": false,
              "duration": 890,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "aeca6a8f-b4ef-45b3-a66e-20f990723763",
              "parentUUID": "9bd48eaa-4041-4079-8d03-c710acb81350",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create label",
              "fullTitle": "Label create label for image '/label/:uid' Should create label",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(201);\nlet createdLabel = await response.json();\nexpect(createdLabel).have.property(\"uid\").to.be.equal(STUDY_UID);\nexpect(createdLabel)\n.have.property(\"label\");\nexpect(createdLabel.label)\n.have.property(\"name\")\n.to.be.equal(\"test\");\nexpect(createdLabel.label)\n.have.property(\"color\")\n.to.be.equal(\"blue\");",
              "err": {},
              "uuid": "7d994f27-3c41-4c48-839c-5cf1994b230c",
              "parentUUID": "9bd48eaa-4041-4079-8d03-c710acb81350",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when image not found",
              "fullTitle": "Label create label for image '/label/:uid' Should raise 404 (Not Found) when image not found",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/label/${STUDY_UID}2486`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "a64b245a-cbc4-461f-8f85-80270bb3e480",
              "parentUUID": "9bd48eaa-4041-4079-8d03-c710acb81350",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when label already exists",
              "fullTitle": "Label create label for image '/label/:uid' Should raise 400 (Bad Request) when label already exists",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "13eeb178-5665-49bf-9d22-af7c3d42b792",
              "parentUUID": "9bd48eaa-4041-4079-8d03-c710acb81350",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d994f27-3c41-4c48-839c-5cf1994b230c",
            "a64b245a-cbc4-461f-8f85-80270bb3e480",
            "13eeb178-5665-49bf-9d22-af7c3d42b792"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "33b5a037-6b15-4b7f-8345-cf97bdb25746",
          "title": "Label delete label for image '/label/:uid'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\label\\deleteLabel.test.js",
          "file": "\\test\\api\\label\\deleteLabel.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Label delete label for image '/label/:uid'\"",
              "fullTitle": "Label delete label for image '/label/:uid' \"before all\" hook in \"Label delete label for image '/label/:uid'\"",
              "timedOut": false,
              "duration": 942,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(201);\nlet createdLabel = await response.json();\nlabelID = createdLabel.label.id;",
              "err": {},
              "uuid": "953cd157-73bc-4abb-a914-e5e006366c86",
              "parentUUID": "33b5a037-6b15-4b7f-8345-cf97bdb25746",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should update label",
              "fullTitle": "Label delete label for image '/label/:uid' Should update label",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/label/${STUDY_UID}/${labelID}`\n});\nexpect(response.statusCode).to.equal(200);\nlet deleteResult = await response.json();\nexpect(deleteResult).to.have.property(\"deleteStatus\").to.be.equal(true);",
              "err": {},
              "uuid": "a8b26aa1-7445-464d-8626-9fcc7c8055cf",
              "parentUUID": "33b5a037-6b15-4b7f-8345-cf97bdb25746",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when label or image not found",
              "fullTitle": "Label delete label for image '/label/:uid' Should raise 404 (Not Found) when label or image not found",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/label/${STUDY_UID}/2486`\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "db274623-c899-44d8-b167-91d943beac1a",
              "parentUUID": "33b5a037-6b15-4b7f-8345-cf97bdb25746",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8b26aa1-7445-464d-8626-9fcc7c8055cf",
            "db274623-c899-44d8-b167-91d943beac1a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3fb4d1f4-6cf8-4f74-b070-673c59c4346d",
          "title": "Label get label for image '/label/:uid'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\label\\getLabel.test.js",
          "file": "\\test\\api\\label\\getLabel.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Label get label for image '/label/:uid'\"",
              "fullTitle": "Label get label for image '/label/:uid' \"before all\" hook in \"Label get label for image '/label/:uid'\"",
              "timedOut": false,
              "duration": 1922,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});",
              "err": {},
              "uuid": "3db23019-ff2f-4a9d-b31e-32deb79eb3bb",
              "parentUUID": "3fb4d1f4-6cf8-4f74-b070-673c59c4346d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should get label by specified uid",
              "fullTitle": "Label get label for image '/label/:uid' Should get label by specified uid",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/label/${STUDY_UID}`,\n    headers: {\n        \"Accept\": \"application/json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet labels = await response.json();\nexpect(labels).to.be.an(\"array\");\nexpect(labels).have.lengthOf(1);\nlet label = labels[0];\nexpect(label).have.property(\"uid\").to.be.equal(STUDY_UID);\nexpect(label)\n.have.property(\"label\");\nexpect(label.label)\n.have.property(\"name\")\n.to.be.equal(\"test\");\nexpect(label.label)\n.have.property(\"color\")\n.to.be.equal(\"blue\");",
              "err": {},
              "uuid": "43dac0f9-808c-4da1-a91d-dbded34b9c2e",
              "parentUUID": "3fb4d1f4-6cf8-4f74-b070-673c59c4346d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "43dac0f9-808c-4da1-a91d-dbded34b9c2e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a047bd36-c344-4e85-9973-46e2bc269d36",
          "title": "Label update label for image '/label/:uid'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\api\\label\\updateLabel.test.js",
          "file": "\\test\\api\\label\\updateLabel.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Label update label for image '/label/:uid'\"",
              "fullTitle": "Label update label for image '/label/:uid' \"before all\" hook in \"Label update label for image '/label/:uid'\"",
              "timedOut": false,
              "duration": 883,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(201);\nlet createdLabel = await response.json();\nlabelID = createdLabel.label.id;",
              "err": {},
              "uuid": "7090e65c-bade-47cd-8ef6-8b9652320cc3",
              "parentUUID": "a047bd36-c344-4e85-9973-46e2bc269d36",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should update label",
              "fullTitle": "Label update label for image '/label/:uid' Should update label",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/label/${STUDY_UID}/${labelID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test-updated\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(200);\nlet updatedLabel = await response.json();\nexpect(updatedLabel).have.property(\"uid\").to.be.equal(STUDY_UID);\nexpect(updatedLabel)\n.have.property(\"label\");\nexpect(updatedLabel.label)\n.have.property(\"name\")\n.to.be.equal(\"test-updated\");\nexpect(updatedLabel.label)\n.have.property(\"color\")\n.to.be.equal(\"blue\");",
              "err": {},
              "uuid": "891301de-6d16-4459-b2b9-dc4ee5dad57f",
              "parentUUID": "a047bd36-c344-4e85-9973-46e2bc269d36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when label or image not found",
              "fullTitle": "Label update label for image '/label/:uid' Should raise 404 (Not Found) when label or image not found",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/label/${STUDY_UID}/2486`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "32a8d3fa-47af-4286-899a-5c52f094b2af",
              "parentUUID": "a047bd36-c344-4e85-9973-46e2bc269d36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "891301de-6d16-4459-b2b9-dc4ee5dad57f",
            "32a8d3fa-47af-4286-899a-5c52f094b2af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
          "title": "Delete DICOM Instances by SOPInstanceUID",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\delete.test.js",
          "file": "\\test\\delete.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete DICOM Instances by SOPInstanceUID\"",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID \"before all\" hook in \"Delete DICOM Instances by SOPInstanceUID\"",
              "timedOut": false,
              "duration": 864,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "aa957769-08d7-41aa-bb8b-2c6a65b66726",
              "parentUUID": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should raise error if not using POST 'delete-with-reason' first",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should raise error if not using POST 'delete-with-reason' first",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/${sopInstanceUid}`\n});\nexpect(response.statusCode).to.be.equal(400);",
              "err": {},
              "uuid": "270ad449-57dd-41de-a978-af77434263ed",
              "parentUUID": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) using undo delete when instance fine",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should raise 400 (Bad Request) using undo delete when instance fine",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/${sopInstanceUid}/undoDelete`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.be.equal(400);",
              "err": {},
              "uuid": "39319dc6-82d2-4b91-9a8c-d271dae9d8bf",
              "parentUUID": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) if instance not found when using 'delete-with-reason'",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should raise 404 (Not Found) if instance not found when using 'delete-with-reason'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/${sopInstanceUid}2486/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nexpect(response.statusCode).to.be.equal(404);",
              "err": {},
              "uuid": "5ddabab4-edd0-46ed-9c13-b7b0e55ae3d9",
              "parentUUID": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when using delete with param 'deleteStatus' at instance level",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should raise 400 (Bad Request) when using delete with param 'deleteStatus' at instance level",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/${sopInstanceUid}?deleteStatus=1`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nexpect(response.statusCode).to.be.equal(400);",
              "err": {},
              "uuid": "a69bad0a-0230-43bb-bb5d-7d899b2f1db4",
              "parentUUID": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete instance with reason and expect 4 instances in series",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should delete instance with reason and expect 4 instances in series",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonBySopInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(4);",
              "err": {},
              "uuid": "57d2f6f2-28eb-4230-9f0c-d28ade91f028",
              "parentUUID": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when instance already deleted with reason",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should raise 400 (Bad Request) when instance already deleted with reason",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/${sopInstanceUid}/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nexpect(response.statusCode).to.be.equal(400);",
              "err": {},
              "uuid": "a47f2b12-f9a7-48ee-ae81-b0d306f3e59a",
              "parentUUID": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should expect 3 series in study because of delete with instance",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should expect 3 series in study because of delete with instance",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"series\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(3);",
              "err": {},
              "uuid": "c7ad20ef-f538-4217-926b-e837a17d53d7",
              "parentUUID": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should expect 4 studies because of delete with instance",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should expect 4 studies because of delete with instance",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {},\n    params: {},\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"study\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(4);",
              "err": {},
              "uuid": "ca6551a1-333c-4a01-8cc4-93a461672bad",
              "parentUUID": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when using undo delete with param 'deleteStatus'",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should raise 400 (Bad Request) when using undo delete with param 'deleteStatus'",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/${sopInstanceUid}/undoDelete?deleteStatus=1`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.be.equal(400);",
              "err": {},
              "uuid": "7dcea79f-7060-4bfd-bf2a-aa8884fa9d3b",
              "parentUUID": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should undo delete instance and expect 5 instances in series",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should undo delete instance and expect 5 instances in series",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await undoDeleteBySopInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(5);",
              "err": {},
              "uuid": "d7a72894-ecbd-4bf8-ab2a-c0ed97d50710",
              "parentUUID": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should undo delete instance using study level and expect 5 instances in series",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should undo delete instance using study level and expect 5 instances in series",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonBySopInstanceUid();\nawait undoDeleteByStudyInstanceUid({ deleteStatus: 1 });\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(5);",
              "err": {},
              "uuid": "6062b256-51d9-4957-9427-afc7c3e7e011",
              "parentUUID": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should undo delete series using series level and expect 5 instances in series",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should undo delete series using series level and expect 5 instances in series",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonBySopInstanceUid();\nawait undoDeleteBySeriesInstanceUid({ deleteStatus: 1 });\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(5);",
              "err": {},
              "uuid": "11c3aab2-02a3-40bc-adc7-158af56c17d7",
              "parentUUID": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when instance not exists",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should raise 404 (Not Found) when instance not exists",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/1/series/2/instances/3/undoDelete`\n});\nexpect(response.statusCode).to.be.equal(404);",
              "err": {},
              "uuid": "78d75517-e6a0-4b89-b0a6-44b6898d8858",
              "parentUUID": "e9b7ecfa-a573-45e5-9490-71b02e5e7745",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "270ad449-57dd-41de-a978-af77434263ed",
            "39319dc6-82d2-4b91-9a8c-d271dae9d8bf",
            "5ddabab4-edd0-46ed-9c13-b7b0e55ae3d9",
            "a69bad0a-0230-43bb-bb5d-7d899b2f1db4",
            "57d2f6f2-28eb-4230-9f0c-d28ade91f028",
            "a47f2b12-f9a7-48ee-ae81-b0d306f3e59a",
            "c7ad20ef-f538-4217-926b-e837a17d53d7",
            "ca6551a1-333c-4a01-8cc4-93a461672bad",
            "7dcea79f-7060-4bfd-bf2a-aa8884fa9d3b",
            "d7a72894-ecbd-4bf8-ab2a-c0ed97d50710",
            "6062b256-51d9-4957-9427-afc7c3e7e011",
            "11c3aab2-02a3-40bc-adc7-158af56c17d7",
            "78d75517-e6a0-4b89-b0a6-44b6898d8858"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 141,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5b947f0f-2837-4770-ba76-3e5271e28f56",
          "title": "Delete DICOM Instance using specified delete status with study level",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\delete.test.js",
          "file": "\\test\\delete.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Delete DICOM Instance using specified delete status with study level\"",
              "fullTitle": "Delete DICOM Instance using specified delete status with study level \"after all\" hook in \"Delete DICOM Instance using specified delete status with study level\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await undoDeleteBySopInstanceUid();\nawait undoDeleteBySopInstanceUid();",
              "err": {},
              "uuid": "c0b3b73c-a30d-4556-8952-d52ae92fc1db",
              "parentUUID": "5b947f0f-2837-4770-ba76-3e5271e28f56",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should move instance to waiting permanently queue using specified delete status",
              "fullTitle": "Delete DICOM Instance using specified delete status with study level Should move instance to waiting permanently queue using specified delete status",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonBySopInstanceUid();\nawait deleteByStudyInstanceUid({ deleteStatus: 1 });",
              "err": {},
              "uuid": "48fa6633-436c-470f-9937-b893f9018146",
              "parentUUID": "5b947f0f-2837-4770-ba76-3e5271e28f56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 4 instances when query with delete status = 0 (NONE)",
              "fullTitle": "Delete DICOM Instance using specified delete status with study level Should return 4 instances when query with delete status = 0 (NONE)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(4);",
              "err": {},
              "uuid": "4d3612b4-977c-459c-8c41-2c1377987614",
              "parentUUID": "5b947f0f-2837-4770-ba76-3e5271e28f56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 0 instances when query with delete status = 1 (RECYCLE)",
              "fullTitle": "Delete DICOM Instance using specified delete status with study level Should return 0 instances when query with delete status = 1 (RECYCLE)",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.RECYCLE\n    },\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(0);",
              "err": {},
              "uuid": "0e8d1f90-0148-4190-b577-00306422f018",
              "parentUUID": "5b947f0f-2837-4770-ba76-3e5271e28f56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 1 instance when query with delete status = 2 (PERMANENT_QUEUE)",
              "fullTitle": "Delete DICOM Instance using specified delete status with study level Should return 1 instance when query with delete status = 2 (PERMANENT_QUEUE)",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.PERMANENT_QUEUE\n    },\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(1);",
              "err": {},
              "uuid": "ecbb536b-535e-4a69-b880-95c876f6d442",
              "parentUUID": "5b947f0f-2837-4770-ba76-3e5271e28f56",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "48fa6633-436c-470f-9937-b893f9018146",
            "4d3612b4-977c-459c-8c41-2c1377987614",
            "0e8d1f90-0148-4190-b577-00306422f018",
            "ecbb536b-535e-4a69-b880-95c876f6d442"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ca0b2e12-a14e-45d3-9796-675d65a79907",
          "title": "Delete DICOM Instances by SeriesInstanceUID",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\delete.test.js",
          "file": "\\test\\delete.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should raise error if not using POST 'delete-with-reason' first",
              "fullTitle": "Delete DICOM Instances by SeriesInstanceUID Should raise error if not using POST 'delete-with-reason' first",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}`\n});\n\nexpect(response.statusCode).to.be.equal(400);",
              "err": {},
              "uuid": "4e7aef4c-2fed-410b-8f8e-fa62c6721aa2",
              "parentUUID": "ca0b2e12-a14e-45d3-9796-675d65a79907",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete series with reason and expect 2 series in study",
              "fullTitle": "Delete DICOM Instances by SeriesInstanceUID Should delete series with reason and expect 2 series in study",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonBySeriesInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"series\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(2);",
              "err": {},
              "uuid": "1c64aa1f-9bf3-427d-905c-a00c69dff4a0",
              "parentUUID": "ca0b2e12-a14e-45d3-9796-675d65a79907",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should undo delete series and expect 3 series in study",
              "fullTitle": "Delete DICOM Instances by SeriesInstanceUID Should undo delete series and expect 3 series in study",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await undoDeleteBySeriesInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"series\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(3);",
              "err": {},
              "uuid": "8f3eec62-e036-407c-9334-734e4e8594a0",
              "parentUUID": "ca0b2e12-a14e-45d3-9796-675d65a79907",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should undo delete instances and expect 3 series in study",
              "fullTitle": "Delete DICOM Instances by SeriesInstanceUID Should undo delete instances and expect 3 series in study",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonBySeriesInstanceUid();\nawait undoDeleteBySeriesInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"series\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(3);",
              "err": {},
              "uuid": "e2affc39-d4f9-428f-bc55-7885bbf8e452",
              "parentUUID": "ca0b2e12-a14e-45d3-9796-675d65a79907",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e7aef4c-2fed-410b-8f8e-fa62c6721aa2",
            "1c64aa1f-9bf3-427d-905c-a00c69dff4a0",
            "8f3eec62-e036-407c-9334-734e4e8594a0",
            "e2affc39-d4f9-428f-bc55-7885bbf8e452"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 45,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a6b33093-2500-4f0e-9e36-f84b846ff253",
          "title": "Delete DICOM Instances by SOPInstanceUIDs",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\delete.test.js",
          "file": "\\test\\delete.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should delete all instances to recycle bin and expect 2 series",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUIDs Should delete all instances to recycle bin and expect 2 series",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (let instanceUid of instanceUidsInSeries) {\n    await deleteWithReasonBySopInstanceUid(instanceUid);\n}\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"series\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(2);",
              "err": {},
              "uuid": "3b4f2a90-176a-4c96-91e3-dac4f54a1e0b",
              "parentUUID": "a6b33093-2500-4f0e-9e36-f84b846ff253",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete all instances to waiting permanently delete using series level deletion",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUIDs Should delete all instances to waiting permanently delete using series level deletion",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteBySeriesInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.PERMANENT_QUEUE\n    },\n    params: {\n        studyUID: studyInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"series\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(1);",
              "err": {},
              "uuid": "5e978c95-cf6d-4a1c-ba8c-e259f8af3347",
              "parentUUID": "a6b33093-2500-4f0e-9e36-f84b846ff253",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3b4f2a90-176a-4c96-91e3-dac4f54a1e0b",
            "5e978c95-cf6d-4a1c-ba8c-e259f8af3347"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 65,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a5cd5156-1129-4e0f-b8dd-27c3d378c3c7",
          "title": "Delete DICOM Instances by StudyInstanceUID",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\delete.test.js",
          "file": "\\test\\delete.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete DICOM Instances by StudyInstanceUID\"",
              "fullTitle": "Delete DICOM Instances by StudyInstanceUID \"before all\" hook in \"Delete DICOM Instances by StudyInstanceUID\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// revert delete\nawait undoDeleteBySeriesInstanceUid();\nawait undoDeleteBySeriesInstanceUid();",
              "err": {},
              "uuid": "ff778794-1ba9-4854-b648-dc68fa2ab711",
              "parentUUID": "a5cd5156-1129-4e0f-b8dd-27c3d378c3c7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should raise error if not using POST 'delete-with-reason' first",
              "fullTitle": "Delete DICOM Instances by StudyInstanceUID Should raise error if not using POST 'delete-with-reason' first",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/studies/${studyInstanceUid}`\n});\nexpect(response.statusCode).to.be.equal(400);",
              "err": {},
              "uuid": "8b9fb7ba-4b69-47a2-a567-a3a4848ecf28",
              "parentUUID": "a5cd5156-1129-4e0f-b8dd-27c3d378c3c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete study with reason and expect 3 studies",
              "fullTitle": "Delete DICOM Instances by StudyInstanceUID Should delete study with reason and expect 3 studies",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonByStudyInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {},\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"study\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(3);",
              "err": {},
              "uuid": "dd1ad447-075c-49d6-8bca-94220a48e147",
              "parentUUID": "a5cd5156-1129-4e0f-b8dd-27c3d378c3c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should undo delete study and expect 4 studies",
              "fullTitle": "Delete DICOM Instances by StudyInstanceUID Should undo delete study and expect 4 studies",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await undoDeleteByStudyInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {},\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"study\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(4);",
              "err": {},
              "uuid": "8dab49f3-08a3-4027-a365-21a0163fdf27",
              "parentUUID": "a5cd5156-1129-4e0f-b8dd-27c3d378c3c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should undo delete instances and expect 4 studies",
              "fullTitle": "Delete DICOM Instances by StudyInstanceUID Should undo delete instances and expect 4 studies",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonByStudyInstanceUid();\nawait undoDeleteBySopInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {},\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"study\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(4);",
              "err": {},
              "uuid": "40b7c1cf-a932-4119-954f-59a299827ae8",
              "parentUUID": "a5cd5156-1129-4e0f-b8dd-27c3d378c3c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b9fb7ba-4b69-47a2-a567-a3a4848ecf28",
            "dd1ad447-075c-49d6-8bca-94220a48e147",
            "8dab49f3-08a3-4027-a365-21a0163fdf27",
            "40b7c1cf-a932-4119-954f-59a299827ae8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 60,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d49f00f1-b8c9-4002-b05c-1c9ea8d1431f",
          "title": "Delete Study to recycle status",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\delete.test.js",
          "file": "\\test\\delete.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete Study to recycle status\"",
              "fullTitle": "Delete Study to recycle status \"before all\" hook in \"Delete Study to recycle status\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await undoDeleteByStudyInstanceUid({ deleteStatus: 1 });",
              "err": {},
              "uuid": "d3ed54a2-0dc9-42dc-a3de-dc7342d85186",
              "parentUUID": "d49f00f1-b8c9-4002-b05c-1c9ea8d1431f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should delete with reason successfully",
              "fullTitle": "Delete Study to recycle status Should delete with reason successfully",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonByStudyInstanceUid();",
              "err": {},
              "uuid": "809d5980-8a02-46c2-849d-ef7a2011cbc4",
              "parentUUID": "d49f00f1-b8c9-4002-b05c-1c9ea8d1431f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 1 study when search with recycle status",
              "fullTitle": "Delete Study to recycle status Should return 1 study when search with recycle status",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.RECYCLE\n    },\n    params: {},\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"study\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(1);",
              "err": {},
              "uuid": "b784c385-dfb7-4821-8888-65f4275d393c",
              "parentUUID": "d49f00f1-b8c9-4002-b05c-1c9ea8d1431f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should automatically move 1 study to waiting delete status after 5 seconds",
              "fullTitle": "Delete Study to recycle status Should automatically move 1 study to waiting delete status after 5 seconds",
              "timedOut": false,
              "duration": 6004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await sleep(6000);\nlet qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.PERMANENT_QUEUE\n    },\n    params: {},\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"study\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(1);",
              "err": {},
              "uuid": "f85fc8c2-a0a0-4628-a7ee-fe670f9057da",
              "parentUUID": "d49f00f1-b8c9-4002-b05c-1c9ea8d1431f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "809d5980-8a02-46c2-849d-ef7a2011cbc4",
            "b784c385-dfb7-4821-8888-65f4275d393c",
            "f85fc8c2-a0a0-4628-a7ee-fe670f9057da"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6017,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "99e1d77f-5410-4f1a-85b6-21583c7e0fb0",
          "title": "Delete Permanently",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\delete.test.js",
          "file": "\\test\\delete.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should have files in disk before delete",
              "fullTitle": "Delete Permanently Should have files in disk before delete",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (let i = 0 ; i < instanceUidsInSeries.length ; i++) {\n    let instancePath = path.join(\n        raccoonConfig.dicomWebConfig.storeRootPath,\n        `files/2010/02/${shortHash(studyInstanceUid)}/${shortHash(seriesInstanceUid)}/${instanceUidsInSeries[i]}.dcm`\n    );\n    expect(fs.existsSync(instancePath)).to.be.true;\n}",
              "err": {},
              "uuid": "16e3b31e-4424-4132-836f-e6d44101ee32",
              "parentUUID": "99e1d77f-5410-4f1a-85b6-21583c7e0fb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have 5 instances when query before delete",
              "fullTitle": "Delete Permanently Should have 5 instances when query before delete",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.PERMANENT_QUEUE\n    },\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(5);",
              "err": {},
              "uuid": "42ae4d06-bde2-4f23-9bfe-83599452e61d",
              "parentUUID": "99e1d77f-5410-4f1a-85b6-21583c7e0fb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when instance not found",
              "fullTitle": "Delete Permanently Should raise 404 (Not Found) when instance not found",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/2486`\n});\nexpect(response.statusCode).to.be.equal(404);",
              "err": {},
              "uuid": "ec94cf28-38cc-4f26-9897-a9f0657bbf5e",
              "parentUUID": "99e1d77f-5410-4f1a-85b6-21583c7e0fb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete 4 instances permanently (total: 5)",
              "fullTitle": "Delete Permanently Should delete 4 instances permanently (total: 5)",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (let i = 0 ; i < instanceUidsInSeries.length - 1 ; i++) {\n    await deleteBySopInstanceUid(instanceUidsInSeries[i]);\n    let instancePath = path.join(\n        raccoonConfig.dicomWebConfig.storeRootPath,\n        `files/2010/02/${shortHash(studyInstanceUid)}/${shortHash(seriesInstanceUid)}/${instanceUidsInSeries[i]}.dcm`\n    );\n    expect(fs.existsSync(instancePath)).to.be.false;\n}",
              "err": {},
              "uuid": "59dc3ae2-c65b-4885-9491-f2e8f64f32d9",
              "parentUUID": "99e1d77f-5410-4f1a-85b6-21583c7e0fb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have one instance when query",
              "fullTitle": "Delete Permanently Should have one instance when query",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.PERMANENT_QUEUE\n    },\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(1);",
              "err": {},
              "uuid": "2819177e-0deb-4aee-be82-c57c59d416ba",
              "parentUUID": "99e1d77f-5410-4f1a-85b6-21583c7e0fb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete 1 instance permanently and remove series because it is empty",
              "fullTitle": "Delete Permanently Should delete 1 instance permanently and remove series because it is empty",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteBySopInstanceUid(instanceUidsInSeries[instanceUidsInSeries.length - 1]);\nlet instancePath = path.join(\n    raccoonConfig.dicomWebConfig.storeRootPath,\n    `files/2010/02/${shortHash(studyInstanceUid)}/${shortHash(seriesInstanceUid)}/${instanceUidsInSeries[instanceUidsInSeries.length - 1]}.dcm`\n);\nlet seriesPath = path.join(\n    raccoonConfig.dicomWebConfig.storeRootPath,\n    `files/2010/02/${shortHash(studyInstanceUid)}/${shortHash(seriesInstanceUid)}`\n);\nexpect(fs.existsSync(instancePath)).to.be.false;\nexpect(fs.existsSync(seriesPath)).to.be.false;",
              "err": {},
              "uuid": "59c64351-11a0-4761-bbd5-e61e3d601115",
              "parentUUID": "99e1d77f-5410-4f1a-85b6-21583c7e0fb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty when query after delete",
              "fullTitle": "Delete Permanently Should return empty when query after delete",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.NONE\n    },\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(0);\nqidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.RECYCLE\n    },\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\ndicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(0);\nqidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.PERMANENT_QUEUE\n    },\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\ndicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(0);",
              "err": {},
              "uuid": "a7a45bd6-2019-418e-8291-f814b8225fe6",
              "parentUUID": "99e1d77f-5410-4f1a-85b6-21583c7e0fb0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "16e3b31e-4424-4132-836f-e6d44101ee32",
            "42ae4d06-bde2-4f23-9bfe-83599452e61d",
            "ec94cf28-38cc-4f26-9897-a9f0657bbf5e",
            "59dc3ae2-c65b-4885-9491-f2e8f64f32d9",
            "2819177e-0deb-4aee-be82-c57c59d416ba",
            "59c64351-11a0-4761-bbd5-e61e3d601115",
            "a7a45bd6-2019-418e-8291-f814b8225fe6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "112461cb-41d3-4021-9bb4-6c956be28974",
          "title": "Series A, B, C: Delete A, Delete B, Recover A, Delete B Again",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\delete002.test.js",
          "file": "\\test\\delete002.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Series A, B, C: Delete A, Delete B, Recover A, Delete B Again\"",
              "fullTitle": "Series A, B, C: Delete A, Delete B, Recover A, Delete B Again \"before all\" hook in \"Series A, B, C: Delete A, Delete B, Recover A, Delete B Again\"",
              "timedOut": false,
              "duration": 896,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "343211da-2f88-45ba-a350-ddd28dd51a90",
              "parentUUID": "112461cb-41d3-4021-9bb4-6c956be28974",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Delete Series A",
              "fullTitle": "Series A, B, C: Delete A, Delete B, Recover A, Delete B Again Delete Series A",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await TestDeleteUtils.deleteWithReasonBySeriesInstanceUid(app, STUDY_INSTANCE_UID, SERIES_INSTANCE_UIDS[0]);\nlet deleteReason = await DicomInstanceDeleteReasonModel.findOne({\n    where: {\n        uid: SERIES_INSTANCE_UIDS[0]\n    }\n});\nexpect(deleteReason).not.to.be.null;",
              "err": {},
              "uuid": "596c023c-8237-48e5-bad4-b65bfca03f15",
              "parentUUID": "112461cb-41d3-4021-9bb4-6c956be28974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete Series B",
              "fullTitle": "Series A, B, C: Delete A, Delete B, Recover A, Delete B Again Delete Series B",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await TestDeleteUtils.deleteWithReasonBySeriesInstanceUid(app, STUDY_INSTANCE_UID, SERIES_INSTANCE_UIDS[1]);",
              "err": {},
              "uuid": "967f6483-6d12-4b5f-92e8-83919f062104",
              "parentUUID": "112461cb-41d3-4021-9bb4-6c956be28974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Recover Series A",
              "fullTitle": "Series A, B, C: Delete A, Delete B, Recover A, Delete B Again Recover Series A",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await TestDeleteUtils.undoDeleteBySeriesInstanceUid(app, STUDY_INSTANCE_UID, SERIES_INSTANCE_UIDS[0]);",
              "err": {},
              "uuid": "8358a1f7-b707-4821-97e6-36262babdf28",
              "parentUUID": "112461cb-41d3-4021-9bb4-6c956be28974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete Series B Again",
              "fullTitle": "Series A, B, C: Delete A, Delete B, Recover A, Delete B Again Delete Series B Again",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await TestDeleteUtils.deleteBySeriesInstanceUid(app, STUDY_INSTANCE_UID, SERIES_INSTANCE_UIDS[1]);",
              "err": {},
              "uuid": "aedcf8d3-6261-4842-abca-35a9484d8f90",
              "parentUUID": "112461cb-41d3-4021-9bb4-6c956be28974",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "596c023c-8237-48e5-bad4-b65bfca03f15",
            "967f6483-6d12-4b5f-92e8-83919f062104",
            "8358a1f7-b707-4821-97e6-36262babdf28",
            "aedcf8d3-6261-4842-abca-35a9484d8f90"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "cb1fc058-39bd-41de-886d-73d82569eee2",
          "title": "DIMSE C-FIND Study-Series-Instance",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindInstance.test.js",
          "file": "\\test\\dimse\\c-find\\cFindInstance.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE C-FIND Study-Series-Instance\"",
              "fullTitle": "DIMSE C-FIND Study-Series-Instance \"before all\" hook in \"DIMSE C-FIND Study-Series-Instance\"",
              "timedOut": false,
              "duration": 157,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../testData/dicomFiles/1-01-mod-vo\")\n);",
              "err": {},
              "uuid": "bec5d967-11e3-4423-a424-872a206977ff",
              "parentUUID": "cb1fc058-39bd-41de-886d-73d82569eee2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"DIMSE C-FIND Study-Series-Instance\"",
              "fullTitle": "DIMSE C-FIND Study-Series-Instance \"after all\" hook in \"DIMSE C-FIND Study-Series-Instance\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "6ad63081-c787-4fe7-a682-ba881dd553ec",
              "parentUUID": "cb1fc058-39bd-41de-886d-73d82569eee2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should find 1 instance successfully",
              "fullTitle": "DIMSE C-FIND Study-Series-Instance Should find 1 instance successfully",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nexpect(message).have.string(\"Find Response: 1 (Pending)\");\nexpect(message).not.have.string(\"Find Response: 2 (Pending)\");",
              "err": {},
              "uuid": "a0d52c4c-e20b-4a38-b31d-290e9a96b959",
              "parentUUID": "cb1fc058-39bd-41de-886d-73d82569eee2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "3d7260b3-3989-4e23-a60d-554f176102e6",
              "title": "find with a filter",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindInstance.test.js",
              "file": "\\test\\dimse\\c-find\\cFindInstance.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "1fafc64d-c2c3-44a9-b37d-86bbed647e44",
                  "title": "query instances with 'SOPClassUID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series-Instance with SOPClassUID=1.2.840.10008.5.1.4.1.1.4 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'SOPClassUID' Should find Study-Series-Instance with SOPClassUID=1.2.840.10008.5.1.4.1.1.4 and get instance successfully",
                      "timedOut": false,
                      "duration": 75,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "0784f746-ffb9-45f1-b45f-a46b0564e4e1",
                      "parentUUID": "1fafc64d-c2c3-44a9-b37d-86bbed647e44",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series-Instance with SOPClassUID=foobar and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'SOPClassUID' Should find Study-Series-Instance with SOPClassUID=foobar and get instance successfully",
                      "timedOut": false,
                      "duration": 71,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "bd43e26b-f1e5-4a6e-983c-4e29fc87e079",
                      "parentUUID": "1fafc64d-c2c3-44a9-b37d-86bbed647e44",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0784f746-ffb9-45f1-b45f-a46b0564e4e1",
                    "bd43e26b-f1e5-4a6e-983c-4e29fc87e079"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 146,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "458e124f-08c1-4a1f-9156-5bb3b09ddd0a",
                  "title": "query instances with 'SOPInstanceUID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series-Instance with SOPInstanceUID=1.2.276.0.7230010.3.1.4.2304755699.3648.1691733220.920 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'SOPInstanceUID' Should find Study-Series-Instance with SOPInstanceUID=1.2.276.0.7230010.3.1.4.2304755699.3648.1691733220.920 and get instance successfully",
                      "timedOut": false,
                      "duration": 88,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "fd7d5db6-51e6-4626-a089-322c7ccde974",
                      "parentUUID": "458e124f-08c1-4a1f-9156-5bb3b09ddd0a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series-Instance with SOPInstanceUID=foobar and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'SOPInstanceUID' Should find Study-Series-Instance with SOPInstanceUID=foobar and get instance successfully",
                      "timedOut": false,
                      "duration": 69,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "893d167b-c983-47dd-b42d-ff386ba18aac",
                      "parentUUID": "458e124f-08c1-4a1f-9156-5bb3b09ddd0a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fd7d5db6-51e6-4626-a089-322c7ccde974",
                    "893d167b-c983-47dd-b42d-ff386ba18aac"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 157,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "e6920ed4-3145-4a2a-b43b-6e6919f22072",
                  "title": "query instances with 'ContentDate",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series-Instance with ContentDate=20090721 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'ContentDate Should find Study-Series-Instance with ContentDate=20090721 and get instance successfully",
                      "timedOut": false,
                      "duration": 80,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "8b21a82a-af99-402e-9ccd-ae55add0f114",
                      "parentUUID": "e6920ed4-3145-4a2a-b43b-6e6919f22072",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series-Instance with ContentDate=20090101 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'ContentDate Should find Study-Series-Instance with ContentDate=20090101 and get instance successfully",
                      "timedOut": false,
                      "duration": 75,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "baa89622-f566-409c-ab3b-f415a5beef28",
                      "parentUUID": "e6920ed4-3145-4a2a-b43b-6e6919f22072",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8b21a82a-af99-402e-9ccd-ae55add0f114",
                    "baa89622-f566-409c-ab3b-f415a5beef28"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 155,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "81645f73-fd9d-43d3-b40a-53969773a81e",
                  "title": "query instances with 'ContentTime'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series-Instance with ContentTime=115519.159000 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'ContentTime' Should find Study-Series-Instance with ContentTime=115519.159000 and get instance successfully",
                      "timedOut": false,
                      "duration": 79,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "214838cd-d840-42f6-9373-bae2e4bb99b7",
                      "parentUUID": "81645f73-fd9d-43d3-b40a-53969773a81e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series-Instance with ContentTime=115518 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'ContentTime' Should find Study-Series-Instance with ContentTime=115518 and get instance successfully",
                      "timedOut": false,
                      "duration": 79,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "a3d71c32-e27d-4353-a3c6-d57d2e11392e",
                      "parentUUID": "81645f73-fd9d-43d3-b40a-53969773a81e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "214838cd-d840-42f6-9373-bae2e4bb99b7",
                    "a3d71c32-e27d-4353-a3c6-d57d2e11392e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 158,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "e398118c-e0f2-4395-88cf-79ef84867b54",
                  "title": "query instances with 'InstanceNumber'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series-Instance with InstanceNumber=224 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'InstanceNumber' Should find Study-Series-Instance with InstanceNumber=224 and get instance successfully",
                      "timedOut": false,
                      "duration": 82,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "18f9c491-7654-42ba-b56e-84a310285072",
                      "parentUUID": "e398118c-e0f2-4395-88cf-79ef84867b54",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series-Instance with InstanceNumber=1 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'InstanceNumber' Should find Study-Series-Instance with InstanceNumber=1 and get instance successfully",
                      "timedOut": false,
                      "duration": 74,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "f3660aa4-7253-4ba8-871c-e790f079d5b8",
                      "parentUUID": "e398118c-e0f2-4395-88cf-79ef84867b54",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "18f9c491-7654-42ba-b56e-84a310285072",
                    "f3660aa4-7253-4ba8-871c-e790f079d5b8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 156,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "a0d52c4c-e20b-4a38-b31d-290e9a96b959"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 107,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "1130efc1-c725-4125-acc6-629b607c0d77",
          "title": "DIMSE C-FIND MWL",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
          "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE C-FIND MWL\"",
              "fullTitle": "DIMSE C-FIND MWL \"before all\" hook in \"DIMSE C-FIND MWL\"",
              "timedOut": false,
              "duration": 973,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([testMwlItem])\n});",
              "err": {},
              "uuid": "bc1314f8-5696-40a8-81b8-332731239eab",
              "parentUUID": "1130efc1-c725-4125-acc6-629b607c0d77",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"DIMSE C-FIND MWL\"",
              "fullTitle": "DIMSE C-FIND MWL \"after all\" hook in \"DIMSE C-FIND MWL\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "1768738b-a56e-4c17-997c-f2d5b7a698b0",
              "parentUUID": "1130efc1-c725-4125-acc6-629b607c0d77",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should find 1 mwl successfully",
              "fullTitle": "DIMSE C-FIND MWL Should find 1 mwl successfully",
              "timedOut": false,
              "duration": 77,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", \"\");\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nexpect(message).have.string(\"Find Response: 1 (Pending)\");\nexpect(message).not.have.string(\"Find Response: 2 (Pending)\");",
              "err": {},
              "uuid": "189f8ab0-ca90-4263-9fbd-4ad7b904e5e8",
              "parentUUID": "1130efc1-c725-4125-acc6-629b607c0d77",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "1f3d5e70-3667-4fb1-8a66-50c599a8e08c",
              "title": "find with a filter",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
              "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "9fc582fe-aa42-4421-b460-f60d865e54c5",
                  "title": "query modality worklist with param 'StudyInstanceUID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with StudyInstanceUID=1.2.276.0.7230010.3.2.102 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'StudyInstanceUID' Should find modality worklist with StudyInstanceUID=1.2.276.0.7230010.3.2.102 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 68,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "c4f47df9-86dc-4aa2-aa18-57a01f7d5fab",
                      "parentUUID": "9fc582fe-aa42-4421-b460-f60d865e54c5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with StudyInstanceUID=1.2.3.4 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'StudyInstanceUID' Should find modality worklist with StudyInstanceUID=1.2.3.4 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "fe9cabe4-1256-456b-8b26-a96afbd8bbf9",
                      "parentUUID": "9fc582fe-aa42-4421-b460-f60d865e54c5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c4f47df9-86dc-4aa2-aa18-57a01f7d5fab",
                    "fe9cabe4-1256-456b-8b26-a96afbd8bbf9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 128,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "79ecc42d-25c2-445b-b4b6-50f4ed28284c",
                  "title": "query modality worklist with param 'AccessionNumber'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with AccessionNumber=acc-123456 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'AccessionNumber' Should find modality worklist with AccessionNumber=acc-123456 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 64,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "1d2c69cd-b2cd-49f8-a569-cec92fcf5744",
                      "parentUUID": "79ecc42d-25c2-445b-b4b6-50f4ed28284c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with AccessionNumber=foobar and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'AccessionNumber' Should find modality worklist with AccessionNumber=foobar and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 56,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "163a8e66-5b5e-4936-8e0c-5f574ef92071",
                      "parentUUID": "79ecc42d-25c2-445b-b4b6-50f4ed28284c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1d2c69cd-b2cd-49f8-a569-cec92fcf5744",
                    "163a8e66-5b5e-4936-8e0c-5f574ef92071"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 120,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "2de084e3-ce77-45de-bbd5-0616a98a0de8",
                  "title": "query modality worklist with param 'RequestedProcedureID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with RequestedProcedureID=RP488M9439 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'RequestedProcedureID' Should find modality worklist with RequestedProcedureID=RP488M9439 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 61,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "7842e8c0-dcc5-4701-89a6-dc506e7f628a",
                      "parentUUID": "2de084e3-ce77-45de-bbd5-0616a98a0de8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with RequestedProcedureID=foobar and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'RequestedProcedureID' Should find modality worklist with RequestedProcedureID=foobar and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 54,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "7531cc55-9dba-4478-9cd6-c2ed007998d3",
                      "parentUUID": "2de084e3-ce77-45de-bbd5-0616a98a0de8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7842e8c0-dcc5-4701-89a6-dc506e7f628a",
                    "7531cc55-9dba-4478-9cd6-c2ed007998d3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 115,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "c71a056b-5fa4-4dd8-8266-b889b75a7c5e",
                  "title": "query modality worklist with param 'AdmissionID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with AdmissionID=A-987 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'AdmissionID' Should find modality worklist with AdmissionID=A-987 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 67,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "2fa3f535-12e4-4bba-945c-fdf6894e8353",
                      "parentUUID": "c71a056b-5fa4-4dd8-8266-b889b75a7c5e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with AdmissionID=foobar and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'AdmissionID' Should find modality worklist with AdmissionID=foobar and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "053aeb4a-f180-4825-9253-38d1a01cd65c",
                      "parentUUID": "c71a056b-5fa4-4dd8-8266-b889b75a7c5e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2fa3f535-12e4-4bba-945c-fdf6894e8353",
                    "053aeb4a-f180-4825-9253-38d1a01cd65c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 126,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "db9bdf15-5073-4cef-b7fe-5f38a7890f8e",
                  "title": "query modality worklist with param 'InstitutionName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with InstitutionName=HELL and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'InstitutionName' Should find modality worklist with InstitutionName=HELL and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "28bedabd-0ee0-4e73-a092-72c172eb27e5",
                      "parentUUID": "db9bdf15-5073-4cef-b7fe-5f38a7890f8e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with InstitutionName=foobar and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'InstitutionName' Should find modality worklist with InstitutionName=foobar and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "13e894ba-d946-426d-8d30-d12e2bd7adb3",
                      "parentUUID": "db9bdf15-5073-4cef-b7fe-5f38a7890f8e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "28bedabd-0ee0-4e73-a092-72c172eb27e5",
                    "13e894ba-d946-426d-8d30-d12e2bd7adb3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 119,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "84b5408e-e131-4b53-a478-70fc18f6b686",
                  "title": "query modality worklist with param 'InstitutionalDepartmentName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with InstitutionalDepartmentName=FLOOR18 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'InstitutionalDepartmentName' Should find modality worklist with InstitutionalDepartmentName=FLOOR18 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "f148a178-b378-4a79-9985-8748d66794a6",
                      "parentUUID": "84b5408e-e131-4b53-a478-70fc18f6b686",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with InstitutionalDepartmentName=foobar and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'InstitutionalDepartmentName' Should find modality worklist with InstitutionalDepartmentName=foobar and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "c32a8420-2c70-4894-9f96-3aca96bc62c0",
                      "parentUUID": "84b5408e-e131-4b53-a478-70fc18f6b686",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f148a178-b378-4a79-9985-8748d66794a6",
                    "c32a8420-2c70-4894-9f96-3aca96bc62c0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 122,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "3b32e972-d5ba-47f9-822f-f9d72caf440d",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledStationAETitle'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationAETitle=WORKLIST and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledStationAETitle' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationAETitle=WORKLIST and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 62,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "d6cce945-44ad-45e4-90f2-c616ea504a85",
                      "parentUUID": "3b32e972-d5ba-47f9-822f-f9d72caf440d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationAETitle=foobar and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledStationAETitle' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationAETitle=foobar and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "baf31008-5312-4844-9862-f51f9366e859",
                      "parentUUID": "3b32e972-d5ba-47f9-822f-f9d72caf440d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d6cce945-44ad-45e4-90f2-c616ea504a85",
                    "baf31008-5312-4844-9862-f51f9366e859"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 122,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "97fc3987-2324-4722-ade0-5d1d58d042e8",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledStationName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationName=GG and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledStationName' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationName=GG and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "df762ac9-aec2-4898-9299-a93754bf48b4",
                      "parentUUID": "97fc3987-2324-4722-ade0-5d1d58d042e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationName=foobar and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledStationName' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationName=foobar and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "6e804cfe-02cd-4365-8459-5b833e870c5d",
                      "parentUUID": "97fc3987-2324-4722-ade0-5d1d58d042e8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "df762ac9-aec2-4898-9299-a93754bf48b4",
                    "6e804cfe-02cd-4365-8459-5b833e870c5d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 122,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "cc6f9ad8-21ef-414b-90c1-9fd76f0ef165",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartDate'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartDate=20231021 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartDate' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartDate=20231021 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 175,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "60377b45-ce4d-4f6b-a54c-36409cf646e2",
                      "parentUUID": "cc6f9ad8-21ef-414b-90c1-9fd76f0ef165",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartDate=19990101 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartDate' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartDate=19990101 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 61,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "83e29f21-4781-44b7-a830-179f978c07c5",
                      "parentUUID": "cc6f9ad8-21ef-414b-90c1-9fd76f0ef165",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "60377b45-ce4d-4f6b-a54c-36409cf646e2",
                    "83e29f21-4781-44b7-a830-179f978c07c5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 236,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "c9544c44-6653-4a2d-890a-762e04f85bec",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndDate'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndDate=20231212 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndDate' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndDate=20231212 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "48d7dd3e-e226-43b1-a9c9-aff0993fce71",
                      "parentUUID": "c9544c44-6653-4a2d-890a-762e04f85bec",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndDate=19990101 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndDate' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndDate=19990101 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "9ea0e475-e2fc-42d7-a1ff-55ec67918737",
                      "parentUUID": "c9544c44-6653-4a2d-890a-762e04f85bec",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "48d7dd3e-e226-43b1-a9c9-aff0993fce71",
                    "9ea0e475-e2fc-42d7-a1ff-55ec67918737"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 120,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "0fb3750a-1ef7-443d-8fa1-864c9f8bec5d",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartTime'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartTime=003525.475 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartTime' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartTime=003525.475 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 66,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "cc000499-a2b0-473b-b3d6-2e817497e518",
                      "parentUUID": "0fb3750a-1ef7-443d-8fa1-864c9f8bec5d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartTime=003525 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartTime' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartTime=003525 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "5a5077e0-3e4f-4a6e-8908-cdb62525e059",
                      "parentUUID": "0fb3750a-1ef7-443d-8fa1-864c9f8bec5d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cc000499-a2b0-473b-b3d6-2e817497e518",
                    "5a5077e0-3e4f-4a6e-8908-cdb62525e059"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 125,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "1124e055-7b15-4415-b116-74e251caebaa",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndTime'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndTime=123525.475 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndTime' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndTime=123525.475 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 69,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "cec12ed0-3be7-428e-b7ce-edcb2a041bf1",
                      "parentUUID": "1124e055-7b15-4415-b116-74e251caebaa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndTime=003525 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndTime' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndTime=003525 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 61,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "afa4e768-a13f-44ca-a6fc-55228caaf412",
                      "parentUUID": "1124e055-7b15-4415-b116-74e251caebaa",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cec12ed0-3be7-428e-b7ce-edcb2a041bf1",
                    "afa4e768-a13f-44ca-a6fc-55228caaf412"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 130,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "d73017b1-e185-4f70-b422-9eb1271c38b0",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledPerformingPhysicianName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledPerformingPhysicianName=ENT00373 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledPerformingPhysicianName' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledPerformingPhysicianName=ENT00373 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 58,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "d95da902-6409-4750-b0bc-dfed34386a98",
                      "parentUUID": "d73017b1-e185-4f70-b422-9eb1271c38b0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledPerformingPhysicianName=ENT123 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledPerformingPhysicianName' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledPerformingPhysicianName=ENT123 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 61,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "1fd92527-eda7-49c2-8b63-961b1b39d012",
                      "parentUUID": "d73017b1-e185-4f70-b422-9eb1271c38b0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d95da902-6409-4750-b0bc-dfed34386a98",
                    "1fd92527-eda7-49c2-8b63-961b1b39d012"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 119,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "e4162c9a-f62f-4c5f-a1b1-f5c78f3c73f1",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepDescription'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepDescription=EXAM-DESC and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepDescription' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepDescription=EXAM-DESC and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 187,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "8c5bfa00-18c8-48b0-b854-a3bd2360a2b2",
                      "parentUUID": "e4162c9a-f62f-4c5f-a1b1-f5c78f3c73f1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepDescription=ENT123 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepDescription' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepDescription=ENT123 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "80951142-f901-4582-94de-d037a133a139",
                      "parentUUID": "e4162c9a-f62f-4c5f-a1b1-f5c78f3c73f1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8c5bfa00-18c8-48b0-b854-a3bd2360a2b2",
                    "80951142-f901-4582-94de-d037a133a139"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 250,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "76667426-a97c-449d-a9fc-7dc97339111b",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepID=SPS-00000002 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepID' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepID=SPS-00000002 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 71,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "984cdf32-da67-4fb2-aac1-2677bc7e7fe7",
                      "parentUUID": "76667426-a97c-449d-a9fc-7dc97339111b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepID=ENT123 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepID' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepID=ENT123 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 172,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "ea068a25-19e8-4d36-87a0-480dfb5e648f",
                      "parentUUID": "76667426-a97c-449d-a9fc-7dc97339111b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "984cdf32-da67-4fb2-aac1-2677bc7e7fe7",
                    "ea068a25-19e8-4d36-87a0-480dfb5e648f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 243,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "3c54ae5a-ad96-49b1-a2db-693be2daf713",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStatus'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStatus=SCHEDULED and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStatus' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStatus=SCHEDULED and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 64,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "00d4c8f8-ee97-486b-a82a-122e36868159",
                      "parentUUID": "3c54ae5a-ad96-49b1-a2db-693be2daf713",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStatus=COMPLETED and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStatus' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStatus=COMPLETED and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 58,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "4cd87cba-c7f3-4704-bd51-bea05afbaeb1",
                      "parentUUID": "3c54ae5a-ad96-49b1-a2db-693be2daf713",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "00d4c8f8-ee97-486b-a82a-122e36868159",
                    "4cd87cba-c7f3-4704-bd51-bea05afbaeb1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 122,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "189f8ab0-ca90-4263-9fbd-4ad7b904e5e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 77,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "db6db208-8569-49b6-93b0-2d75757aeeb6",
          "title": "DIMSE C-FIND Patient",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindPatient.test.js",
          "file": "\\test\\dimse\\c-find\\cFindPatient.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE C-FIND Patient\"",
              "fullTitle": "DIMSE C-FIND Patient \"before all\" hook in \"DIMSE C-FIND Patient\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/patients\",\n    body: testPatient\n});",
              "err": {},
              "uuid": "00a364da-dbd1-4baa-a42c-05c65302e0fd",
              "parentUUID": "db6db208-8569-49b6-93b0-2d75757aeeb6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should find patients",
              "fullTitle": "DIMSE C-FIND Patient Should find patients",
              "timedOut": false,
              "duration": 58,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel();\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nexpect(message).have.string(\"Find Response: 1 (Pending)\");\nexpect(message).not.have.string(\"Find Response: 2 (Pending)\");",
              "err": {},
              "uuid": "3dbbe63f-ccbf-46f9-a581-6cb1006b1589",
              "parentUUID": "db6db208-8569-49b6-93b0-2d75757aeeb6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5592b9f9-e0a8-4f11-854c-bf508988a3a3",
              "title": "find with a filter",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindPatient.test.js",
              "file": "\\test\\dimse\\c-find\\cFindPatient.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "fdb53296-f6b4-45fd-98c3-975ba1a85d88",
                  "title": "find with filter 'PatientName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindPatient.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindPatient.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find patient with PatientName=\"John^Doe\" and get patient successfully",
                      "fullTitle": "DIMSE C-FIND Patient find with a filter find with filter 'PatientName' Should find patient with PatientName=\"John^Doe\" and get patient successfully",
                      "timedOut": false,
                      "duration": 58,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "1a699899-3407-4787-9664-d04326d3e26d",
                      "parentUUID": "fdb53296-f6b4-45fd-98c3-975ba1a85d88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find patient with PatientName=foo and get patient successfully",
                      "fullTitle": "DIMSE C-FIND Patient find with a filter find with filter 'PatientName' Should find patient with PatientName=foo and get patient successfully",
                      "timedOut": false,
                      "duration": 57,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "19edba13-9393-4036-8259-e09698ba4e4d",
                      "parentUUID": "fdb53296-f6b4-45fd-98c3-975ba1a85d88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find patients with filter 'PatientName=John*&PatientName=*Doe' and get 1 patient successfully",
                      "fullTitle": "DIMSE C-FIND Patient find with a filter find with filter 'PatientName' Should find patients with filter 'PatientName=John*&PatientName=*Doe' and get 1 patient successfully",
                      "timedOut": false,
                      "duration": 65,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel()\n    .addKeyAndValue(\"PatientName\", \"John*\")\n    .addKeyAndValue(\"PatientName\", \"*Doe\");\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nexpect(message).have.string(\"Find Response: 1 (Pending)\");\nexpect(message).not.have.string(\"Find Response: 2 (Pending)\");",
                      "err": {},
                      "uuid": "df6ddddd-9b5e-4b54-bbbc-dcc01be891aa",
                      "parentUUID": "fdb53296-f6b4-45fd-98c3-975ba1a85d88",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1a699899-3407-4787-9664-d04326d3e26d",
                    "19edba13-9393-4036-8259-e09698ba4e4d",
                    "df6ddddd-9b5e-4b54-bbbc-dcc01be891aa"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 180,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "bbac6fcc-6a85-4a75-a8e6-d8ad7a4fce52",
                  "title": "find with filter 'PatientID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindPatient.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindPatient.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find patient with PatientID=12345 and get patient successfully",
                      "fullTitle": "DIMSE C-FIND Patient find with a filter find with filter 'PatientID' Should find patient with PatientID=12345 and get patient successfully",
                      "timedOut": false,
                      "duration": 159,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "3b3a04e6-93b8-4822-8b0a-d38654130fb4",
                      "parentUUID": "bbac6fcc-6a85-4a75-a8e6-d8ad7a4fce52",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find patient with PatientID=foo and get patient successfully",
                      "fullTitle": "DIMSE C-FIND Patient find with a filter find with filter 'PatientID' Should find patient with PatientID=foo and get patient successfully",
                      "timedOut": false,
                      "duration": 54,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "0eaa3daf-8643-43b2-a975-68ddac8bd155",
                      "parentUUID": "bbac6fcc-6a85-4a75-a8e6-d8ad7a4fce52",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3b3a04e6-93b8-4822-8b0a-d38654130fb4",
                    "0eaa3daf-8643-43b2-a975-68ddac8bd155"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 213,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "4a0b9969-8a22-4afe-89d4-6eab94926c34",
                  "title": "find with filter 'PatientBirthDate'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindPatient.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindPatient.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find patient with PatientBirthDate=19800101 and get patient successfully",
                      "fullTitle": "DIMSE C-FIND Patient find with a filter find with filter 'PatientBirthDate' Should find patient with PatientBirthDate=19800101 and get patient successfully",
                      "timedOut": false,
                      "duration": 164,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "13eaa623-0a8f-43d3-b660-5c28209204b0",
                      "parentUUID": "4a0b9969-8a22-4afe-89d4-6eab94926c34",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find patient with PatientBirthDate=19800102 and get patient successfully",
                      "fullTitle": "DIMSE C-FIND Patient find with a filter find with filter 'PatientBirthDate' Should find patient with PatientBirthDate=19800102 and get patient successfully",
                      "timedOut": false,
                      "duration": 59,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "60bbf48d-aa99-48b8-b663-b814a5b8415f",
                      "parentUUID": "4a0b9969-8a22-4afe-89d4-6eab94926c34",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "13eaa623-0a8f-43d3-b660-5c28209204b0",
                    "60bbf48d-aa99-48b8-b663-b814a5b8415f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 223,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "3dbbe63f-ccbf-46f9-a581-6cb1006b1589"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 58,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "4285160a-d752-4e50-b855-24ba59729af6",
          "title": "DIMSE C-FIND Study-Series",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindSeries.test.js",
          "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE C-FIND Study-Series\"",
              "fullTitle": "DIMSE C-FIND Study-Series \"before all\" hook in \"DIMSE C-FIND Study-Series\"",
              "timedOut": false,
              "duration": 45,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../testData/dicomFiles/1-01-mod-vo\")\n);",
              "err": {},
              "uuid": "aed0d77e-36c6-4a4b-af06-004d5da1e435",
              "parentUUID": "4285160a-d752-4e50-b855-24ba59729af6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"DIMSE C-FIND Study-Series\"",
              "fullTitle": "DIMSE C-FIND Study-Series \"after all\" hook in \"DIMSE C-FIND Study-Series\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "f43ab05c-efb4-4beb-8cc6-047ae98d1af7",
              "parentUUID": "4285160a-d752-4e50-b855-24ba59729af6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should find 1 series successfully",
              "fullTitle": "DIMSE C-FIND Study-Series Should find 1 series successfully",
              "timedOut": false,
              "duration": 66,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nexpect(message).have.string(\"Find Response: 1 (Pending)\");\nexpect(message).not.have.string(\"Find Response: 2 (Pending)\");",
              "err": {},
              "uuid": "4426b366-009d-40cd-ba5c-c5bd664878fa",
              "parentUUID": "4285160a-d752-4e50-b855-24ba59729af6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "9d8fe8a3-5f82-423e-9b87-580ead3c43fd",
              "title": "find with a filter",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindSeries.test.js",
              "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "9e144094-f5de-42ea-9163-f01432708afd",
                  "title": "query study-series with param 'Modality'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series with Modality=MR and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'Modality' Should find Study-Series with Modality=MR and get series successfully",
                      "timedOut": false,
                      "duration": 77,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "1fff321c-0918-4943-8d34-839129e1001c",
                      "parentUUID": "9e144094-f5de-42ea-9163-f01432708afd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with Modality=DOC and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'Modality' Should find Study-Series with Modality=DOC and get series successfully",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "7b17d580-bb5a-442e-b54b-f3b42605fc54",
                      "parentUUID": "9e144094-f5de-42ea-9163-f01432708afd",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1fff321c-0918-4943-8d34-839129e1001c",
                    "7b17d580-bb5a-442e-b54b-f3b42605fc54"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 140,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "7f741b3b-d1eb-434f-b5c4-a43f61d15bf5",
                  "title": "query study-series with param 'SeriesInstanceUID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series with SeriesInstanceUID=1.3.6.1.4.1.14519.5.2.1.62266640231940987006694557463549207147 and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesInstanceUID' Should find Study-Series with SeriesInstanceUID=1.3.6.1.4.1.14519.5.2.1.62266640231940987006694557463549207147 and get series successfully",
                      "timedOut": false,
                      "duration": 70,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "c781c963-00ce-46cb-b7e3-01188bfa1056",
                      "parentUUID": "7f741b3b-d1eb-434f-b5c4-a43f61d15bf5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with SeriesInstanceUID=123456 and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesInstanceUID' Should find Study-Series with SeriesInstanceUID=123456 and get series successfully",
                      "timedOut": false,
                      "duration": 68,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "9e43d7ad-3131-4a0f-ba3c-77731d6d10e9",
                      "parentUUID": "7f741b3b-d1eb-434f-b5c4-a43f61d15bf5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c781c963-00ce-46cb-b7e3-01188bfa1056",
                    "9e43d7ad-3131-4a0f-ba3c-77731d6d10e9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 138,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "04d0d5c9-783a-43da-8acc-845cb914c7f2",
                  "title": "query study-series with param 'SeriesNumber'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series with SeriesNumber=13 and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesNumber' Should find Study-Series with SeriesNumber=13 and get series successfully",
                      "timedOut": false,
                      "duration": 65,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "4d62899d-8b6e-45f2-b8b9-be9a69d00c8d",
                      "parentUUID": "04d0d5c9-783a-43da-8acc-845cb914c7f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with SeriesNumber=1 and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesNumber' Should find Study-Series with SeriesNumber=1 and get series successfully",
                      "timedOut": false,
                      "duration": 71,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "d8cec0cf-ae47-4a3f-9bda-4ef6bc888d8a",
                      "parentUUID": "04d0d5c9-783a-43da-8acc-845cb914c7f2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4d62899d-8b6e-45f2-b8b9-be9a69d00c8d",
                    "d8cec0cf-ae47-4a3f-9bda-4ef6bc888d8a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 136,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "bc29f62d-53fe-4e47-9c23-eebad024b97f",
                  "title": "query study-series with param 'SeriesDate'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series with SeriesDate=20090721 and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesDate' Should find Study-Series with SeriesDate=20090721 and get series successfully",
                      "timedOut": false,
                      "duration": 74,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "5f1baec0-33a7-44fd-b928-2fa634e18514",
                      "parentUUID": "bc29f62d-53fe-4e47-9c23-eebad024b97f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with SeriesDate=19990101 and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesDate' Should find Study-Series with SeriesDate=19990101 and get series successfully",
                      "timedOut": false,
                      "duration": 181,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "eaa93f62-b309-49d6-83c7-f9a431416806",
                      "parentUUID": "bc29f62d-53fe-4e47-9c23-eebad024b97f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5f1baec0-33a7-44fd-b928-2fa634e18514",
                    "eaa93f62-b309-49d6-83c7-f9a431416806"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 255,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "9f248323-ff99-4a27-967d-ec159479f4f5",
                  "title": "query study-series with param 'SeriesDescription'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series with SeriesDescription=*BRAIN* and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesDescription' Should find Study-Series with SeriesDescription=*BRAIN* and get series successfully",
                      "timedOut": false,
                      "duration": 66,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "14efc21a-ffe3-48e3-ae27-bedb83f0215d",
                      "parentUUID": "9f248323-ff99-4a27-967d-ec159479f4f5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with SeriesDescription=*Capture* and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesDescription' Should find Study-Series with SeriesDescription=*Capture* and get series successfully",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "61353f85-446d-4a16-9629-4f8ceef4f8ad",
                      "parentUUID": "9f248323-ff99-4a27-967d-ec159479f4f5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "14efc21a-ffe3-48e3-ae27-bedb83f0215d",
                    "61353f85-446d-4a16-9629-4f8ceef4f8ad"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 129,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "83643ec3-6085-4dd9-89c5-1c7ff41a78d2",
                  "title": "query series with param 'PerformingPhysicianName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series with PerformingPhysicianName=cName and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query series with param 'PerformingPhysicianName' Should find Study-Series with PerformingPhysicianName=cName and get series successfully",
                      "timedOut": false,
                      "duration": 72,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "999fcc07-5f4a-4247-9a99-dd9d675564f8",
                      "parentUUID": "83643ec3-6085-4dd9-89c5-1c7ff41a78d2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with PerformingPhysicianName=dName and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query series with param 'PerformingPhysicianName' Should find Study-Series with PerformingPhysicianName=dName and get series successfully",
                      "timedOut": false,
                      "duration": 173,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "73ce9bb2-02c5-433e-bebf-d5b25e6181e8",
                      "parentUUID": "83643ec3-6085-4dd9-89c5-1c7ff41a78d2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with PerformingPhysicianName=foobar and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query series with param 'PerformingPhysicianName' Should find Study-Series with PerformingPhysicianName=foobar and get series successfully",
                      "timedOut": false,
                      "duration": 66,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "3b39c097-70ab-4cf6-aff4-f7840cdd5182",
                      "parentUUID": "83643ec3-6085-4dd9-89c5-1c7ff41a78d2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "999fcc07-5f4a-4247-9a99-dd9d675564f8",
                    "73ce9bb2-02c5-433e-bebf-d5b25e6181e8",
                    "3b39c097-70ab-4cf6-aff4-f7840cdd5182"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 311,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "6e7aefee-846c-4fe6-962a-86ba32090e40",
                  "title": "query series with param 'OperatorsName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series with OperatorsName=pyName and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query series with param 'OperatorsName' Should find Study-Series with OperatorsName=pyName and get series successfully",
                      "timedOut": false,
                      "duration": 72,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "eb6cc50c-6fe0-47dc-82fa-80e0e1c23a78",
                      "parentUUID": "6e7aefee-846c-4fe6-962a-86ba32090e40",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with OperatorsName=py and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query series with param 'OperatorsName' Should find Study-Series with OperatorsName=py and get series successfully",
                      "timedOut": false,
                      "duration": 69,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "eb14c686-4675-4839-923f-cdcb4cea6174",
                      "parentUUID": "6e7aefee-846c-4fe6-962a-86ba32090e40",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with OperatorsName=foobar and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query series with param 'OperatorsName' Should find Study-Series with OperatorsName=foobar and get series successfully",
                      "timedOut": false,
                      "duration": 172,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "e6d7f634-77b3-4f14-92cc-0c8fb5867dbf",
                      "parentUUID": "6e7aefee-846c-4fe6-962a-86ba32090e40",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "eb6cc50c-6fe0-47dc-82fa-80e0e1c23a78",
                    "eb14c686-4675-4839-923f-cdcb4cea6174",
                    "e6d7f634-77b3-4f14-92cc-0c8fb5867dbf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 313,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "4426b366-009d-40cd-ba5c-c5bd664878fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 66,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "91560698-a1b0-4381-a0f1-0a65fb6dabc7",
          "title": "DIMSE C-FIND Study",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindStudy.test.js",
          "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE C-FIND Study\"",
              "fullTitle": "DIMSE C-FIND Study \"before all\" hook in \"DIMSE C-FIND Study\"",
              "timedOut": false,
              "duration": 887,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "c8cd873f-4363-4895-9540-4dd8011fde26",
              "parentUUID": "91560698-a1b0-4381-a0f1-0a65fb6dabc7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"DIMSE C-FIND Study\"",
              "fullTitle": "DIMSE C-FIND Study \"after all\" hook in \"DIMSE C-FIND Study\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "b8d1973c-f8fc-4891-a99e-21193f65d034",
              "parentUUID": "91560698-a1b0-4381-a0f1-0a65fb6dabc7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should find 4 studies successfully",
              "fullTitle": "DIMSE C-FIND Study Should find 4 studies successfully",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nexpect(message).have.string(\"Find Response: 4 (Pending)\");\nexpect(message).not.have.string(\"Find Response: 5 (Pending)\");",
              "err": {},
              "uuid": "035dc9c6-4856-420b-939f-980df599c53d",
              "parentUUID": "91560698-a1b0-4381-a0f1-0a65fb6dabc7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "0418f005-d5de-4140-94ba-c11b23718136",
              "title": "find with a filter",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindStudy.test.js",
              "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "2db358d3-c464-4218-bc62-228646d865e7",
                  "title": "find with filter 'StudyDate'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with StudyDate=20100213 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyDate' Should find Study with StudyDate=20100213 and get study successfully",
                      "timedOut": false,
                      "duration": 76,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "6c6e3cba-728e-4f72-9cc1-515cfa710a27",
                      "parentUUID": "2db358d3-c464-4218-bc62-228646d865e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyDate=-20100213 and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyDate' Should find Study with StudyDate=-20100213 and get studies successfully",
                      "timedOut": false,
                      "duration": 95,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "a02b0292-ad00-4e66-9463-78a199da5d8f",
                      "parentUUID": "2db358d3-c464-4218-bc62-228646d865e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyDate=20100101- and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyDate' Should find Study with StudyDate=20100101- and get studies successfully",
                      "timedOut": false,
                      "duration": 194,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "d37983f7-43e3-425c-ae4d-eae9c9fa4785",
                      "parentUUID": "2db358d3-c464-4218-bc62-228646d865e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyDate=20100212-20181031 and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyDate' Should find Study with StudyDate=20100212-20181031 and get studies successfully",
                      "timedOut": false,
                      "duration": 99,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "afd70141-6707-473a-99a0-13f04205fd05",
                      "parentUUID": "2db358d3-c464-4218-bc62-228646d865e7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6c6e3cba-728e-4f72-9cc1-515cfa710a27",
                    "a02b0292-ad00-4e66-9463-78a199da5d8f",
                    "d37983f7-43e3-425c-ae4d-eae9c9fa4785",
                    "afd70141-6707-473a-99a0-13f04205fd05"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 464,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "d7390dae-cc2c-4b47-86d0-44db35fe98de",
                  "title": "find with filter 'StudyTime'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with StudyTime=170922 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyTime' Should find Study with StudyTime=170922 and get study successfully",
                      "timedOut": false,
                      "duration": 82,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "3d4def4e-f5e9-4316-bfb9-8bc0e1c7fe4a",
                      "parentUUID": "d7390dae-cc2c-4b47-86d0-44db35fe98de",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyTime=-170922 and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyTime' Should find Study with StudyTime=-170922 and get studies successfully",
                      "timedOut": false,
                      "duration": 93,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "3e853693-2ae3-4538-bcfa-c5f82417546e",
                      "parentUUID": "d7390dae-cc2c-4b47-86d0-44db35fe98de",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyTime=150000- and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyTime' Should find Study with StudyTime=150000- and get studies successfully",
                      "timedOut": false,
                      "duration": 78,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "d32a0bf3-b81d-49eb-81a0-134e0adadf9a",
                      "parentUUID": "d7390dae-cc2c-4b47-86d0-44db35fe98de",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyTime=130000-160000 and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyTime' Should find Study with StudyTime=130000-160000 and get studies successfully",
                      "timedOut": false,
                      "duration": 80,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "3ead625d-4f94-4605-9126-fbe3fd9393f7",
                      "parentUUID": "d7390dae-cc2c-4b47-86d0-44db35fe98de",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3d4def4e-f5e9-4316-bfb9-8bc0e1c7fe4a",
                    "3e853693-2ae3-4538-bcfa-c5f82417546e",
                    "d32a0bf3-b81d-49eb-81a0-134e0adadf9a",
                    "3ead625d-4f94-4605-9126-fbe3fd9393f7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 333,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "cc3d8ddf-be1d-4cd8-8f26-5a9c1bf734c9",
                  "title": "find with filter 'AccessionNumber'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with AccessionNumber=3266660953883852 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'AccessionNumber' Should find Study with AccessionNumber=3266660953883852 and get study successfully",
                      "timedOut": false,
                      "duration": 94,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "fef1b0ab-17f7-4f43-9535-91bd6f60bdc0",
                      "parentUUID": "cc3d8ddf-be1d-4cd8-8f26-5a9c1bf734c9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with AccessionNumber=123456 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'AccessionNumber' Should find Study with AccessionNumber=123456 and get study successfully",
                      "timedOut": false,
                      "duration": 74,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "0b1e712c-43d5-4f91-a9f7-791900b6525c",
                      "parentUUID": "cc3d8ddf-be1d-4cd8-8f26-5a9c1bf734c9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fef1b0ab-17f7-4f43-9535-91bd6f60bdc0",
                    "0b1e712c-43d5-4f91-a9f7-791900b6525c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 168,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "26acb822-a8b6-4e7d-8086-0a83d9eef154",
                  "title": "find with filter 'ModalitiesInStudy'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with ModalitiesInStudy=CT and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'ModalitiesInStudy' Should find Study with ModalitiesInStudy=CT and get studies successfully",
                      "timedOut": false,
                      "duration": 92,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "b6377489-0206-4d12-8c26-c116af2bec9e",
                      "parentUUID": "26acb822-a8b6-4e7d-8086-0a83d9eef154",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with ModalitiesInStudy=DOC and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'ModalitiesInStudy' Should find Study with ModalitiesInStudy=DOC and get study successfully",
                      "timedOut": false,
                      "duration": 77,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "79bc0e52-a4fa-47a9-a79a-751a41bc5aba",
                      "parentUUID": "26acb822-a8b6-4e7d-8086-0a83d9eef154",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b6377489-0206-4d12-8c26-c116af2bec9e",
                    "79bc0e52-a4fa-47a9-a79a-751a41bc5aba"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 169,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "a8ca001e-de59-4f53-ad38-df916a64beba",
                  "title": "query studies with param 'PatientName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with PatientName=\"Philips^Amy\" and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'PatientName' Should find Study with PatientName=\"Philips^Amy\" and get study successfully",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "310acad4-4371-41e6-b3f1-a2f8b24e1b5e",
                      "parentUUID": "a8ca001e-de59-4f53-ad38-df916a64beba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with PatientName=\"Philips*\" and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'PatientName' Should find Study with PatientName=\"Philips*\" and get study successfully",
                      "timedOut": false,
                      "duration": 70,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "11165958-18dd-4d54-8b6c-dd05a92f5712",
                      "parentUUID": "a8ca001e-de59-4f53-ad38-df916a64beba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with PatientName=\"foobar\" and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'PatientName' Should find Study with PatientName=\"foobar\" and get study successfully",
                      "timedOut": false,
                      "duration": 58,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "397eb573-d832-4399-a0a0-7d7da97fc2a6",
                      "parentUUID": "a8ca001e-de59-4f53-ad38-df916a64beba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find studies with filter 'PatientName=Philips*&PatientName=*Amy' and get 1 study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'PatientName' Should find studies with filter 'PatientName=Philips*&PatientName=*Amy' and get 1 study successfully",
                      "timedOut": false,
                      "duration": 67,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel()\n    .addKeyAndValue(\"PatientName\", `\"Philips*\"`)\n    .addKeyAndValue(\"PatientName\", `\"*Amy\"`);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nexpect(message).have.string(\"Find Response: 1 (Pending)\");\nexpect(message).not.have.string(\"Find Response: 2 (Pending)\");",
                      "err": {},
                      "uuid": "46d2a90f-fd8b-47bc-9a38-b30ec03d6307",
                      "parentUUID": "a8ca001e-de59-4f53-ad38-df916a64beba",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "310acad4-4371-41e6-b3f1-a2f8b24e1b5e",
                    "11165958-18dd-4d54-8b6c-dd05a92f5712",
                    "397eb573-d832-4399-a0a0-7d7da97fc2a6",
                    "46d2a90f-fd8b-47bc-9a38-b30ec03d6307"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 258,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "544f3436-4b2a-4ca8-bcfe-e548e651b699",
                  "title": "query studies with param 'PatientID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with PatientID=123456 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'PatientID' Should find Study with PatientID=123456 and get study successfully",
                      "timedOut": false,
                      "duration": 78,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "9a3398a6-8d19-43a8-87bf-725bbde6ab9c",
                      "parentUUID": "544f3436-4b2a-4ca8-bcfe-e548e651b699",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with PatientID=C3* and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'PatientID' Should find Study with PatientID=C3* and get studies successfully",
                      "timedOut": false,
                      "duration": 77,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "72cfb08a-7b8a-48ac-bee0-cd02392a00f8",
                      "parentUUID": "544f3436-4b2a-4ca8-bcfe-e548e651b699",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with PatientID=foobar and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'PatientID' Should find Study with PatientID=foobar and get study successfully",
                      "timedOut": false,
                      "duration": 50,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "1412fe44-00ef-4f76-bd5f-2603a22e4406",
                      "parentUUID": "544f3436-4b2a-4ca8-bcfe-e548e651b699",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9a3398a6-8d19-43a8-87bf-725bbde6ab9c",
                    "72cfb08a-7b8a-48ac-bee0-cd02392a00f8",
                    "1412fe44-00ef-4f76-bd5f-2603a22e4406"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 205,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "de7be39f-2735-4540-91e4-c6505dbf1636",
                  "title": "query studies with param 'StudyInstanceUID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596634768 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'StudyInstanceUID' Should find Study with StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596634768 and get study successfully",
                      "timedOut": false,
                      "duration": 75,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "c2a07ddf-ef49-4a4b-a0f2-db1898b8e386",
                      "parentUUID": "de7be39f-2735-4540-91e4-c6505dbf1636",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596123456 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'StudyInstanceUID' Should find Study with StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596123456 and get study successfully",
                      "timedOut": false,
                      "duration": 70,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "a596dc35-d19a-4901-8813-daecc1ad67d1",
                      "parentUUID": "de7be39f-2735-4540-91e4-c6505dbf1636",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c2a07ddf-ef49-4a4b-a0f2-db1898b8e386",
                    "a596dc35-d19a-4901-8813-daecc1ad67d1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 145,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "432ab6d8-d46d-4c47-8cce-67271ee1a4d2",
                  "title": "query studies with param 'StudyID'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with StudyID=D18-1001 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'StudyID' Should find Study with StudyID=D18-1001 and get study successfully",
                      "timedOut": false,
                      "duration": 191,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "c59e7d80-fa43-4804-836a-18049273af1c",
                      "parentUUID": "432ab6d8-d46d-4c47-8cce-67271ee1a4d2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyID=foo and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'StudyID' Should find Study with StudyID=foo and get study successfully",
                      "timedOut": false,
                      "duration": 79,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "118f4d88-7d1c-4a9e-a066-65a3c676309f",
                      "parentUUID": "432ab6d8-d46d-4c47-8cce-67271ee1a4d2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c59e7d80-fa43-4804-836a-18049273af1c",
                    "118f4d88-7d1c-4a9e-a066-65a3c676309f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 270,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                },
                {
                  "uuid": "eb558929-6dcc-4795-84d6-8d8fe70d1075",
                  "title": "query studies with param 'ReferringPhysicianName'",
                  "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with ReferringPhysicianName=\"ROBERT^BROWN\" and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'ReferringPhysicianName' Should find Study with ReferringPhysicianName=\"ROBERT^BROWN\" and get study successfully",
                      "timedOut": false,
                      "duration": 81,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "03ceeaf2-ef55-4531-89e8-3a68f944f3e7",
                      "parentUUID": "eb558929-6dcc-4795-84d6-8d8fe70d1075",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with ReferringPhysicianName=\"foo\" and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'ReferringPhysicianName' Should find Study with ReferringPhysicianName=\"foo\" and get study successfully",
                      "timedOut": false,
                      "duration": 69,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "0aafbfd0-ebf4-443c-85ef-c68ae6e65a4d",
                      "parentUUID": "eb558929-6dcc-4795-84d6-8d8fe70d1075",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "03ceeaf2-ef55-4531-89e8-3a68f944f3e7",
                    "0aafbfd0-ebf4-443c-85ef-c68ae6e65a4d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 150,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 300000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "035dc9c6-4856-420b-939f-980df599c53d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 97,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e7eecca2-38d5-439f-961a-c95661ae1cc6",
          "title": "DIMSE C-MOVE",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\c-move\\c-move.test.js",
          "file": "\\test\\dimse\\c-move\\c-move.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE C-MOVE\"",
              "fullTitle": "DIMSE C-MOVE \"before all\" hook in \"DIMSE C-MOVE\"",
              "timedOut": false,
              "duration": 1983,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "78751f7e-47e2-42fe-8d14-cd50ff7633a3",
              "parentUUID": "e7eecca2-38d5-439f-961a-c95661ae1cc6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should download 11 instances with patient level",
              "fullTitle": "DIMSE C-MOVE Should download 11 instances with patient level",
              "timedOut": false,
              "duration": 1202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let moveResult = await doCMove([\n    \"-k\",\n    \"0008,0052=PATIENT\",\n    \"-k\",\n    `0010,0020=${PATIENT_ID}`\n]);\nexpect(moveResult.code).to.equal(0);\nexpect(moveResult.message).have.string(\"I: Received Store Request (MsgID 11\");\nexpect(moveResult.message).have.string(\"I: Received Final Move Response (Success)\");\nexpect(moveResult.message).not.have.string(\"I: Received Store Request (MsgID 12\");",
              "err": {},
              "uuid": "258962d1-c151-49f6-897e-4a4aae9a5f6a",
              "parentUUID": "e7eecca2-38d5-439f-961a-c95661ae1cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should download 11 instances with patient-study level",
              "fullTitle": "DIMSE C-MOVE Should download 11 instances with patient-study level",
              "timedOut": false,
              "duration": 1207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let moveResult = await doCMove([\n    \"-k\",\n    \"0008,0052=STUDY\",\n    \"-k\",\n    `0010,0020=${PATIENT_ID}`,\n    \"-k\",\n    `0020,000d=${STUDY_UID}`\n]);\nexpect(moveResult.code).to.equal(0);\nexpect(moveResult.message).have.string(\"I: Received Store Request (MsgID 11\");\nexpect(moveResult.message).have.string(\"I: Received Final Move Response (Success)\");\nexpect(moveResult.message).not.have.string(\"I: Received Store Request (MsgID 12\");",
              "err": {},
              "uuid": "fb6f25d4-75cf-48ce-ab8c-d9ec1b75059e",
              "parentUUID": "e7eecca2-38d5-439f-961a-c95661ae1cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should download 5 instances with patient-study-series level",
              "fullTitle": "DIMSE C-MOVE Should download 5 instances with patient-study-series level",
              "timedOut": false,
              "duration": 1123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let moveResult = await doCMove([\n    \"-k\",\n    \"0008,0052=SERIES\",\n    \"-k\",\n    `0010,0020=${PATIENT_ID}`,\n    \"-k\",\n    `0020,000d=${STUDY_UID}`,\n    \"-k\",\n    `0020,000e=${SERIES_UID}`\n]);\nexpect(moveResult.code).to.equal(0);\nexpect(moveResult.message).have.string(\"I: Received Store Request (MsgID 5\");\nexpect(moveResult.message).have.string(\"I: Received Final Move Response (Success)\");\nexpect(moveResult.message).not.have.string(\"I: Received Store Request (MsgID 6\");",
              "err": {},
              "uuid": "cbf6fb34-eaf7-4765-a498-828edb3226f0",
              "parentUUID": "e7eecca2-38d5-439f-961a-c95661ae1cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should download 1 instance with patient-study-series-instance level",
              "fullTitle": "DIMSE C-MOVE Should download 1 instance with patient-study-series-instance level",
              "timedOut": false,
              "duration": 1060,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let moveResult = await doCMove([\n    \"-k\",\n    \"0008,0052=IMAGE\",\n    \"-k\",\n    `0010,0020=${PATIENT_ID}`,\n    \"-k\",\n    `0020,000d=${STUDY_UID}`,\n    \"-k\",\n    `0020,000e=${SERIES_UID}`,\n    \"-k\",\n    `0008,0018=${INSTANCE_UID}`\n]);\nexpect(moveResult.code).to.equal(0);\nexpect(moveResult.message).have.string(\"I: Received Store Request (MsgID 1\");\nexpect(moveResult.message).have.string(\"I: Received Final Move Response (Success)\");\nexpect(moveResult.message).not.have.string(\"I: Received Store Request (MsgID 2\");",
              "err": {},
              "uuid": "63c58721-63ac-4a19-ac9a-52d1c09ea1d2",
              "parentUUID": "e7eecca2-38d5-439f-961a-c95661ae1cc6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "258962d1-c151-49f6-897e-4a4aae9a5f6a",
            "fb6f25d4-75cf-48ce-ab8c-d9ec1b75059e",
            "cbf6fb34-eaf7-4765-a498-828edb3226f0",
            "63c58721-63ac-4a19-ac9a-52d1c09ea1d2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4592,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "ee007964-7580-426d-ba95-43f6f0d8b78c",
          "title": "DIMSE Check Source AE",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\checktSourceAE.test.js",
          "file": "\\test\\dimse\\checktSourceAE.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE Check Source AE\"",
              "fullTitle": "DIMSE Check Source AE \"before all\" hook in \"DIMSE Check Source AE\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "process.env.DIMSE_CHECK_STORE_SCU_AE = true;\nprocess.env.DIMSE_CHECK_FIND_SCU_AE = true;\nprocess.env.DIMSE_CHECK_MOVE_SCU_AE = true;\nip = getLocalIp();\nport = await getPorts();\nscp = new DcmQrScp(ip, port, \"RACCOON_TEST\", TEST_ALLOW_AEs);\nawait scp.start();",
              "err": {},
              "uuid": "3bdd61d2-4b11-4fc6-ac30-1356802c7cb6",
              "parentUUID": "ee007964-7580-426d-ba95-43f6f0d8b78c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"DIMSE Check Source AE\"",
              "fullTitle": "DIMSE Check Source AE \"after all\" hook in \"DIMSE Check Source AE\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "process.env.DIMSE_CHECK_STORE_SCU_AE = false;\nprocess.env.DIMSE_CHECK_FIND_SCU_AE = false;\nprocess.env.DIMSE_CHECK_MOVE_SCU_AE = false;",
              "err": {},
              "uuid": "0c5b88d9-7ccf-4cfb-a652-25f69e8472e6",
              "parentUUID": "ee007964-7580-426d-ba95-43f6f0d8b78c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C-FIND: Should raise error when using invalid AE",
              "fullTitle": "DIMSE Check Source AE C-FIND: Should raise error when using invalid AE",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { message } = await doCFind([\n    \"-aet\",\n    \"INVALID\",\n    \"-aec\",\n    \"RACCOON_TEST\",\n    \"-v\",\n    ip,\n    port,\n    \"-P\",\n    \"-k\",\n    \"0008,0052=PATIENT\"\n]);\nexpect(message).have.string(Status.NotAuthorized.toString(16));",
              "err": {},
              "uuid": "5bf874ac-15d0-4482-aeb0-73bacce37637",
              "parentUUID": "ee007964-7580-426d-ba95-43f6f0d8b78c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C-FIND: Should work properly when using valid AE",
              "fullTitle": "DIMSE Check Source AE C-FIND: Should work properly when using valid AE",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { message } = await doCFind([\n    \"-aet\",\n    TEST_ALLOW_AEs.sources.find[0].aeTitle,\n    \"-aec\",\n    \"RACCOON_TEST\",\n    \"-v\",\n    ip,\n    port,\n    \"-P\",\n    \"-k\",\n    \"0008,0052=PATIENT\"\n]);\nexpect(message).not.have.string(Status.NotAuthorized.toString(16));",
              "err": {},
              "uuid": "0519c495-de67-4928-9ea5-aa290e731613",
              "parentUUID": "ee007964-7580-426d-ba95-43f6f0d8b78c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C-MOVE: Should raise error when using invalid AE",
              "fullTitle": "DIMSE Check Source AE C-MOVE: Should raise error when using invalid AE",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { message } = await doCMove(\"INVALID\", [\n    \"-k\",\n    \"0008,0052=PATIENT\",\n    \"-k\",\n    `0010,0020=${\"1234567890\"}`\n]);\nexpect(message).have.string(Status.NotAuthorized.toString(16));",
              "err": {},
              "uuid": "891997d2-df31-4afe-a266-2e308cb3245b",
              "parentUUID": "ee007964-7580-426d-ba95-43f6f0d8b78c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C-MOVE: Should work properly when using valid AE",
              "fullTitle": "DIMSE Check Source AE C-MOVE: Should work properly when using valid AE",
              "timedOut": false,
              "duration": 166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { message } = await doCMove(TEST_ALLOW_AEs.sources.move[0].aeTitle, [\n    \"-k\",\n    \"0008,0052=PATIENT\",\n    \"-k\",\n    `0010,0020=${\"1234567890\"}`\n]);\nexpect(message).not.have.string(Status.NotAuthorized.toString(16));",
              "err": {},
              "uuid": "1b8f5cf4-e955-4bce-a43b-2b28024c3d20",
              "parentUUID": "ee007964-7580-426d-ba95-43f6f0d8b78c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C-STORE: Should raise error when using invalid AE",
              "fullTitle": "DIMSE Check Source AE C-STORE: Should raise error when using invalid AE",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { message } = await doCStore(\"INVALID\", pathResolve(__dirname, \"../testData/dicomFiles/1-01-mod-vo\"));\nexpect(message).have.string(Status.NotAuthorized.toString(16));",
              "err": {},
              "uuid": "8b9829d2-21e9-4ebe-b1fe-b94e0dd517c6",
              "parentUUID": "ee007964-7580-426d-ba95-43f6f0d8b78c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C-STORE: Should work properly when using valid AE",
              "fullTitle": "DIMSE Check Source AE C-STORE: Should work properly when using valid AE",
              "timedOut": false,
              "duration": 100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { message } = await doCStore(TEST_ALLOW_AEs.sources.store[0].aeTitle, pathResolve(__dirname, \"../testData/dicomFiles/1-01-mod-vo\"));\nexpect(message).not.have.string(Status.NotAuthorized.toString(16));",
              "err": {},
              "uuid": "c5b1e8a9-55e2-48a1-b68a-16e14cf48013",
              "parentUUID": "ee007964-7580-426d-ba95-43f6f0d8b78c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5bf874ac-15d0-4482-aeb0-73bacce37637",
            "0519c495-de67-4928-9ea5-aa290e731613",
            "891997d2-df31-4afe-a266-2e308cb3245b",
            "1b8f5cf4-e955-4bce-a43b-2b28024c3d20",
            "8b9829d2-21e9-4ebe-b1fe-b94e0dd517c6",
            "c5b1e8a9-55e2-48a1-b68a-16e14cf48013"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 548,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2077123e-6c5b-4679-b117-502a2c966c06",
          "title": "DIMSE STGCMT",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\stgcmt.test.js",
          "file": "\\test\\dimse\\stgcmt.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE STGCMT\"",
              "fullTitle": "DIMSE STGCMT \"before all\" hook in \"DIMSE STGCMT\"",
              "timedOut": false,
              "duration": 907,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();\nawait storeTestDicomFiles(STUDY_PATH);",
              "err": {},
              "uuid": "63d24794-1810-4509-8d7d-9b4af67a0b02",
              "parentUUID": "2077123e-6c5b-4679-b117-502a2c966c06",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should not have FailureReason when all instances exist",
              "fullTitle": "DIMSE STGCMT Should not have FailureReason when all instances exist",
              "timedOut": false,
              "duration": 448,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await doStgCmt(STUDY_PATH);\n\nexpect(response.code).to.equal(0);\nexpect(response.message).not.have.string(\"FailureReason\");",
              "err": {},
              "uuid": "c86b40bf-0b2d-494e-ac77-0657b99159b5",
              "parentUUID": "2077123e-6c5b-4679-b117-502a2c966c06",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have FailureReason when instance not exist",
              "fullTitle": "DIMSE STGCMT Should have FailureReason when instance not exist",
              "timedOut": false,
              "duration": 389,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await doStgCmt(NOT_FOUND_PATH);\n\nexpect(response.code).to.equal(0);\nexpect(response.message).have.string(\"FailureReason\");",
              "err": {},
              "uuid": "3ecebbef-dcc3-43eb-96cc-4f9f0259789c",
              "parentUUID": "2077123e-6c5b-4679-b117-502a2c966c06",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c86b40bf-0b2d-494e-ac77-0657b99159b5",
            "3ecebbef-dcc3-43eb-96cc-4f9f0259789c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 837,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
          "title": "DIMSE C-STORE",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\dimse\\storescp.test.js",
          "file": "\\test\\dimse\\storescp.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE C-STORE\"",
              "fullTitle": "DIMSE C-STORE \"before all\" hook in \"DIMSE C-STORE\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();",
              "err": {},
              "uuid": "473c81c4-2dea-43b4-8ac0-d90e7a6edcd9",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should store a DICOM instance with complete attributes successfully and have proper attributes",
              "fullTitle": "DIMSE C-STORE Should store a DICOM instance with complete attributes successfully and have proper attributes",
              "timedOut": false,
              "duration": 200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDicomFilename = path.resolve(__dirname, \"../testData/dicomFiles/1-01-mod-vo\");\n        const { code, message } = await doCStore(testDicomFilename);\n        expect(code).to.be.equal(0);\n        expect(message).contain(\"with status SUCCESS  : 1\");\n        let testFileDicomJson = await JDcm2Json.get(testDicomFilename);\n        await expectInstanceHaveProperAttributes(testFileDicomJson);",
              "err": {},
              "uuid": "a8b3dd73-b24c-493d-acf9-59418568b8c7",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should update a DICOM instance",
              "fullTitle": "DIMSE C-STORE Should update a DICOM instance",
              "timedOut": false,
              "duration": 97,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDicomFilename = path.resolve(__dirname, \"../testData/forStore/1-01-mod-vo-updated\");\nconst { code, message } = await doCStore(testDicomFilename);\nexpect(code).to.be.equal(0);\nexpect(message).contain(\"with status SUCCESS  : 1\");\nlet testFileDicomJson = await JDcm2Json.get(testDicomFilename);\nawait expectInstanceHaveProperAttributes(testFileDicomJson);",
              "err": {},
              "uuid": "2119e81f-4806-43ec-b0f2-8a435589ee3b",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1, CR) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1, CR) successfully",
              "timedOut": false,
              "duration": 89,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "bf102556-c08a-4330-9734-5d6e5ab57874",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1.1, DX) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1.1, DX) successfully",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "e8d643ce-3cad-4e8e-8ae8-81827cf6500f",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, CT) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, CT) successfully",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "9fb88feb-98b2-4676-b45e-d7c3f2f78eb6",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.4, MR) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.4, MR) successfully",
              "timedOut": false,
              "duration": 90,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "a8a1c9e3-cdda-4740-b25a-551a23bc1de5",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, US) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, US) successfully",
              "timedOut": false,
              "duration": 89,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "eb6b2fb1-565f-4b89-8e32-4067f1ec335f",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.104.1, US) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.104.1, US) successfully",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "589dfa21-4250-497f-bfed-1d712ff0c2fb",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, SC) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, SC) successfully",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "978869a2-c199-427c-bbbc-4e88e87bb95d",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, OT) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, OT) successfully",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "d7f8a477-a217-4713-ab91-f3e670720613",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.9.1.1, ECG) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.9.1.1, ECG) successfully",
              "timedOut": false,
              "duration": 226,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "13b31896-8436-4054-9025-4831abc64495",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.12.1, XA) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.12.1, XA) successfully",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "a82548c6-ae37-4578-b6fe-751b44bc02c4",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.3.1, Multi-Frame (US)) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.3.1, Multi-Frame (US)) successfully",
              "timedOut": false,
              "duration": 85,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "edf21f2b-18e8-42a3-be5b-81fecbab82a6",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.91.1, ANN) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.91.1, ANN) successfully",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "a58fab1c-138f-4163-a493-f0c75f4823d7",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.481.3, RTSTRUCT) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.481.3, RTSTRUCT) successfully",
              "timedOut": false,
              "duration": 131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "346a617b-ace7-4aa9-8d81-ff928fd82124",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.66.4, SEG) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.66.4, SEG) successfully",
              "timedOut": false,
              "duration": 92,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "a9566a9a-b312-4ab8-9b4c-f07d68f3c300",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.11.1, GSPS) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.11.1, GSPS) successfully",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "c5a7185d-5225-4d72-8f49-e0d4642eaa5e",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.91, JPEG 2000) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.91, JPEG 2000) successfully",
              "timedOut": false,
              "duration": 203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "1dac5b3e-e598-4792-9fea-3d1530518743",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.51, JPEG Lossless) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.51, JPEG Lossless) successfully",
              "timedOut": false,
              "duration": 194,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "3d8479e2-33a3-498d-ae58-a08b207c8fee",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.50, JPEG Baseline) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.50, JPEG Baseline) successfully",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "72b263b6-236b-4d05-bafa-0cce2ff5fff8",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.1, Explicit VR Little Endian (Uncompressed)) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.1, Explicit VR Little Endian (Uncompressed)) successfully",
              "timedOut": false,
              "duration": 81,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "37e80247-a420-4c9b-9215-4828cee4e7bb",
              "parentUUID": "f17efaf4-a65e-4eab-9d7b-e3ac25ab0c97",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8b3dd73-b24c-493d-acf9-59418568b8c7",
            "2119e81f-4806-43ec-b0f2-8a435589ee3b",
            "bf102556-c08a-4330-9734-5d6e5ab57874",
            "e8d643ce-3cad-4e8e-8ae8-81827cf6500f",
            "9fb88feb-98b2-4676-b45e-d7c3f2f78eb6",
            "a8a1c9e3-cdda-4740-b25a-551a23bc1de5",
            "eb6b2fb1-565f-4b89-8e32-4067f1ec335f",
            "589dfa21-4250-497f-bfed-1d712ff0c2fb",
            "978869a2-c199-427c-bbbc-4e88e87bb95d",
            "d7f8a477-a217-4713-ab91-f3e670720613",
            "13b31896-8436-4054-9025-4831abc64495",
            "a82548c6-ae37-4578-b6fe-751b44bc02c4",
            "edf21f2b-18e8-42a3-be5b-81fecbab82a6",
            "a58fab1c-138f-4163-a493-f0c75f4823d7",
            "346a617b-ace7-4aa9-8d81-ff928fd82124",
            "a9566a9a-b312-4ab8-9b4c-f07d68f3c300",
            "c5a7185d-5225-4d72-8f49-e0d4642eaa5e",
            "1dac5b3e-e598-4792-9fea-3d1530518743",
            "3d8479e2-33a3-498d-ae58-a08b207c8fee",
            "72b263b6-236b-4d05-bafa-0cce2ff5fff8",
            "37e80247-a420-4c9b-9215-4828cee4e7bb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2492,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3ee5f81a-a46b-4bc8-bab6-c227bce44e61",
          "title": "WADO-RS get delete reason '/dicom-web/delete-reason/:uid'",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\getDeleteReason.test.js",
          "file": "\\test\\getDeleteReason.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"WADO-RS get delete reason '/dicom-web/delete-reason/:uid'\"",
              "fullTitle": "WADO-RS get delete reason '/dicom-web/delete-reason/:uid' \"before all\" hook in \"WADO-RS get delete reason '/dicom-web/delete-reason/:uid'\"",
              "timedOut": false,
              "duration": 902,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${STUDY_UID}/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});",
              "err": {},
              "uuid": "a3074aef-9853-4148-b880-4e8fb30b2be9",
              "parentUUID": "3ee5f81a-a46b-4bc8-bab6-c227bce44e61",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should get delete reason for study",
              "fullTitle": "WADO-RS get delete reason '/dicom-web/delete-reason/:uid' Should get delete reason for study",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/delete-reason/${STUDY_UID}`\n});\nexpect(response.statusCode).to.equal(200);\nlet deleteReason = await response.json();\nexpect(deleteReason).have.property(\"reason\").to.be.equal(\"test\");",
              "err": {},
              "uuid": "2253f369-dcff-45ef-b3cb-b0183848cf6b",
              "parentUUID": "3ee5f81a-a46b-4bc8-bab6-c227bce44e61",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2253f369-dcff-45ef-b3cb-b0183848cf6b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "20df811a-efe1-4205-9285-58bc7cb21658",
          "title": "HL7 OMI",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\hl7\\hl7-omi-to-dicom-json.test.js",
          "file": "\\test\\hl7\\hl7-omi-to-dicom-json.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9ba32771-f1aa-432a-b314-bd77432f290a",
              "title": "Parse OMI To DICOM Json",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\hl7\\hl7-omi-to-dicom-json.test.js",
              "file": "\\test\\hl7\\hl7-omi-to-dicom-json.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse OMI to dicom json and have correct properties",
                  "fullTitle": "HL7 OMI Parse OMI To DICOM Json should parse OMI to dicom json and have correct properties",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let ormMessage = fs.readFileSync(\n    join(__dirname, \"../testData/hl7/omi-for-adt.hl7\"),\n    \"utf-8\"\n);\nlet ormMessageSplit = ormMessage.split(/(\\r\\n|\\n|$)/m);\normMessage = ormMessageSplit.join(\"\\r\");\nlet hl7Parser = new Hl7Parser();\nlet dicomJsonParser = new Hl7ToDicomMwlParser(hl7Parser.parse(ormMessage));\nlet mwl = dicomJsonParser.toDicomMwlJson(\"OMI\");\n    \n// Patient ID\nexpect(mwl).has.property(\"00100020\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"454721\");\n// Patient Name\nexpect(mwl).has.property(\"00100010\").has.property(\"Value\").has.property(\"0\").has.property(\"Alphabetic\").to.be.equal(\"DOE^JOHN^^^^\");\n// Patient Birth Date\nexpect(mwl).has.property(\"00100030\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"19480203\");\n// Patient Sex\nexpect(mwl).has.property(\"00100040\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"M\");\n// Scheduled Procedure Step Sequence\nexpect(mwl).has.property(\"00400100\").has.property(\"Value\").has.lengthOf(1);\nlet spsSeq = mwl[\"00400100\"][\"Value\"][0];\n// Scheduled Station AE Title\nexpect(spsSeq).has.property(\"00400001\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"ScheduledStationAET1\");\nexpect(spsSeq).has.property(\"00400001\").has.property(\"Value\").has.property(\"1\").to.be.equal(\"ScheduledStationAET2\");\n// Scheduled Procedure Step Start Date\nexpect(spsSeq).has.property(\"00400002\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"20000816\");\n// Scheduled Procedure Step Start Time\nexpect(spsSeq).has.property(\"00400003\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"151000\");\n// Modality\nexpect(spsSeq).has.property(\"00080060\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"CT\");\n// Scheduled Performing Physician's Name\nexpect(spsSeq).has.property(\"00400006\").has.property(\"Value\").has.property(\"0\").has.property(\"Alphabetic\").to.be.equal(\"ScheduledPerformingPhysicianNameFN^ScheduledPerformingPhysicianNameGN^ScheduledPerformingPhysicianNameMN^^DR^Md\");\n// Scheduled Procedure Step Description\nexpect(spsSeq).has.property(\"00400007\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"Microscopic Observation\");\n// Scheduled Protocol Code Sequence\nexpect(spsSeq).has.property(\"00400008\").has.property(\"Value\").has.lengthOf(1);\nlet spsScheduledProtocolCodeSeq = spsSeq[\"00400008\"][\"Value\"][0];\n// Scheduled Protocol Code Value\nexpect(spsScheduledProtocolCodeSeq).has.property(\"00080100\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"10637-7\");\n// Scheduled Protocol Code Scheme Designator\nexpect(spsScheduledProtocolCodeSeq).has.property(\"00080102\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"LN\");\n// Scheduled Protocol Code Meaning\nexpect(spsScheduledProtocolCodeSeq).has.property(\"00080104\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"Microscopic Observation\");\n// Scheduled Procedure Step ID\nexpect(spsSeq).has.property(\"00400009\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"SPS-johs4U\");\n// Scheduled Procedure Step Status\nexpect(spsSeq).has.property(\"00400020\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"SCHEDULED\");\n\n// Requested Procedure ID\nexpect(mwl).has.property(\"00401001\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"RP-chaeF9\");\n// Accession Number\nexpect(mwl).has.property(\"00080050\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"ACC-shi3Ub\");",
                  "err": {},
                  "uuid": "b41af5ba-f809-4900-a0be-68cefaf3eaa7",
                  "parentUUID": "9ba32771-f1aa-432a-b314-bd77432f290a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b41af5ba-f809-4900-a0be-68cefaf3eaa7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "53e85192-38ee-4b0f-98f0-f980248742f9",
          "title": "HL7 ORM",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\hl7\\hl7-orm-to-dicom-json.test.js",
          "file": "\\test\\hl7\\hl7-orm-to-dicom-json.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3093ef3f-3bbb-4ece-ba7f-13e442adf43c",
              "title": "Parse ORM To DICOM Json",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\hl7\\hl7-orm-to-dicom-json.test.js",
              "file": "\\test\\hl7\\hl7-orm-to-dicom-json.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse orm to dicom json and have correct properties",
                  "fullTitle": "HL7 ORM Parse ORM To DICOM Json should parse orm to dicom json and have correct properties",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let ormMessage = fs.readFileSync(\n    join(__dirname, \"../testData/hl7/orm-for-adt.hl7\"),\n    \"utf-8\"\n);\nlet ormMessageSplit = ormMessage.split(/(\\r\\n|\\n|$)/m);\normMessage = ormMessageSplit.join(\"\\r\");\nlet hl7Parser = new Hl7Parser();\nlet dicomJsonParser = new Hl7ToDicomMwlParser(hl7Parser.parse(ormMessage));\nlet mwl = dicomJsonParser.toDicomMwlJson(\"ORM\");\n    \n// Patient ID\nexpect(mwl).has.property(\"00100020\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"454721\");\n// Patient Name\nexpect(mwl).has.property(\"00100010\").has.property(\"Value\").has.property(\"0\").has.property(\"Alphabetic\").to.be.equal(\"DOE^JOHN^^^^\");\n// Patient Birth Date\nexpect(mwl).has.property(\"00100030\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"19480203\");\n// Patient Sex\nexpect(mwl).has.property(\"00100040\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"M\");\n// Scheduled Procedure Step Sequence\nexpect(mwl).has.property(\"00400100\").has.property(\"Value\").has.lengthOf(1);\nlet spsSeq = mwl[\"00400100\"][\"Value\"][0];\n// Scheduled Procedure Step Start Date\nexpect(spsSeq).has.property(\"00400002\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"20150325\");\n// Scheduled Procedure Step Start Time\nexpect(spsSeq).has.property(\"00400003\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"160228\");\n// Modality\nexpect(spsSeq).has.property(\"00080060\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"CT\");\n// Scheduled Performing Physician's Name\nexpect(spsSeq).has.property(\"00400006\").has.property(\"Value\").has.property(\"0\").has.property(\"Alphabetic\").to.be.equal(\"^AMY^JANE^^^^\");\n// Scheduled Procedure Step Description\nexpect(spsSeq).has.property(\"00400007\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"Description\");\n// Scheduled Protocol Code Sequence\nexpect(spsSeq).has.property(\"00400008\").has.property(\"Value\").has.lengthOf(1);\nlet spsScheduledProtocolCodeSeq = spsSeq[\"00400008\"][\"Value\"][0];\n// Scheduled Protocol Code Value\nexpect(spsScheduledProtocolCodeSeq).has.property(\"00080100\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"CodeValue\");\n// Scheduled Protocol Code Scheme Designator\nexpect(spsScheduledProtocolCodeSeq).has.property(\"00080102\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"99Designator\");\n// Scheduled Protocol Code Meaning\nexpect(spsScheduledProtocolCodeSeq).has.property(\"00080104\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"Description\");\n// Scheduled Procedure Step ID\nexpect(spsSeq).has.property(\"00400009\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"SPS-ohgh3W\");\n// Scheduled Procedure Step Status\nexpect(spsSeq).has.property(\"00400020\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"SCHEDULED\");\n// Requested Procedure ID\nexpect(mwl).has.property(\"00401001\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"RP-aeW9ee\");\n// Accession Number\nexpect(mwl).has.property(\"00080050\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"ACC-bei3AP\");",
                  "err": {},
                  "uuid": "8697fba7-00ab-4341-8885-b3e17246f390",
                  "parentUUID": "3093ef3f-3bbb-4ece-ba7f-13e442adf43c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8697fba7-00ab-4341-8885-b3e17246f390"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "46663e8e-e984-411a-9ca3-ba52f42badeb",
          "title": "HL7 Patient",
          "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\hl7\\hl7-patient-to-dicom-json.test.js",
          "file": "\\test\\hl7\\hl7-patient-to-dicom-json.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3a0ddc71-57f3-42b5-8d77-edbe4a10ccb9",
              "title": "Parse Patient To DICOM Json",
              "fullFile": "D:\\work-space\\code\\raccoon-space\\raccoon-dicom-sql-business\\test\\hl7\\hl7-patient-to-dicom-json.test.js",
              "file": "\\test\\hl7\\hl7-patient-to-dicom-json.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse patient to dicom json and have correct properties",
                  "fullTitle": "HL7 Patient Parse Patient To DICOM Json should parse patient to dicom json and have correct properties",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let adtMessage = fs.readFileSync(\n    join(__dirname, \"../testData/hl7/adt.hl7\"),\n    \"utf-8\"\n);\nlet adtMessageSplit = adtMessage.split(/(\\r\\n|\\n|$)/m);\nadtMessage = adtMessageSplit.join(\"\\r\");\nlet hl7Parser = new Hl7Parser();\nlet dicomJsonParser = new Hl7ToDicomPatientParser(hl7Parser.parse(adtMessage));\nlet patient = dicomJsonParser.toDicomPatientJson();\n    \n// Patient ID\nexpect(patient).has.property(\"00100020\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"454721\");\n// Patient Name\nexpect(patient).has.property(\"00100010\").has.property(\"Value\").has.property(\"0\").has.property(\"Alphabetic\").to.be.equal(\"DOE^JOHN^^^^\");\n// Patient Birth Date\nexpect(patient).has.property(\"00100030\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"19480203\");\n// Patient Sex\nexpect(patient).has.property(\"00100040\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"M\");",
                  "err": {},
                  "uuid": "1b2a2c07-0e82-483a-8f1e-996585ae1919",
                  "parentUUID": "3a0ddc71-57f3-42b5-8d77-edbe4a10ccb9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b2a2c07-0e82-483a-8f1e-996585ae1919"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.6.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
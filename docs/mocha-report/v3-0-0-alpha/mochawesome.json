{
  "stats": {
    "suites": 304,
    "tests": 763,
    "passes": 763,
    "pending": 0,
    "failures": 0,
    "start": "2025-02-19T06:50:48.852Z",
    "end": "2025-02-19T06:53:54.937Z",
    "duration": 186085,
    "testsRegistered": 763,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bad848d2-aeb3-466c-bac5-c592f3a1b1de",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: beforeAll in \"{root}\"",
          "fullTitle": "\"before all\" hook: beforeAll in \"{root}\"",
          "timedOut": false,
          "duration": 427,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.log(\"run before all hook\");\nif (!process.env.TEST_DB_TYPE) process.env.TEST_DB_TYPE = \"sql\";\nif (process.env.TEST_DB_TYPE === \"sql\") {\n    require(\"../models/sql/init\").then(() => {\n        done();\n    });\n} else if (process.env.TEST_DB_TYPE === \"mongodb\") {\n    const mongoose = require(\"mongoose\");\n    mongoose.connection.on(\"connected\", () => {\n        console.log(\"connected to mongodb\");\n        done();\n    });\n    require(\"../models/mongodb/index\");\n}",
          "err": {},
          "uuid": "ebea701f-c7fb-4cc4-8836-e393722f9e8a",
          "parentUUID": "bad848d2-aeb3-466c-bac5-c592f3a1b1de",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
          "title": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\convert-image\\convertInstanceImage.test.js",
          "file": "\\test\\api\\dicom-web\\convert-image\\convertInstanceImage.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image'\"",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' \"before all\" hook in \"Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image'\"",
              "timedOut": false,
              "duration": 1561,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\")\n);\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/forStore/PDF/pdf.dcm\")\n);\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/forStore/PDF/pdf2.dcm\")\n);",
              "err": {},
              "uuid": "b2d74e9b-f64a-4b47-85c0-8c4d56d0d101",
              "parentUUID": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should convert instance to type: JPEG (image/jpeg)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: JPEG (image/jpeg)",
              "timedOut": false,
              "duration": 254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "fc0660ea-97cb-48bb-86d7-3e0c3a59d3b4",
              "parentUUID": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: GIF (image/gif)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: GIF (image/gif)",
              "timedOut": false,
              "duration": 271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "af30d62d-9de1-440c-ba31-9226e15ae0b0",
              "parentUUID": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: BMP (image/bmp)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: BMP (image/bmp)",
              "timedOut": false,
              "duration": 310,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "0ba09a73-53b1-4b82-864a-49643dcff8aa",
              "parentUUID": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: JPG (image/jp2)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: JPG (image/jp2)",
              "timedOut": false,
              "duration": 789,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "11ba6c0f-f5f5-45f0-a366-edf5593eb762",
              "parentUUID": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: PNG (image/png)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: PNG (image/png)",
              "timedOut": false,
              "duration": 236,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "9bbfde4d-6154-41f2-aabf-e0f60e675aff",
              "parentUUID": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: TIFF (image/tiff)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: TIFF (image/tiff)",
              "timedOut": false,
              "duration": 378,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "6562acfc-f262-4420-85a3-21ea73cd9515",
              "parentUUID": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: MP4 (video/mp4)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: MP4 (video/mp4)",
              "timedOut": false,
              "duration": 239,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "9f5ffc8c-69fc-4f23-80ca-cb9c66cd6433",
              "parentUUID": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: AVI (video/x-msvideo)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: AVI (video/x-msvideo)",
              "timedOut": false,
              "duration": 212,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "89aa72a6-4df6-47d1-9566-053bef8aa7c0",
              "parentUUID": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: MPG (video/mpeg)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: MPG (video/mpeg)",
              "timedOut": false,
              "duration": 201,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "6ca252ad-0b06-4864-87d2-f6110a4ca1a0",
              "parentUUID": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert instance to type: H265 (video/H265)",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should convert instance to type: H265 (video/H265)",
              "timedOut": false,
              "duration": 354,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "30ad46a7-bb99-4a81-b840-30b12067bc34",
              "parentUUID": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should covert instance to PDF",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should covert instance to PDF",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${PDF_STUDY_UID}/series/${PDF_SERIES_UID}/instances/${PDF_INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"application/pdf\"\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "e929c02c-e5cf-40f9-ac7d-26578e82beb8",
              "parentUUID": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when using invalid media type in accept header",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should raise 400 (Bad Request) when using invalid media type in accept header",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"application/json\"\n    }\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "b41acca0-64e3-4389-b86e-2e9e5c18817b",
              "parentUUID": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when instance not exist",
              "fullTitle": "Convert Images convert instance '/dicom-web/:studyUID/series/:seriesUID/instances/:instanceUID/convert-image' Should raise 404 (Not Found) when instance not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}2486/convert-image`,\n    headers: {\n        \"Accept\": \"application/pdf\"\n    }\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "d03eb13a-6611-40ff-b16a-aa73d03a49c4",
              "parentUUID": "a0da7be2-5d8c-4165-b2f9-ded774a275c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fc0660ea-97cb-48bb-86d7-3e0c3a59d3b4",
            "af30d62d-9de1-440c-ba31-9226e15ae0b0",
            "0ba09a73-53b1-4b82-864a-49643dcff8aa",
            "11ba6c0f-f5f5-45f0-a366-edf5593eb762",
            "9bbfde4d-6154-41f2-aabf-e0f60e675aff",
            "6562acfc-f262-4420-85a3-21ea73cd9515",
            "9f5ffc8c-69fc-4f23-80ca-cb9c66cd6433",
            "89aa72a6-4df6-47d1-9566-053bef8aa7c0",
            "6ca252ad-0b06-4864-87d2-f6110a4ca1a0",
            "30ad46a7-bb99-4a81-b840-30b12067bc34",
            "e929c02c-e5cf-40f9-ac7d-26578e82beb8",
            "b41acca0-64e3-4389-b86e-2e9e5c18817b",
            "d03eb13a-6611-40ff-b16a-aa73d03a49c4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3265,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "2a78eec8-b656-47cf-a9b8-1518d60055af",
          "title": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\convert-image\\convertSeriesImages.test.js",
          "file": "\\test\\api\\dicom-web\\convert-image\\convertSeriesImages.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image'\"",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' \"before all\" hook in \"Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image'\"",
              "timedOut": false,
              "duration": 235,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\")\n);\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/forStore/PDF/pdf.dcm\")\n);\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/forStore/PDF/pdf2.dcm\")\n);",
              "err": {},
              "uuid": "cdd4181e-bc6b-4986-a33d-d1e5642c96ac",
              "parentUUID": "2a78eec8-b656-47cf-a9b8-1518d60055af",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should convert series' instances to type: JPEG (image/jpeg)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: JPEG (image/jpeg)",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "e218995b-fd5f-4290-82a5-b439f4f48a3a",
              "parentUUID": "2a78eec8-b656-47cf-a9b8-1518d60055af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: GIF (image/gif)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: GIF (image/gif)",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "a3cbe3b1-832d-4981-93c8-9cab741a4318",
              "parentUUID": "2a78eec8-b656-47cf-a9b8-1518d60055af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: BMP (image/bmp)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: BMP (image/bmp)",
              "timedOut": false,
              "duration": 279,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "194631de-09e1-4226-9852-68a06c8e1cb3",
              "parentUUID": "2a78eec8-b656-47cf-a9b8-1518d60055af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: JPG (image/jp2)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: JPG (image/jp2)",
              "timedOut": false,
              "duration": 295,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "d7435855-3f0b-4908-a5a2-3e9b9e3712ad",
              "parentUUID": "2a78eec8-b656-47cf-a9b8-1518d60055af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: PNG (image/png)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: PNG (image/png)",
              "timedOut": false,
              "duration": 232,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "84f47702-cb37-4548-ae37-9d3bf9c76111",
              "parentUUID": "2a78eec8-b656-47cf-a9b8-1518d60055af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: TIFF (image/tiff)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: TIFF (image/tiff)",
              "timedOut": false,
              "duration": 298,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "a9e47531-2027-4e50-9c25-19753f0e3228",
              "parentUUID": "2a78eec8-b656-47cf-a9b8-1518d60055af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: MP4 (video/mp4)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: MP4 (video/mp4)",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "574ebcfb-b577-4109-8eb2-22179d4a6ef3",
              "parentUUID": "2a78eec8-b656-47cf-a9b8-1518d60055af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: AVI (video/x-msvideo)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: AVI (video/x-msvideo)",
              "timedOut": false,
              "duration": 199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "846dde3b-21ed-45b8-9a27-ac75b284c976",
              "parentUUID": "2a78eec8-b656-47cf-a9b8-1518d60055af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: MPG (video/mpeg)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: MPG (video/mpeg)",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "0ba037fb-0619-41a9-a175-7b7160f352aa",
              "parentUUID": "2a78eec8-b656-47cf-a9b8-1518d60055af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert series' instances to type: H265 (video/H265)",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should convert series' instances to type: H265 (video/H265)",
              "timedOut": false,
              "duration": 345,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "59a27b99-ec9b-42af-a6f5-1691a5b2e3b2",
              "parentUUID": "2a78eec8-b656-47cf-a9b8-1518d60055af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should covert series' instances to PDF",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should covert series' instances to PDF",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${PDF_STUDY_UID}/series/${PDF_SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"application/pdf\"\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "9ba17fe4-75fc-4cc4-8846-7a10a5d55f91",
              "parentUUID": "2a78eec8-b656-47cf-a9b8-1518d60055af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when using invalid media type in accept header",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should raise 400 (Bad Request) when using invalid media type in accept header",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"application/json\"\n    }\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "3cf86591-b943-4bf7-8151-c4934cfc614d",
              "parentUUID": "2a78eec8-b656-47cf-a9b8-1518d60055af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when series not exist",
              "fullTitle": "Convert Images convert series' instances '/dicom-web/:studyUID/series/:seriesUID/convert-image' Should raise 404 (Not Found) when series not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}2486/convert-image`,\n    headers: {\n        \"Accept\": \"application/pdf\"\n    }\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "782b2bb6-3f43-4fec-90d3-2e14a2e1c36b",
              "parentUUID": "2a78eec8-b656-47cf-a9b8-1518d60055af",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e218995b-fd5f-4290-82a5-b439f4f48a3a",
            "a3cbe3b1-832d-4981-93c8-9cab741a4318",
            "194631de-09e1-4226-9852-68a06c8e1cb3",
            "d7435855-3f0b-4908-a5a2-3e9b9e3712ad",
            "84f47702-cb37-4548-ae37-9d3bf9c76111",
            "a9e47531-2027-4e50-9c25-19753f0e3228",
            "574ebcfb-b577-4109-8eb2-22179d4a6ef3",
            "846dde3b-21ed-45b8-9a27-ac75b284c976",
            "0ba037fb-0619-41a9-a175-7b7160f352aa",
            "59a27b99-ec9b-42af-a6f5-1691a5b2e3b2",
            "9ba17fe4-75fc-4cc4-8846-7a10a5d55f91",
            "3cf86591-b943-4bf7-8151-c4934cfc614d",
            "782b2bb6-3f43-4fec-90d3-2e14a2e1c36b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2482,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
          "title": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\convert-image\\convetStudyImages.test.js",
          "file": "\\test\\api\\dicom-web\\convert-image\\convetStudyImages.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Convert Images convert study's instances '/dicom-web/:studyUID/convert-image'\"",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' \"before all\" hook in \"Convert Images convert study's instances '/dicom-web/:studyUID/convert-image'\"",
              "timedOut": false,
              "duration": 224,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\")\n);\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/forStore/PDF/pdf.dcm\")\n);\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/forStore/PDF/pdf2.dcm\")\n);",
              "err": {},
              "uuid": "358634c4-a624-4622-870c-a32ada338811",
              "parentUUID": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should convert study's instances to type: JPEG (image/jpeg)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: JPEG (image/jpeg)",
              "timedOut": false,
              "duration": 142,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "38b01d91-8fc5-4b9e-a387-17f445238b3c",
              "parentUUID": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: GIF (image/gif)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: GIF (image/gif)",
              "timedOut": false,
              "duration": 206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "d085e0cf-5ece-4825-841a-94180dab397c",
              "parentUUID": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: BMP (image/bmp)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: BMP (image/bmp)",
              "timedOut": false,
              "duration": 297,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "6832b0d7-0ff1-4c31-9ba5-6971239499ab",
              "parentUUID": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: JPG (image/jp2)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: JPG (image/jp2)",
              "timedOut": false,
              "duration": 238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "7085c9f0-430a-4557-a30f-85b8cadb556f",
              "parentUUID": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: PNG (image/png)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: PNG (image/png)",
              "timedOut": false,
              "duration": 174,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "810e2da6-715d-4074-8e7c-9aedb90b161a",
              "parentUUID": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: TIFF (image/tiff)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: TIFF (image/tiff)",
              "timedOut": false,
              "duration": 292,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "88936bf2-e61e-4349-90ec-edb986369558",
              "parentUUID": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: MP4 (video/mp4)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: MP4 (video/mp4)",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "3add6be6-ffd5-4087-9727-c9dc09939de8",
              "parentUUID": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: AVI (video/x-msvideo)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: AVI (video/x-msvideo)",
              "timedOut": false,
              "duration": 196,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "390e8ff0-74ba-4ea8-aa6e-261f582e7623",
              "parentUUID": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: MPG (video/mpeg)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: MPG (video/mpeg)",
              "timedOut": false,
              "duration": 195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "6abf9073-22ef-47d6-8c4e-36cad361f0aa",
              "parentUUID": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to type: H265 (video/H265)",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should convert study's instances to type: H265 (video/H265)",
              "timedOut": false,
              "duration": 354,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": value\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "a2cf0f5c-51de-441e-a5f6-a7f64d85006f",
              "parentUUID": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should covert study's instances to PDF",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should covert study's instances to PDF",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${PDF_STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"application/pdf\"\n    }\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "8fe972b9-0550-4ceb-94fa-6b9827a3b735",
              "parentUUID": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when using invalid media type in accept header",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should raise 400 (Bad Request) when using invalid media type in accept header",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"application/json\"\n    }\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "cd591eb0-5b3b-4927-8ddf-a0eb2a07535f",
              "parentUUID": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when study not exist",
              "fullTitle": "Convert Images convert study's instances '/dicom-web/:studyUID/convert-image' Should raise 404 (Not Found) when study not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}2486/convert-image`,\n    headers: {\n        \"Accept\": \"application/pdf\"\n    }\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "a7343683-b02a-4660-b4e1-0dc234f1423f",
              "parentUUID": "095e3a17-2a4b-467a-a056-c7c89e6b100e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "38b01d91-8fc5-4b9e-a387-17f445238b3c",
            "d085e0cf-5ece-4825-841a-94180dab397c",
            "6832b0d7-0ff1-4c31-9ba5-6971239499ab",
            "7085c9f0-430a-4557-a30f-85b8cadb556f",
            "810e2da6-715d-4074-8e7c-9aedb90b161a",
            "88936bf2-e61e-4349-90ec-edb986369558",
            "3add6be6-ffd5-4087-9727-c9dc09939de8",
            "390e8ff0-74ba-4ea8-aa6e-261f582e7623",
            "6abf9073-22ef-47d6-8c4e-36cad361f0aa",
            "a2cf0f5c-51de-441e-a5f6-a7f64d85006f",
            "8fe972b9-0550-4ceb-94fa-6b9827a3b735",
            "cd591eb0-5b3b-4927-8ddf-a0eb2a07535f",
            "a7343683-b02a-4660-b4e1-0dc234f1423f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2364,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "e658c31c-cf8c-456c-817f-e19aaf8d6502",
          "title": "convert study's instances to image with user '/dicom-web/:studyUID/convert-image'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\convert-image\\withUser\\convertStudyImagesWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\convert-image\\withUser\\convertStudyImagesWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"convert study's instances to image with user '/dicom-web/:studyUID/convert-image'\"",
              "fullTitle": "convert study's instances to image with user '/dicom-web/:studyUID/convert-image' \"before all\" hook in \"convert study's instances to image with user '/dicom-web/:studyUID/convert-image'\"",
              "timedOut": false,
              "duration": 247,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nawait storeInstanceWithUserForTest(\n    resolve(__dirname, \"../../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\"),\n    TEST_USERS[0]\n);\nawait storeInstanceWithUserForTest(\n    resolve(__dirname, \"../../../../testData/forStore/PDF/pdf.dcm\"),\n    TEST_USERS[1]\n);",
              "err": {},
              "uuid": "3179b984-711a-4013-85f9-959ebc6296e3",
              "parentUUID": "e658c31c-cf8c-456c-817f-e19aaf8d6502",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should convert study's instance to 'png' with user 'test' successfully",
              "fullTitle": "convert study's instances to image with user '/dicom-web/:studyUID/convert-image' Should convert study's instance to 'png' with user 'test' successfully",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"image/png\"\n    },\n    params: {\n        studyUID: STUDY_UID\n    },\n    dicomLevel: \"study\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new ConvertImageController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(200);",
              "err": {},
              "uuid": "f5ea74b1-b821-42b8-8d19-ec9bccd0f04a",
              "parentUUID": "e658c31c-cf8c-456c-817f-e19aaf8d6502",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should convert study's instances to 'pdf' with user 'test' successfully",
              "fullTitle": "convert study's instances to image with user '/dicom-web/:studyUID/convert-image' Should convert study's instances to 'pdf' with user 'test' successfully",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${PDF_STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"application/pdf\"\n    },\n    params: {\n        studyUID: PDF_STUDY_UID\n    },\n    dicomLevel: \"study\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new ConvertImageController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(200);",
              "err": {},
              "uuid": "b29b3107-af53-4ad6-90e1-b66635f06271",
              "parentUUID": "e658c31c-cf8c-456c-817f-e19aaf8d6502",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest' when convert study's instances to 'png'",
              "fullTitle": "convert study's instances to image with user '/dicom-web/:studyUID/convert-image' Should return 404 with user 'oTest' when convert study's instances to 'png'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"image/png\"\n    },\n    params: {\n        studyUID: STUDY_UID\n    },\n    dicomLevel: \"study\",\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nlet controller = new ConvertImageController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(404);",
              "err": {},
              "uuid": "44168de5-4506-422f-ad35-9ec69699dc26",
              "parentUUID": "e658c31c-cf8c-456c-817f-e19aaf8d6502",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest' when convert study's instances to 'pdf'",
              "fullTitle": "convert study's instances to image with user '/dicom-web/:studyUID/convert-image' Should return 404 with user 'oTest' when convert study's instances to 'pdf'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${PDF_STUDY_UID}/convert-image`,\n    headers: {\n        \"Accept\": \"application/pdf\"\n    },\n    params: {\n        studyUID: PDF_STUDY_UID\n    },\n    dicomLevel: \"study\",\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nlet controller = new ConvertImageController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(404);",
              "err": {},
              "uuid": "4342f02f-1e1d-42d9-b009-c04350e6e6dd",
              "parentUUID": "e658c31c-cf8c-456c-817f-e19aaf8d6502",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f5ea74b1-b821-42b8-8d19-ec9bccd0f04a",
            "b29b3107-af53-4ad6-90e1-b66635f06271",
            "44168de5-4506-422f-ad35-9ec69699dc26",
            "4342f02f-1e1d-42d9-b009-c04350e6e6dd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 154,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "c462682a-680a-435e-a42c-5e02f00d1e19",
          "title": "delete dicom with reason",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\deleteWithReason.test.js",
          "file": "\\test\\api\\dicom-web\\deleteWithReason.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"delete dicom with reason\"",
              "fullTitle": "delete dicom with reason \"before each\" hook in \"delete dicom with reason\"",
              "timedOut": false,
              "duration": 1719,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "9c066af4-6095-4436-b987-026a5ccddeca",
              "parentUUID": "c462682a-680a-435e-a42c-5e02f00d1e19",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b3a45de5-7dad-49ab-ba11-0f5d2fea0cd3",
              "title": "instance level",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\deleteWithReason.test.js",
              "file": "\\test\\api\\dicom-web\\deleteWithReason.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should delete instance with reason and expect 4 instances in series",
                  "fullTitle": "delete dicom with reason instance level Should delete instance with reason and expect 4 instances in series",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nexpect(res.statusCode).to.equal(200);\nlet getReasonRes = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/delete-reason/${INSTANCE_UID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(getReasonRes.statusCode).to.equal(200);\n\nlet reason = await getReasonRes.json();\nexpect(reason).have.property(\"uid\").to.be.equal(INSTANCE_UID);\nexpect(reason).have.property(\"reason\").to.be.equal(\"test\");\nexpect(reason).have.property(\"deleteBy\").to.be.equal(\"NONE\");\nlet queryRes = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(queryRes.statusCode).to.equal(200);\nlet instances = await queryRes.json();\nexpect(instances).to.be.an(\"array\").have.lengthOf(4);",
                  "err": {},
                  "uuid": "a16c2cf3-037d-43ad-ae4b-d26b8eb3b9a3",
                  "parentUUID": "b3a45de5-7dad-49ab-ba11-0f5d2fea0cd3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a16c2cf3-037d-43ad-ae4b-d26b8eb3b9a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 30,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "266811e3-0b92-4e64-8731-fab825e327a5",
              "title": "series level",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\deleteWithReason.test.js",
              "file": "\\test\\api\\dicom-web\\deleteWithReason.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should delete series with reason and expect 2 series in study",
                  "fullTitle": "delete dicom with reason series level Should delete series with reason and expect 2 series in study",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nexpect(res.statusCode).to.equal(200);\nlet getReasonRes = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/delete-reason/${SERIES_UID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(getReasonRes.statusCode).to.equal(200);\nlet reason = await getReasonRes.json();\nexpect(reason).have.property(\"uid\").to.be.equal(SERIES_UID);\nexpect(reason).have.property(\"reason\").to.be.equal(\"test\");\nexpect(reason).have.property(\"deleteBy\").to.be.equal(\"NONE\");\nlet queryRes = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(queryRes.statusCode).to.equal(200);\nlet series = await queryRes.json();\nexpect(series).to.be.an(\"array\").have.lengthOf(2);",
                  "err": {},
                  "uuid": "84c634bb-1d01-4c2c-932b-abbe93d691ee",
                  "parentUUID": "266811e3-0b92-4e64-8731-fab825e327a5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84c634bb-1d01-4c2c-932b-abbe93d691ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "7f1e3851-1ffc-4d2d-8051-6901c7b5f3a6",
              "title": "study level",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\deleteWithReason.test.js",
              "file": "\\test\\api\\dicom-web\\deleteWithReason.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should delete study with reason and expect 3 studies",
                  "fullTitle": "delete dicom with reason study level Should delete study with reason and expect 3 studies",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${STUDY_UID}/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nexpect(res.statusCode).to.equal(200);\nlet getReasonRes = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/delete-reason/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(getReasonRes.statusCode).to.equal(200);\nlet reason = await getReasonRes.json();\nexpect(reason).have.property(\"uid\").to.be.equal(STUDY_UID);\nexpect(reason).have.property(\"reason\").to.be.equal(\"test\");\nexpect(reason).have.property(\"deleteBy\").to.be.equal(\"NONE\");\nlet queryRes = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(queryRes.statusCode).to.equal(200);\nlet series = await queryRes.json();\nexpect(series).to.be.an(\"array\").have.lengthOf(3);",
                  "err": {},
                  "uuid": "ae4aa703-9b2f-4efe-8f98-ebea027020eb",
                  "parentUUID": "7f1e3851-1ffc-4d2d-8051-6901c7b5f3a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae4aa703-9b2f-4efe-8f98-ebea027020eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "a078a4fc-6030-47b0-8646-276567ecc28b",
          "title": "MWL-RS change filtered modality worklist status",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\changeFilteredMWLStatus.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\changeFilteredMWLStatus.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS change filtered modality worklist status\"",
              "fullTitle": "MWL-RS change filtered modality worklist status \"before all\" hook in \"MWL-RS change filtered modality worklist status\"",
              "timedOut": false,
              "duration": 1669,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: [testMwlItem]\n});\nlet clonedMwlItem = structuredClone(testMwlItem);\nclonedMwlItem[dictionary.keyword.StudyInstanceUID][\"Value\"][0] = await UIDUtils.createUID();\nclonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledProcedureStepID][\"Value\"][0] = \"SPS-USA\";\nclonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledStationName][\"Value\"][0] = \"USA\";\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: [clonedMwlItem]\n});",
              "err": {},
              "uuid": "ffb1e506-3a74-4de3-9c11-f401021f9529",
              "parentUUID": "a078a4fc-6030-47b0-8646-276567ecc28b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should change filtered modality worklist status",
              "fullTitle": "MWL-RS change filtered modality worklist status Should change filtered modality worklist status",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems/status/READY?ScheduledProcedureStepSequence.ScheduledStationName=USA\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nlet response = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nlet mwlItems = await response.json();\nexpect(mwlItems).to.be.a(\"array\");\nexpect(mwlItems).have.lengthOf(2);\nlet usaMwlItem = mwlItems.find(mwlItem => mwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledStationName][\"Value\"][0] === \"USA\");\nexpect(usaMwlItem)\n.have.property(dictionary.keyword.ScheduledProcedureStepSequence)\n.have.property(\"Value\")\n.have.property(\"0\")\n.have.property(dictionary.keyword.ScheduledProcedureStepStatus)\n.have.property(\"Value\")\n.have.property(\"0\")\n.to.be.equal(\"READY\");\nlet ggMwlItem = mwlItems.find(mwlItem => mwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledStationName][\"Value\"][0] === \"GG\");\nexpect(ggMwlItem)\n.have.property(dictionary.keyword.ScheduledProcedureStepSequence)\n.have.property(\"Value\")\n.have.property(\"0\")\n.have.property(dictionary.keyword.ScheduledProcedureStepStatus)\n.have.property(\"Value\")\n.have.property(\"0\")\n.to.be.equal(\"SCHEDULED\");",
              "err": {},
              "uuid": "023d9621-19f8-4342-9bc5-63917e261bf9",
              "parentUUID": "a078a4fc-6030-47b0-8646-276567ecc28b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "023d9621-19f8-4342-9bc5-63917e261bf9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "56a303fd-6573-4c2f-b2f4-c358f8217f80",
          "title": "MWL-RS change MWL status",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\changeMWLStatus.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\changeMWLStatus.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS change MWL status\"",
              "fullTitle": "MWL-RS change MWL status \"before all\" hook in \"MWL-RS change MWL status\"",
              "timedOut": false,
              "duration": 1808,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: [testMwlItem]\n});",
              "err": {},
              "uuid": "351fa02f-9619-4b60-807e-26d379a87343",
              "parentUUID": "56a303fd-6573-4c2f-b2f4-c358f8217f80",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should change MWL status SCHEDULED to READY",
              "fullTitle": "MWL-RS change MWL status Should change MWL status SCHEDULED to READY",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/mwlitems/${mwlUID}/${spsID}/status/READY`,\n    headers: {\n        \"Accept\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.a(\"object\");\nexpect(data).to.have.property(\"0020000D\").have.property(\"Value\").have.property(\"0\").to.be.equal(mwlUID);\nexpect(data).to.have.property(dictionary.keyword.ScheduledProcedureStepSequence)\n.have.property(\"Value\")\n.have.property(\"0\")\n.have.property(dictionary.keyword.ScheduledProcedureStepStatus)\n.have.property(\"Value\")\n.have.property(\"0\")\n.to.be.equal(\"READY\");",
              "err": {},
              "uuid": "aa336020-adfe-4fa6-abe7-d27f2e9d6cc6",
              "parentUUID": "56a303fd-6573-4c2f-b2f4-c358f8217f80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when mwl not exist",
              "fullTitle": "MWL-RS change MWL status Should raise 404 (Not Found) when mwl not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/mwlitems/1/1/status/READY`,\n    headers: {\n        \"Accept\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "3b826b25-9b63-4293-a840-3a1e0d319bca",
              "parentUUID": "56a303fd-6573-4c2f-b2f4-c358f8217f80",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa336020-adfe-4fa6-abe7-d27f2e9d6cc6",
            "3b826b25-9b63-4293-a840-3a1e0d319bca"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "7d1d541e-b3d0-437f-9d0e-161a0c2c9321",
          "title": "MWL-RS count MWL",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\countMWL.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\countMWL.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS count MWL\"",
              "fullTitle": "MWL-RS count MWL \"before all\" hook in \"MWL-RS count MWL\"",
              "timedOut": false,
              "duration": 1664,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: [testMwlItem]\n});\nlet clonedMwlItem = structuredClone(testMwlItem);\nclonedMwlItem[dictionary.keyword.StudyInstanceUID][\"Value\"][0] = await UIDUtils.createUID();\nclonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledProcedureStepID][\"Value\"][0] = \"SPS-USA\";\nclonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledStationName][\"Value\"][0] = \"USA\";\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: [clonedMwlItem]\n});",
              "err": {},
              "uuid": "f7da48fc-8982-4951-b36e-1b7827bbd167",
              "parentUUID": "7d1d541e-b3d0-437f-9d0e-161a0c2c9321",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should count modality worklist and expect 2",
              "fullTitle": "MWL-RS count MWL Should count modality worklist and expect 2",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/mwlitems/count\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.have.property(\"count\").to.be.equal(2);",
              "err": {},
              "uuid": "fe05c36e-6cc8-4902-bf94-4c1e098753d4",
              "parentUUID": "7d1d541e-b3d0-437f-9d0e-161a0c2c9321",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fe05c36e-6cc8-4902-bf94-4c1e098753d4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "83744faf-7a23-4433-834e-f61587369c7f",
          "title": "MWL-RS create modality worklist",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\createMWL.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\createMWL.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS create modality worklist\"",
              "fullTitle": "MWL-RS create modality worklist \"before all\" hook in \"MWL-RS create modality worklist\"",
              "timedOut": false,
              "duration": 2220,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "9ed36de5-48ac-499d-90d1-e715307f6cab",
              "parentUUID": "83744faf-7a23-4433-834e-f61587369c7f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create modality worklist",
              "fullTitle": "MWL-RS create modality worklist Should create modality worklist",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([testMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data).to.have.property(dictionary.keyword.PatientID).have.property(\"Value\").have.property(\"0\").to.be.a(\"string\");\nexpect(data).to.have.property(dictionary.keyword.PatientName).have.property(\"Value\").have.property(\"0\").to.be.a(\"object\");\nexpect(data).to.have.property(dictionary.keyword.ScheduledProcedureStepSequence).have.property(\"Value\").have.property(\"0\").to.be.an(\"object\");\nexpect(data[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0])\n    .to.have.property(dictionary.keyword.ScheduledStationAETitle)\n    .have.property(\"Value\")\n    .have.property(\"0\").to.be.a(\"string\");\nexpect(data[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0])\n    .to.have.property(dictionary.keyword.ScheduledProcedureStepStartDate)\n    .have.property(\"Value\")\n    .have.property(\"0\").to.be.a(\"string\");\nexpect(data[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0])\n    .to.have.property(dictionary.keyword.ScheduledProcedureStepStartTime)\n    .have.property(\"Value\")\n    .have.property(\"0\").to.be.a(\"string\");\nexpect(data[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0])\n    .to.have.property(dictionary.keyword.Modality)\n    .have.property(\"Value\")\n    .have.property(\"0\").to.be.a(\"string\");",
              "err": {},
              "uuid": "0362fa81-5848-47af-899b-ba94491ee917",
              "parentUUID": "83744faf-7a23-4433-834e-f61587369c7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should update modality worklist",
              "fullTitle": "MWL-RS create modality worklist Should update modality worklist",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedMwlItem = structuredClone(testMwlItem);\nclonedMwlItem[\"00401001\"][\"Value\"][0] = \"U-RPI\";\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data)\n    .to.have.property(dictionary.keyword.RequestedProcedureID)\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .to.be.equal(\"U-RPI\");",
              "err": {},
              "uuid": "076a5843-60d3-4526-8c61-a5dbd147fed8",
              "parentUUID": "83744faf-7a23-4433-834e-f61587369c7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should assign default 'ScheduledProcedureStepStatus'",
              "fullTitle": "MWL-RS create modality worklist Should assign default 'ScheduledProcedureStepStatus'",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedMwlItem = structuredClone(testMwlItem);\ndelete clonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledProcedureStepStatus];\nclonedMwlItem[dictionary.keyword.StudyInstanceUID][\"Value\"][0] = await UIDUtils.createUID();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data)\n    .to.have.property(dictionary.keyword.ScheduledProcedureStepSequence)\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .have.property(dictionary.keyword.ScheduledProcedureStepStatus)\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .to.be.equal(\"SCHEDULED\");",
              "err": {},
              "uuid": "00626409-34b6-4d63-bc36-a582155c4c02",
              "parentUUID": "83744faf-7a23-4433-834e-f61587369c7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should assign default 'ScheduledProcedureStepID'",
              "fullTitle": "MWL-RS create modality worklist Should assign default 'ScheduledProcedureStepID'",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedMwlItem = structuredClone(testMwlItem);\ndelete clonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledProcedureStepID];\nclonedMwlItem[dictionary.keyword.StudyInstanceUID][\"Value\"][0] = await UIDUtils.createUID();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data)\n    .to.have.property(dictionary.keyword.ScheduledProcedureStepSequence)\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .have.property(dictionary.keyword.ScheduledProcedureStepID)\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .to.include(\"SPS\");",
              "err": {},
              "uuid": "5691cfd4-f58d-4d1a-84c6-ae3a39769d08",
              "parentUUID": "83744faf-7a23-4433-834e-f61587369c7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should assign default 'ScheduledProcedureStepID'",
              "fullTitle": "MWL-RS create modality worklist Should assign default 'ScheduledProcedureStepID'",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedMwlItem = structuredClone(testMwlItem);\ndelete clonedMwlItem[dictionary.keyword.RequestedProcedureID];\nclonedMwlItem[dictionary.keyword.StudyInstanceUID][\"Value\"][0] = await UIDUtils.createUID();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data)\n    .to.have.property(dictionary.keyword.RequestedProcedureID)\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .to.include(\"RP\");",
              "err": {},
              "uuid": "7caec285-4d9c-4f22-a6ce-f5f8cb157530",
              "parentUUID": "83744faf-7a23-4433-834e-f61587369c7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should assign default 'StudyInstanceUID'",
              "fullTitle": "MWL-RS create modality worklist Should assign default 'StudyInstanceUID'",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedMwlItem = structuredClone(testMwlItem);\ndelete clonedMwlItem[dictionary.keyword.StudyInstanceUID];\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data)\n    .to.have.property(dictionary.keyword.StudyInstanceUID)\n    .have.property(\"Value\")\n    .have.property(\"0\");",
              "err": {},
              "uuid": "6b933080-bbd9-4fff-9848-ad208f3687f2",
              "parentUUID": "83744faf-7a23-4433-834e-f61587369c7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should assign default 'AccessionNumber'",
              "fullTitle": "MWL-RS create modality worklist Should assign default 'AccessionNumber'",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedMwlItem = structuredClone(testMwlItem);\ndelete clonedMwlItem[dictionary.keyword.AccessionNumber];\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data)\n    .to.have.property(dictionary.keyword.AccessionNumber)\n    .have.property(\"Value\")\n    .have.property(\"0\");",
              "err": {},
              "uuid": "cdf1c4c4-66df-4996-8ccd-4cc19b4619b7",
              "parentUUID": "83744faf-7a23-4433-834e-f61587369c7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should using 00080060 when sps.00080060 is empty",
              "fullTitle": "MWL-RS create modality worklist Should using 00080060 when sps.00080060 is empty",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedMwlItem = structuredClone(testMwlItem);\ndelete clonedMwlItem[\"00400100\"][\"Value\"][0][\"00080060\"];\nclonedMwlItem[\"00080060\"][\"Value\"][0] = \"OT\";\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedMwlItem])\n});\nexpect(response.statusCode).to.equal(201);\nlet data = await response.json();\nexpect(data)\n    .have.property(\"00400100\")\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .have.property(\"00080060\")\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .to.be.equal(\"OT\");",
              "err": {},
              "uuid": "05994132-a974-4466-b1c7-f05c8317c1a7",
              "parentUUID": "83744faf-7a23-4433-834e-f61587369c7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when patient not exist",
              "fullTitle": "MWL-RS create modality worklist Should raise 404 (Not Found) when patient not exist",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([testMwlItem])\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "9c265d11-c2d7-46bb-90f5-597a4c152f03",
              "parentUUID": "83744faf-7a23-4433-834e-f61587369c7f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0362fa81-5848-47af-899b-ba94491ee917",
            "076a5843-60d3-4526-8c61-a5dbd147fed8",
            "00626409-34b6-4d63-bc36-a582155c4c02",
            "5691cfd4-f58d-4d1a-84c6-ae3a39769d08",
            "7caec285-4d9c-4f22-a6ce-f5f8cb157530",
            "6b933080-bbd9-4fff-9848-ad208f3687f2",
            "cdf1c4c4-66df-4996-8ccd-4cc19b4619b7",
            "05994132-a974-4466-b1c7-f05c8317c1a7",
            "9c265d11-c2d7-46bb-90f5-597a4c152f03"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 61,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "fb448d5c-b1f2-4854-80db-2947c64b6321",
          "title": "MWL-RS delete",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\deleteMWL.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\deleteMWL.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS delete\"",
              "fullTitle": "MWL-RS delete \"before all\" hook in \"MWL-RS delete\"",
              "timedOut": false,
              "duration": 1634,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: [testMwlItem]\n});",
              "err": {},
              "uuid": "5b517e84-95ae-4eff-bc61-5d05557fa47a",
              "parentUUID": "fb448d5c-b1f2-4854-80db-2947c64b6321",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete mwlitem",
              "fullTitle": "MWL-RS delete should delete mwlitem",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let beforeDeletingFetchMwlRes = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Accept\": \"application/dicom+json\"\n    }\n});\nexpect(beforeDeletingFetchMwlRes.statusCode).to.equal(200);\nlet beforeDeletingFetchMwlData = await beforeDeletingFetchMwlRes.json();\nexpect(beforeDeletingFetchMwlData).to.be.an(\"array\");\nexpect(beforeDeletingFetchMwlData).have.lengthOf(1);\nconst deleteRes = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/mwlitems/${studyUID}/${spsID}`\n});\nexpect(deleteRes.statusCode).to.equal(200);",
              "err": {},
              "uuid": "53f6e074-cfef-40e1-bf3c-8113c56cc9f7",
              "parentUUID": "fb448d5c-b1f2-4854-80db-2947c64b6321",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should raise 404 when mwlitem not exist",
              "fullTitle": "MWL-RS delete should raise 404 when mwlitem not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteRes = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/mwlitems/${studyUID}/${spsID}`\n});\nexpect(deleteRes.statusCode).to.equal(404);",
              "err": {},
              "uuid": "dda9e3b1-2744-4eb1-9efe-91391e9d2507",
              "parentUUID": "fb448d5c-b1f2-4854-80db-2947c64b6321",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "53f6e074-cfef-40e1-bf3c-8113c56cc9f7",
            "dda9e3b1-2744-4eb1-9efe-91391e9d2507"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "7daba5a4-cfd3-43ec-82cf-a6bfc1c12d88",
          "title": "MWL-RS search modality worklist",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS search modality worklist\"",
              "fullTitle": "MWL-RS search modality worklist \"before all\" hook in \"MWL-RS search modality worklist\"",
              "timedOut": false,
              "duration": 1619,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([testMwlItem])\n});",
              "err": {},
              "uuid": "d5b2ddd2-fc6c-48ee-aa31-71908b8e3ce8",
              "parentUUID": "7daba5a4-cfd3-43ec-82cf-a6bfc1c12d88",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should get modality worklist",
              "fullTitle": "MWL-RS search modality worklist Should get modality worklist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n            method: \"GET\",\n            url: \"/dicom-web/mwlitems\",\n            headers: {\n                \"Accept\": \"application/dicom+json\"\n            }\n        });\n        expect(response.statusCode).to.be.equal(200);\n        let data = await response.json();\n        expect(data).to.be.an(\"array\");\n        expect(data).have.lengthOf(1);",
              "err": {},
              "uuid": "e3840d71-1402-4d80-98dd-b8a3281bf6e6",
              "parentUUID": "7daba5a4-cfd3-43ec-82cf-a6bfc1c12d88",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "55c47393-56e6-486d-82c2-3c19187a150c",
              "title": "query parameters",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
              "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "4305e288-8b2d-4156-9a3a-2618aa0c22af",
                  "title": "query modality worklist with param 'StudyInstanceUID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'StudyInstanceUID=1.2.276.0.7230010.3.2.102' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'StudyInstanceUID' Should query modality worklist with param 'StudyInstanceUID=1.2.276.0.7230010.3.2.102' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "0174d9a7-18f4-4dd8-89d9-4e023cc62b39",
                      "parentUUID": "4305e288-8b2d-4156-9a3a-2618aa0c22af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'StudyInstanceUID=1.2.3.4' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'StudyInstanceUID' Should query modality worklist with param 'StudyInstanceUID=1.2.3.4' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "eaa7b4aa-d322-4e76-8830-6bbb121b2a8d",
                      "parentUUID": "4305e288-8b2d-4156-9a3a-2618aa0c22af",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0174d9a7-18f4-4dd8-89d9-4e023cc62b39",
                    "eaa7b4aa-d322-4e76-8830-6bbb121b2a8d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "dba386d7-7bd8-4190-90af-b02a45785aae",
                  "title": "query modality worklist with param 'StudyDate'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'StudyDate=19870714' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'StudyDate' Should query modality worklist with param 'StudyDate=19870714' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "eb882676-7e60-420d-bb12-e05925c7550f",
                      "parentUUID": "dba386d7-7bd8-4190-90af-b02a45785aae",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'StudyDate=19900101' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'StudyDate' Should query modality worklist with param 'StudyDate=19900101' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "09278f16-444b-44c8-8a57-e8aef60150bf",
                      "parentUUID": "dba386d7-7bd8-4190-90af-b02a45785aae",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "eb882676-7e60-420d-bb12-e05925c7550f",
                    "09278f16-444b-44c8-8a57-e8aef60150bf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "7348deb5-b5ba-45c1-aab3-64ecf278781b",
                  "title": "query modality worklist with param 'AccessionNumber'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'AccessionNumber=acc-123456' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'AccessionNumber' Should query modality worklist with param 'AccessionNumber=acc-123456' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "04746afc-133f-4d9b-88e3-7d2073b4ff8c",
                      "parentUUID": "7348deb5-b5ba-45c1-aab3-64ecf278781b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'AccessionNumber=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'AccessionNumber' Should query modality worklist with param 'AccessionNumber=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "1311c10e-2143-437a-b062-ad15edc06f32",
                      "parentUUID": "7348deb5-b5ba-45c1-aab3-64ecf278781b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "04746afc-133f-4d9b-88e3-7d2073b4ff8c",
                    "1311c10e-2143-437a-b062-ad15edc06f32"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "8e3981de-8c9b-4fb6-89c5-7b386d8604c2",
                  "title": "query modality worklist with param 'RequestedProcedureID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'RequestedProcedureID=RP488M9439' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'RequestedProcedureID' Should query modality worklist with param 'RequestedProcedureID=RP488M9439' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "f52d76e7-4b67-4a22-96f1-aa96bc0f04a2",
                      "parentUUID": "8e3981de-8c9b-4fb6-89c5-7b386d8604c2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'RequestedProcedureID=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'RequestedProcedureID' Should query modality worklist with param 'RequestedProcedureID=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "71ab9a97-5c18-42e4-aff8-3a4efaedef2e",
                      "parentUUID": "8e3981de-8c9b-4fb6-89c5-7b386d8604c2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f52d76e7-4b67-4a22-96f1-aa96bc0f04a2",
                    "71ab9a97-5c18-42e4-aff8-3a4efaedef2e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "154ca712-ed30-4b55-9dcf-e240dc6ebd8d",
                  "title": "query modality worklist with param 'AdmissionID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'AdmissionID=A-987' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'AdmissionID' Should query modality worklist with param 'AdmissionID=A-987' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "6047f56b-737b-479e-9705-3723a381c3fd",
                      "parentUUID": "154ca712-ed30-4b55-9dcf-e240dc6ebd8d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'AdmissionID=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'AdmissionID' Should query modality worklist with param 'AdmissionID=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "7bfe1306-d30e-417d-9281-3b69e4191909",
                      "parentUUID": "154ca712-ed30-4b55-9dcf-e240dc6ebd8d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6047f56b-737b-479e-9705-3723a381c3fd",
                    "7bfe1306-d30e-417d-9281-3b69e4191909"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "972e490d-143d-4ce4-9d80-21c3730cc032",
                  "title": "query modality worklist with param 'InstitutionName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'InstitutionName=HELL' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'InstitutionName' Should query modality worklist with param 'InstitutionName=HELL' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "622bd937-6075-4427-8033-8bff94129fb0",
                      "parentUUID": "972e490d-143d-4ce4-9d80-21c3730cc032",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'InstitutionName=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'InstitutionName' Should query modality worklist with param 'InstitutionName=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "0bfe2f7a-4a65-4faf-8373-3ff0b79b932d",
                      "parentUUID": "972e490d-143d-4ce4-9d80-21c3730cc032",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "622bd937-6075-4427-8033-8bff94129fb0",
                    "0bfe2f7a-4a65-4faf-8373-3ff0b79b932d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "b5161fec-3e98-492b-926e-cbc63e80db0d",
                  "title": "query modality worklist with param 'InstitutionalDepartmentName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'InstitutionalDepartmentName=FLOOR18' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'InstitutionalDepartmentName' Should query modality worklist with param 'InstitutionalDepartmentName=FLOOR18' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "c659904f-6239-4343-8aa3-acc823a035ea",
                      "parentUUID": "b5161fec-3e98-492b-926e-cbc63e80db0d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'InstitutionalDepartmentName=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'InstitutionalDepartmentName' Should query modality worklist with param 'InstitutionalDepartmentName=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "bce302c7-6a65-456b-85f5-75e218784bd0",
                      "parentUUID": "b5161fec-3e98-492b-926e-cbc63e80db0d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c659904f-6239-4343-8aa3-acc823a035ea",
                    "bce302c7-6a65-456b-85f5-75e218784bd0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "08b291b9-1fdb-4f72-b6f4-3afabcf8f6b9",
                  "title": "query modality worklist with param 'IssuerOfAccessionNumberSequence.LocalNamespaceEntityID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=123456789' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAccessionNumberSequence.LocalNamespaceEntityID' Should query modality worklist with param 'IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=123456789' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "e048fb08-ad23-4314-a4d8-8808104721e7",
                      "parentUUID": "08b291b9-1fdb-4f72-b6f4-3afabcf8f6b9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAccessionNumberSequence.LocalNamespaceEntityID' Should query modality worklist with param 'IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "99d91513-3140-44f2-8f76-a948bd040f5f",
                      "parentUUID": "08b291b9-1fdb-4f72-b6f4-3afabcf8f6b9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e048fb08-ad23-4314-a4d8-8808104721e7",
                    "99d91513-3140-44f2-8f76-a948bd040f5f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "a04c4cc4-ab73-487b-977b-7388bf731f9f",
                  "title": "query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityID=29c737e3-b739-4169-aca7-eea07a808643' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityID' Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityID=29c737e3-b739-4169-aca7-eea07a808643' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "52d641b7-4f0a-4c87-924c-7b5489e5052c",
                      "parentUUID": "a04c4cc4-ab73-487b-977b-7388bf731f9f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityID=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityID' Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityID=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "529f79b4-692d-4560-8532-2316c705aa5b",
                      "parentUUID": "a04c4cc4-ab73-487b-977b-7388bf731f9f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "52d641b7-4f0a-4c87-924c-7b5489e5052c",
                    "529f79b4-692d-4560-8532-2316c705aa5b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "5c32c165-1235-4675-990a-15208db5eccb",
                  "title": "query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityIDType'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityIDType=UUID' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityIDType' Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityIDType=UUID' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "3e0a2851-518f-4c8b-9d8e-7200d60d2acf",
                      "parentUUID": "5c32c165-1235-4675-990a-15208db5eccb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityIDType=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityIDType' Should query modality worklist with param 'IssuerOfAccessionNumberSequence.UniversalEntityIDType=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "6487797f-a471-4fae-8a9e-bc4c319b15fa",
                      "parentUUID": "5c32c165-1235-4675-990a-15208db5eccb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3e0a2851-518f-4c8b-9d8e-7200d60d2acf",
                    "6487797f-a471-4fae-8a9e-bc4c319b15fa"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "e7789a83-3d0a-4dbd-8158-44592e234faa",
                  "title": "query modality worklist with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=987654321' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID' Should query modality worklist with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=987654321' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "120e0ad6-3653-4e76-a46a-814667a6fdce",
                      "parentUUID": "e7789a83-3d0a-4dbd-8158-44592e234faa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID' Should query modality worklist with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "6539caec-3a46-4bfa-9396-e00802750d59",
                      "parentUUID": "e7789a83-3d0a-4dbd-8158-44592e234faa",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "120e0ad6-3653-4e76-a46a-814667a6fdce",
                    "6539caec-3a46-4bfa-9396-e00802750d59"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "30f2e26e-f191-4a10-ad0a-d337d721c14e",
                  "title": "query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=a8f1bce0-efbf-4dea-a85b-84976b5020d0' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityID' Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=a8f1bce0-efbf-4dea-a85b-84976b5020d0' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "41dfae8e-08dc-4056-b89b-430c8a6e12e5",
                      "parentUUID": "30f2e26e-f191-4a10-ad0a-d337d721c14e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityID' Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "a0221740-75c6-481f-bca1-378f1f2ceb1a",
                      "parentUUID": "30f2e26e-f191-4a10-ad0a-d337d721c14e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "41dfae8e-08dc-4056-b89b-430c8a6e12e5",
                    "a0221740-75c6-481f-bca1-378f1f2ceb1a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "e6a76ee7-94cd-4540-9a19-07c050f2b964",
                  "title": "query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=UUID' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType' Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=UUID' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "120c779a-f61f-4fd0-9dc0-28b82bfbb6fe",
                      "parentUUID": "e6a76ee7-94cd-4540-9a19-07c050f2b964",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType' Should query modality worklist with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "325cd3de-67e2-431b-8dc0-049d9c10555d",
                      "parentUUID": "e6a76ee7-94cd-4540-9a19-07c050f2b964",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "120c779a-f61f-4fd0-9dc0-28b82bfbb6fe",
                    "325cd3de-67e2-431b-8dc0-049d9c10555d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "1efaf21d-08e2-40b0-be44-077e55bad971",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationAETitle'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationAETitle=WORKLIST' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationAETitle' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationAETitle=WORKLIST' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "2236ebfa-d671-4e21-9933-56864ef67d59",
                      "parentUUID": "1efaf21d-08e2-40b0-be44-077e55bad971",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationAETitle=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationAETitle' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationAETitle=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "f2f6db3c-b482-4b4b-af5a-8ae86fab16bd",
                      "parentUUID": "1efaf21d-08e2-40b0-be44-077e55bad971",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2236ebfa-d671-4e21-9933-56864ef67d59",
                    "f2f6db3c-b482-4b4b-af5a-8ae86fab16bd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "2c384dd7-6fec-42c8-be4b-76e54474c9e6",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationName=GG' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationName' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationName=GG' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "babd86a6-09d0-4146-a82f-30af56f1d956",
                      "parentUUID": "2c384dd7-6fec-42c8-be4b-76e54474c9e6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationName=foobar' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationName' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledStationName=foobar' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "ad50ec91-8753-4a3f-b0d0-ecc163d55530",
                      "parentUUID": "2c384dd7-6fec-42c8-be4b-76e54474c9e6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "babd86a6-09d0-4146-a82f-30af56f1d956",
                    "ad50ec91-8753-4a3f-b0d0-ecc163d55530"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "3678be9a-294a-45ea-be5f-b330d1a7b1af",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartDate'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartDate=20231021' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartDate' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartDate=20231021' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "9e900469-9bc7-4102-bd83-bf92b8c73a1f",
                      "parentUUID": "3678be9a-294a-45ea-be5f-b330d1a7b1af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartDate=19990101' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartDate' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartDate=19990101' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "c3cb5ef1-dd41-4c7e-b7e9-a70f4e1c61da",
                      "parentUUID": "3678be9a-294a-45ea-be5f-b330d1a7b1af",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9e900469-9bc7-4102-bd83-bf92b8c73a1f",
                    "c3cb5ef1-dd41-4c7e-b7e9-a70f4e1c61da"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "7c51fba8-93b5-436b-91cf-56aa0ec3169b",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndDate'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndDate=20231212' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndDate' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndDate=20231212' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "c73cbd3b-73c4-4837-9078-a53b36698a47",
                      "parentUUID": "7c51fba8-93b5-436b-91cf-56aa0ec3169b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndDate=19990101' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndDate' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndDate=19990101' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "dc18017b-f861-4ed1-95bf-0a4ffccdb289",
                      "parentUUID": "7c51fba8-93b5-436b-91cf-56aa0ec3169b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c73cbd3b-73c4-4837-9078-a53b36698a47",
                    "dc18017b-f861-4ed1-95bf-0a4ffccdb289"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "dcd7dad9-5c82-4736-a406-8adb23a866cb",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartTime'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartTime=003525.475' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartTime' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartTime=003525.475' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "0ff6e9ed-ea4e-4ac3-b5df-3c9c7fd9755e",
                      "parentUUID": "dcd7dad9-5c82-4736-a406-8adb23a866cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartTime=013525' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartTime' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStartTime=013525' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "347742ec-964f-4991-8245-d72221b8d361",
                      "parentUUID": "dcd7dad9-5c82-4736-a406-8adb23a866cb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0ff6e9ed-ea4e-4ac3-b5df-3c9c7fd9755e",
                    "347742ec-964f-4991-8245-d72221b8d361"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "c9e652ab-99da-4b23-a895-7ba71d21c987",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndTime'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndTime=123525.475' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndTime' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndTime=123525.475' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "a8544c14-8247-4331-bde6-7fbf9707e898",
                      "parentUUID": "c9e652ab-99da-4b23-a895-7ba71d21c987",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndTime=003525' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndTime' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepEndTime=003525' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "0097eddf-d04a-49d6-a57f-2b040dd89c94",
                      "parentUUID": "c9e652ab-99da-4b23-a895-7ba71d21c987",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a8544c14-8247-4331-bde6-7fbf9707e898",
                    "0097eddf-d04a-49d6-a57f-2b040dd89c94"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "abbe4037-8104-4dc9-8f80-dc1e2bd8d44a",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledPerformingPhysicianName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledPerformingPhysicianName=ENT00373' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledPerformingPhysicianName' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledPerformingPhysicianName=ENT00373' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "fb498ee8-a504-4169-bb08-2d31e0401278",
                      "parentUUID": "abbe4037-8104-4dc9-8f80-dc1e2bd8d44a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledPerformingPhysicianName=ENT123' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledPerformingPhysicianName' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledPerformingPhysicianName=ENT123' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "45d33faf-5f07-4ba3-adf1-8960eb5e20e9",
                      "parentUUID": "abbe4037-8104-4dc9-8f80-dc1e2bd8d44a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fb498ee8-a504-4169-bb08-2d31e0401278",
                    "45d33faf-5f07-4ba3-adf1-8960eb5e20e9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "1f143f61-a8bf-4b96-a7fd-15ccf94378dc",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepDescription'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepDescription=EXAM-DESC' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepDescription' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepDescription=EXAM-DESC' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "07b11e14-b5c5-4c42-b005-1db96122c0d2",
                      "parentUUID": "1f143f61-a8bf-4b96-a7fd-15ccf94378dc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepDescription=ENT123' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepDescription' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepDescription=ENT123' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "913020bc-35b3-40a3-869c-e10978ba080a",
                      "parentUUID": "1f143f61-a8bf-4b96-a7fd-15ccf94378dc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "07b11e14-b5c5-4c42-b005-1db96122c0d2",
                    "913020bc-35b3-40a3-869c-e10978ba080a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "ef0da078-1b3b-4bc3-8011-533a642fd569",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepID=SPS-00000002' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepID' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepID=SPS-00000002' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "572a7ff6-0e04-455d-9a37-c9b83b12136b",
                      "parentUUID": "ef0da078-1b3b-4bc3-8011-533a642fd569",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepID=ENT123' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepID' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepID=ENT123' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "6c6a1c4d-dba5-4a05-bb93-4ef7d949c91a",
                      "parentUUID": "ef0da078-1b3b-4bc3-8011-533a642fd569",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "572a7ff6-0e04-455d-9a37-c9b83b12136b",
                    "6c6a1c4d-dba5-4a05-bb93-4ef7d949c91a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "d0cb737a-0cc6-4bb2-b188-fbbdbf4386d2",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStatus'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStatus=SCHEDULED' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStatus' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStatus=SCHEDULED' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "7a3f1d63-bc8f-43e9-baa6-1fb534a8448c",
                      "parentUUID": "d0cb737a-0cc6-4bb2-b188-fbbdbf4386d2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStatus=COMPLETED' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStatus' Should query modality worklist with param 'ScheduledProcedureStepSequence.ScheduledProcedureStepStatus=COMPLETED' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "4acacffa-7918-4905-923a-434226cc6fe0",
                      "parentUUID": "d0cb737a-0cc6-4bb2-b188-fbbdbf4386d2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7a3f1d63-bc8f-43e9-baa6-1fb534a8448c",
                    "4acacffa-7918-4905-923a-434226cc6fe0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "30f05bc8-1876-4027-8bf6-93893ca281d6",
                  "title": "query modality worklist with param 'PatientID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "file": "\\test\\api\\dicom-web\\MWL-RS\\searchMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query modality worklist with param 'PatientID=123456' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'PatientID' Should query modality worklist with param 'PatientID=123456' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "b8a9c8c5-7c6c-4c7b-8701-82943bd87e68",
                      "parentUUID": "30f05bc8-1876-4027-8bf6-93893ca281d6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query modality worklist with param 'PatientID=111111' and get modality worklist successfully",
                      "fullTitle": "MWL-RS search modality worklist query parameters query modality worklist with param 'PatientID' Should query modality worklist with param 'PatientID=111111' and get modality worklist successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/mwlitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                      "err": {},
                      "uuid": "944f62cc-370d-4401-8b9c-ddf426236326",
                      "parentUUID": "30f05bc8-1876-4027-8bf6-93893ca281d6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b8a9c8c5-7c6c-4c7b-8701-82943bd87e68",
                    "944f62cc-370d-4401-8b9c-ddf426236326"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "e3840d71-1402-4d80-98dd-b8a3281bf6e6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "19fcd90a-ec7f-421a-8ec4-28d23bcd1d1c",
          "title": "MWL-RS change filtered modality worklist status for user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\withUser\\changeFilteredMWLStatusWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\withUser\\changeFilteredMWLStatusWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS change filtered modality worklist status for user\"",
              "fullTitle": "MWL-RS change filtered modality worklist status for user \"before all\" hook in \"MWL-RS change filtered modality worklist status for user\"",
              "timedOut": false,
              "duration": 132,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFile = resolve(__dirname, \"../../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\");\nawait storeInstanceWithUserForTest(testDicomFile, TEST_USERS[0]);\nawait TestMwlUtils.ByUser.createMockMwlItem(testMwlItem, TEST_USERS[0]);\nlet clonedMwlItem = structuredClone(testMwlItem);\nclonedMwlItem[dictionary.keyword.StudyInstanceUID][\"Value\"][0] = await UIDUtils.createUID();\nclonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledProcedureStepID][\"Value\"][0] = \"SPS-USA\";\nclonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledStationName][\"Value\"][0] = \"USA\";\nawait TestMwlUtils.ByUser.createMockMwlItem(clonedMwlItem, TEST_USERS[0]);",
              "err": {},
              "uuid": "daf58c77-d5fe-443f-8532-195a6c3aa35c",
              "parentUUID": "19fcd90a-ec7f-421a-8ec4-28d23bcd1d1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should change filtered modality worklist status for user 'test'",
              "fullTitle": "MWL-RS change filtered modality worklist status for user Should change filtered modality worklist status for user 'test'",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: \"/dicom-web/mwlitems/status/READY?ScheduledProcedureStepSequence.ScheduledStationName=USA\",\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    params: {\n        status: \"READY\"\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait ChangeFilteredMwlItemStatusController(request, response);\n\nlet queryRequest = createRequest({\n    url: \"/dicom-web/mwlitems\",\n    method: \"GET\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    user: TEST_USERS[0]\n});\nlet queryResponse = createResponse();\nawait GetMwlItemController(queryRequest, queryResponse);\nexpect(queryResponse.statusCode).to.equal(200);\nlet mwlItems = await queryResponse._getJSONData();\nexpect(mwlItems).to.be.a(\"array\");\nexpect(mwlItems).have.lengthOf(2);\nlet usaMwlItem = mwlItems.find(mwlItem => mwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledStationName][\"Value\"][0] === \"USA\");\nexpect(usaMwlItem)\n.have.property(dictionary.keyword.ScheduledProcedureStepSequence)\n.have.property(\"Value\")\n.have.property(\"0\")\n.have.property(dictionary.keyword.ScheduledProcedureStepStatus)\n.have.property(\"Value\")\n.have.property(\"0\")\n.to.be.equal(\"READY\");\nlet ggMwlItem = mwlItems.find(mwlItem => mwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledStationName][\"Value\"][0] === \"GG\");\nexpect(ggMwlItem)\n.have.property(dictionary.keyword.ScheduledProcedureStepSequence)\n.have.property(\"Value\")\n.have.property(\"0\")\n.have.property(dictionary.keyword.ScheduledProcedureStepStatus)\n.have.property(\"Value\")\n.have.property(\"0\")\n.to.be.equal(\"SCHEDULED\");",
              "err": {},
              "uuid": "5f513323-a355-4c61-b7a3-c1a1f29ba2ef",
              "parentUUID": "19fcd90a-ec7f-421a-8ec4-28d23bcd1d1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 when search modality worklist by user 'oTest'",
              "fullTitle": "MWL-RS change filtered modality worklist status for user Should return 404 when search modality worklist by user 'oTest'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: \"/dicom-web/mwlitems\",\n    method: \"GET\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nawait GetMwlItemController(request, response);\nexpect(response.statusCode).to.equal(204);",
              "err": {},
              "uuid": "af357993-04a4-45cb-be94-0af4c12433c0",
              "parentUUID": "19fcd90a-ec7f-421a-8ec4-28d23bcd1d1c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f513323-a355-4c61-b7a3-c1a1f29ba2ef",
            "af357993-04a4-45cb-be94-0af4c12433c0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "5b7be94c-b1bb-4240-b81b-3502a4b79e0d",
          "title": "MWL-RS change MWL status for user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\withUser\\changeMWLStatusWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\withUser\\changeMWLStatusWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS change MWL status for user\"",
              "fullTitle": "MWL-RS change MWL status for user \"before all\" hook in \"MWL-RS change MWL status for user\"",
              "timedOut": false,
              "duration": 230,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFile = resolve(__dirname, \"../../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\");\nawait storeInstanceWithUserForTest(testDicomFile, TEST_USERS[0]);\nawait storeInstanceWithUserForTest(testDicomFile, TEST_USERS[2]);\nawait TestMwlUtils.ByUser.createMockMwlItem(testMwlItem, TEST_USERS[0]);\nawait TestMwlUtils.ByUser.createMockMwlItem(testMwlItem, TEST_USERS[2]);",
              "err": {},
              "uuid": "58ea8c7d-a6bc-4a1d-8935-813f10c7dc60",
              "parentUUID": "5b7be94c-b1bb-4240-b81b-3502a4b79e0d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should change MWL status SCHEDULED to READY for user 'test'",
              "fullTitle": "MWL-RS change MWL status for user Should change MWL status SCHEDULED to READY for user 'test'",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/mwlitems/${mwlUID}/${spsID}/status/READY`,\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    params: {\n        studyUID: mwlUID,\n        spsID: spsID,\n        status: \"READY\"\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait ChangeMwlItemStatusController(request, response);\nexpect(response.statusCode).to.equal(200);\nlet queryRequest = createRequest({\n    url: \"/dicom-web/mwlitems\",\n    method: \"GET\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    user: TEST_USERS[0]\n});\nlet queryResponse = createResponse();\nawait GetMwlItemController(queryRequest, queryResponse);\nexpect(queryResponse.statusCode).to.equal(200);\nlet mwlItems = await queryResponse._getJSONData();\nexpect(mwlItems).to.be.a(\"array\");\nexpect(mwlItems).have.lengthOf(1);\nexpect(mwlItems[0])\n.have.property(dictionary.keyword.ScheduledProcedureStepSequence)\n.have.property(\"Value\")\n.have.property(\"0\")\n.have.property(dictionary.keyword.ScheduledProcedureStepStatus)\n.have.property(\"Value\")\n.have.property(\"0\")\n.to.be.equal(\"READY\");",
              "err": {},
              "uuid": "bddfd808-1311-409f-8bd1-4ad2aab8b470",
              "parentUUID": "5b7be94c-b1bb-4240-b81b-3502a4b79e0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 when search modality worklist by user 'oTest'",
              "fullTitle": "MWL-RS change MWL status for user Should return 404 when search modality worklist by user 'oTest'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: \"/dicom-web/mwlitems\",\n    method: \"GET\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nawait GetMwlItemController(request, response);\nexpect(response.statusCode).to.equal(200);\nlet mwlItems = await response._getJSONData();\nexpect(mwlItems).to.be.a(\"array\");\nexpect(mwlItems).have.lengthOf(1);\nexpect(mwlItems[0])\n.have.property(dictionary.keyword.ScheduledProcedureStepSequence)\n.have.property(\"Value\")\n.have.property(\"0\")\n.have.property(dictionary.keyword.ScheduledProcedureStepStatus)\n.have.property(\"Value\")\n.have.property(\"0\")\n.to.be.equal(\"SCHEDULED\");",
              "err": {},
              "uuid": "7cd9b3cc-a65d-4759-bed9-d329a7721e66",
              "parentUUID": "5b7be94c-b1bb-4240-b81b-3502a4b79e0d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bddfd808-1311-409f-8bd1-4ad2aab8b470",
            "7cd9b3cc-a65d-4759-bed9-d329a7721e66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "1fd545e7-779f-4fc7-82e1-b334832c5bc8",
          "title": "MWL-RS count MWL with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\withUser\\countMWLWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\withUser\\countMWLWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS count MWL with user\"",
              "fullTitle": "MWL-RS count MWL with user \"before all\" hook in \"MWL-RS count MWL with user\"",
              "timedOut": false,
              "duration": 237,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet dicomFile = resolve(__dirname, \"../../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\");\nawait storeInstanceWithUserForTest(dicomFile, TEST_USERS[0]);\nawait storeInstanceWithUserForTest(dicomFile, TEST_USERS[2]);\nawait TestMwlUtils.ByUser.createMockMwlItem(testMwlItem, TEST_USERS[0]);\nawait TestMwlUtils.ByUser.createMockMwlItem(testMwlItem, TEST_USERS[2]);\nlet clonedMwlItem = structuredClone(testMwlItem);\nclonedMwlItem[dictionary.keyword.StudyInstanceUID][\"Value\"][0] = await UIDUtils.createUID();\nclonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledProcedureStepID][\"Value\"][0] = \"SPS-USA\";\nclonedMwlItem[dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledStationName][\"Value\"][0] = \"USA\";\nawait TestMwlUtils.ByUser.createMockMwlItem(clonedMwlItem, TEST_USERS[0]);",
              "err": {},
              "uuid": "db20f37d-0af8-469a-9c41-d4905cb5c310",
              "parentUUID": "1fd545e7-779f-4fc7-82e1-b334832c5bc8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should count MWL with user and expect 2",
              "fullTitle": "MWL-RS count MWL with user Should count MWL with user and expect 2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: \"/dicom-web/mwlitems/count\",\n    method: \"GET\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CountMwlItemController(request, response);\nexpect(response.statusCode).to.equal(200);\nlet data = response._getJSONData();\nexpect(data).to.have.property(\"count\").to.be.equal(2);",
              "err": {},
              "uuid": "64df1f0b-a6fb-4737-b1f1-2aacbd628b5e",
              "parentUUID": "1fd545e7-779f-4fc7-82e1-b334832c5bc8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "64df1f0b-a6fb-4737-b1f1-2aacbd628b5e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "fd51a2b0-4f76-4f5b-bbb3-7fa9610f3497",
          "title": "MWL-RS delete with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\withUser\\deleteMWLWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\withUser\\deleteMWLWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS delete with user\"",
              "fullTitle": "MWL-RS delete with user \"before all\" hook in \"MWL-RS delete with user\"",
              "timedOut": false,
              "duration": 256,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor(let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet dicomFile = resolve(__dirname, \"../../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\");\nawait storeInstanceWithUserForTest(dicomFile, TEST_USERS[0]);\nawait storeInstanceWithUserForTest(dicomFile, TEST_USERS[2]);\nawait TestMwlUtils.ByUser.createMockMwlItem(testMwlItem, TEST_USERS[0]);\nawait TestMwlUtils.ByUser.createMockMwlItem(testMwlItem, TEST_USERS[2]);",
              "err": {},
              "uuid": "aca8348c-e4c4-4d96-b642-3d22a5806681",
              "parentUUID": "fd51a2b0-4f76-4f5b-bbb3-7fa9610f3497",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete mwlitem",
              "fullTitle": "MWL-RS delete with user should delete mwlitem",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let searchBeforeDeleteRequest = createRequest({\n    url: \"/dicom-web/mwlitems\",\n    method: \"GET\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    user: TEST_USERS[0]\n});\nlet searchBeforeDeleteResponse = createResponse();\nawait GetMwlItemController(searchBeforeDeleteRequest, searchBeforeDeleteResponse);\nexpect(searchBeforeDeleteResponse.statusCode).to.equal(200);\nlet searchBeforeDeleteData = searchBeforeDeleteResponse._getJSONData();\nexpect(searchBeforeDeleteData).to.be.an(\"array\");\nexpect(searchBeforeDeleteData).have.lengthOf(1);\nlet studyUID = searchBeforeDeleteData[0][dictionary.keyword.StudyInstanceUID][\"Value\"][0];\nlet spsID = searchBeforeDeleteData[0][dictionary.keyword.ScheduledProcedureStepSequence][\"Value\"][0][dictionary.keyword.ScheduledProcedureStepID][\"Value\"][0];\nlet deleteRequest = createRequest({\n    url: `/dicom-web/mwlitems/${studyUID}/${spsID}`,\n    method: \"DELETE\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    params: {\n        studyUID,\n        spsID\n    },\n    user: TEST_USERS[0]\n});\nlet deleteResponse = createResponse();\nawait DeleteMwlItemController(deleteRequest, deleteResponse);\nexpect(deleteResponse.statusCode).to.equal(200);\nlet searchAfterDeleteRequest = createRequest({\n    url: \"/dicom-web/mwlitems\",\n    method: \"GET\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    user: TEST_USERS[0]\n});\nlet searchAfterDeleteResponse = createResponse();\nawait GetMwlItemController(searchAfterDeleteRequest, searchAfterDeleteResponse);\nexpect(searchAfterDeleteResponse.statusCode).to.equal(204);\nlet searchUser2Request = createRequest({\n    url: \"/dicom-web/mwlitems\",\n    method: \"GET\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    user: TEST_USERS[2]\n});\nlet searchUser2Response = createResponse();\nawait GetMwlItemController(searchUser2Request, searchUser2Response);\nexpect(searchUser2Response.statusCode).to.equal(200);\nlet searchUser2Data = searchUser2Response._getJSONData();\nexpect(searchUser2Data).to.be.an(\"array\");\nexpect(searchUser2Data).have.lengthOf(1);",
              "err": {},
              "uuid": "d13f7859-1965-4438-909a-ff9b3a92b6d7",
              "parentUUID": "fd51a2b0-4f76-4f5b-bbb3-7fa9610f3497",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d13f7859-1965-4438-909a-ff9b3a92b6d7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "63fba93a-d7d8-4fd8-a8b6-edded6142ebd",
          "title": "MWL-RS search modality worklist with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\MWL-RS\\withUser\\searchMWLWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\MWL-RS\\withUser\\searchMWLWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MWL-RS search modality worklist with user\"",
              "fullTitle": "MWL-RS search modality worklist with user \"before all\" hook in \"MWL-RS search modality worklist with user\"",
              "timedOut": false,
              "duration": 118,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFile = resolve(__dirname, \"../../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\");\nawait storeInstanceWithUserForTest(testDicomFile, TEST_USERS[0]);\nlet request = createRequest({\n    url: \"/dicom-web/mwlitems\",\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: [structuredClone(testMwlItem)],\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CreateMwlItemController(request, response);\nexpect(response.statusCode).to.equal(201);",
              "err": {},
              "uuid": "72b0f95c-3699-4dfa-b790-1c3f2fef1dc2",
              "parentUUID": "63fba93a-d7d8-4fd8-a8b6-edded6142ebd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should search modality worklist with user 'test'",
              "fullTitle": "MWL-RS search modality worklist with user Should search modality worklist with user 'test'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: \"/dicom-web/mwlitems\",\n    method: \"GET\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait GetMwlItemController(request, response);\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "905fcaad-af43-4015-833e-ac7c8092eb37",
              "parentUUID": "63fba93a-d7d8-4fd8-a8b6-edded6142ebd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 when search modality worklist by user 'oTest'",
              "fullTitle": "MWL-RS search modality worklist with user Should return 404 when search modality worklist by user 'oTest'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: \"/dicom-web/mwlitems\",\n    method: \"GET\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nawait GetMwlItemController(request, response);\nexpect(response.statusCode).to.equal(204);",
              "err": {},
              "uuid": "f31f03ed-a63f-4bbe-8912-e9a6822b8585",
              "parentUUID": "63fba93a-d7d8-4fd8-a8b6-edded6142ebd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "905fcaad-af43-4015-833e-ac7c8092eb37",
            "f31f03ed-a63f-4bbe-8912-e9a6822b8585"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "7048d8c7-c76f-4095-bb0f-b3e0a0ed1afd",
          "title": "PAM-RS create patient '/dicom-web/patients'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\PAM-RS\\createPatient.test.js",
          "file": "\\test\\api\\dicom-web\\PAM-RS\\createPatient.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"PAM-RS create patient '/dicom-web/patients'\"",
              "fullTitle": "PAM-RS create patient '/dicom-web/patients' \"before all\" hook in \"PAM-RS create patient '/dicom-web/patients'\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}",
              "err": {},
              "uuid": "54b0fab1-0800-4a0b-8254-2d5da78302e2",
              "parentUUID": "7048d8c7-c76f-4095-bb0f-b3e0a0ed1afd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create patient",
              "fullTitle": "PAM-RS create patient '/dicom-web/patients' Should create patient",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/patients\",\n    body: structuredClone(testPatient)\n});\nexpect(response.statusCode).to.equal(201);\nlet createdPatient = await response.json();\nexpect(createdPatient).to.be.a(\"object\");\nexpect(createdPatient).have.property(\"00100010\").to.be.deep.equal(testPatient[\"00100010\"]);\nexpect(createdPatient).have.property(\"00100020\").to.be.deep.equal(testPatient[\"00100020\"]);",
              "err": {},
              "uuid": "31a7e547-ee18-452a-aa6c-1a21df086e83",
              "parentUUID": "7048d8c7-c76f-4095-bb0f-b3e0a0ed1afd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "31a7e547-ee18-452a-aa6c-1a21df086e83"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "b7246d80-fead-4d8c-9148-bf475e6cd0dd",
          "title": "PAM-RS update patient '/dicom-web/patients'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\PAM-RS\\updatePatient.test.js",
          "file": "\\test\\api\\dicom-web\\PAM-RS\\updatePatient.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"PAM-RS update patient '/dicom-web/patients'\"",
              "fullTitle": "PAM-RS update patient '/dicom-web/patients' \"before all\" hook in \"PAM-RS update patient '/dicom-web/patients'\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/patients\",\n    body: structuredClone(testPatient)\n});",
              "err": {},
              "uuid": "e9f74ec8-acaf-4b9b-a463-7e432375faf3",
              "parentUUID": "b7246d80-fead-4d8c-9148-bf475e6cd0dd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should update patient",
              "fullTitle": "PAM-RS update patient '/dicom-web/patients' Should update patient",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedPatient = structuredClone(testPatient);\nclonedPatient[\"00100010\"][\"Value\"][0][\"Alphabetic\"] = \"nobody\";\nlet response = await inject(app, {\n    method: \"put\",\n    url: `/dicom-web/patients/${patientID}`,\n    body: clonedPatient\n});\nexpect(response.statusCode).to.equal(200);\nlet updatedPatient = await response.json();\nexpect(updatedPatient).to.be.a(\"object\");\nexpect(updatedPatient)\n.have.property(\"00100010\")\n.have.property(\"Value\")\n.to.be.deep.equal([{ \"Alphabetic\": \"nobody\" }]);",
              "err": {},
              "uuid": "92f1d36c-48aa-4a1c-a064-1b8dce810aa4",
              "parentUUID": "b7246d80-fead-4d8c-9148-bf475e6cd0dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "92f1d36c-48aa-4a1c-a064-1b8dce810aa4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "87033447-899a-4958-956c-3e63cfcd7927",
          "title": "PAM-RS create patient with user '/dicom-web/patients'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\PAM-RS\\withUser\\createPatientWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\PAM-RS\\withUser\\createPatientWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"PAM-RS create patient with user '/dicom-web/patients'\"",
              "fullTitle": "PAM-RS create patient with user '/dicom-web/patients' \"before all\" hook in \"PAM-RS create patient with user '/dicom-web/patients'\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}",
              "err": {},
              "uuid": "d25a75f0-eada-43a3-97c6-4f732c6c3c10",
              "parentUUID": "87033447-899a-4958-956c-3e63cfcd7927",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create patient with user",
              "fullTitle": "PAM-RS create patient with user '/dicom-web/patients' Should create patient with user",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"POST\",\n    url: \"/dicom-web/patients\",\n    body: structuredClone(testPatient)\n});\nrequest.user = TEST_USERS[0];\nlet response = createResponse();\nlet createPatientService = new CreatePatientService(request, response);\nawait createPatientService.create();\nrequest = createRequest({\n    method: \"POST\",\n    url: \"/dicom-web/patients\",\n    body: structuredClone(testPatient)\n});\nrequest.user = TEST_USERS[1];\nresponse = createResponse();\ncreatePatientService = new CreatePatientService(request, response);\nawait createPatientService.create();\nif (process.env.TEST_DB_TYPE === \"sql\") {\n    let patient = await PatientModel.findAll({ where: { x00100020: testPatient[\"00100020\"].Value[0] } });\n    // because of two users have same group, so the patient will be created only once\n    expect(patient).to.be.an(\"array\").to.have.lengthOf(1);\n    expect(patient[0].user_id).to.be.not.equal(null);\n}",
              "err": {},
              "uuid": "ff176ea9-4629-4c65-a223-9796fd0a6e6a",
              "parentUUID": "87033447-899a-4958-956c-3e63cfcd7927",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create 2 patients with different group",
              "fullTitle": "PAM-RS create patient with user '/dicom-web/patients' should create 2 patients with different group",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"POST\",\n    url: \"/dicom-web/patients\",\n    body: structuredClone(testPatient)\n});\nrequest.user = TEST_USERS[0];\nlet response = createResponse();\nlet createPatientService = new CreatePatientService(request, response);\nawait createPatientService.create();\nrequest.user = TEST_USERS[2];\nresponse = createResponse();\ncreatePatientService = new CreatePatientService(request, response);\nawait createPatientService.create();\nif (process.env.TEST_DB_TYPE === \"sql\") {\n    let patient = await PatientModel.findAll({ where: { x00100020: testPatient[\"00100020\"].Value[0] } });\n    expect(patient).to.be.an(\"array\").to.have.lengthOf(2);\n    expect(patient[0].user_id).to.be.not.equal(patient[1].user_id);\n}",
              "err": {},
              "uuid": "a5abfd27-149e-451d-95bc-5da25e6b7193",
              "parentUUID": "87033447-899a-4958-956c-3e63cfcd7927",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff176ea9-4629-4c65-a223-9796fd0a6e6a",
            "a5abfd27-149e-451d-95bc-5da25e6b7193"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "3ca3b363-82f8-44f5-acb0-76ac70b456aa",
          "title": "Query instance by label name",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\label\\queryInstanceByLabel.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\label\\queryInstanceByLabel.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Query instance by label name\"",
              "fullTitle": "Query instance by label name \"before all\" hook in \"Query instance by label name\"",
              "timedOut": false,
              "duration": 1658,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/label/${INSTANCE_UID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(201);",
              "err": {},
              "uuid": "fd25925e-9b1a-4754-b662-ec8880013c82",
              "parentUUID": "3ca3b363-82f8-44f5-acb0-76ac70b456aa",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should query instance by label",
              "fullTitle": "Query instance by label name Should query instance by label",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?labelName=test`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\n\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(1);\nexpect(data[0][\"0020000D\"][\"Value\"][0]).to.equal(STUDY_UID);\nexpect(data[0][\"0020000E\"][\"Value\"][0]).to.equal(SERIES_UID);\nexpect(data[0][\"00080018\"][\"Value\"][0]).to.equal(INSTANCE_UID);",
              "err": {},
              "uuid": "ddf5cbf1-132e-4cdf-adac-f064cf827b20",
              "parentUUID": "3ca3b363-82f8-44f5-acb0-76ac70b456aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ddf5cbf1-132e-4cdf-adac-f064cf827b20"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "9f31fa2d-ae9d-48ab-b9a1-3b59bb93a2aa",
          "title": "Query series by label name",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\label\\querySeriesByLabel.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\label\\querySeriesByLabel.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Query series by label name\"",
              "fullTitle": "Query series by label name \"before all\" hook in \"Query series by label name\"",
              "timedOut": false,
              "duration": 1688,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/label/${SERIES_UID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(201);",
              "err": {},
              "uuid": "9386c381-a737-4f2b-bc9f-4e111684f3e8",
              "parentUUID": "9f31fa2d-ae9d-48ab-b9a1-3b59bb93a2aa",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should query series by label",
              "fullTitle": "Query series by label name Should query series by label",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?labelName=test`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\n\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(1);\nexpect(data[0][\"0020000D\"][\"Value\"][0]).to.equal(STUDY_UID);\nexpect(data[0][\"0020000E\"][\"Value\"][0]).to.equal(SERIES_UID);",
              "err": {},
              "uuid": "fbef33c3-9b83-4909-ba52-baf8cf029558",
              "parentUUID": "9f31fa2d-ae9d-48ab-b9a1-3b59bb93a2aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fbef33c3-9b83-4909-ba52-baf8cf029558"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "cc73469b-9e51-44bd-9989-1d02f81998f3",
          "title": "Query studies by label name",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\label\\queryStudiesByLabel.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\label\\queryStudiesByLabel.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Query studies by label name\"",
              "fullTitle": "Query studies by label name \"before all\" hook in \"Query studies by label name\"",
              "timedOut": false,
              "duration": 2225,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(201);",
              "err": {},
              "uuid": "0b01a0c5-fe5f-418f-8f3b-03771ea09967",
              "parentUUID": "cc73469b-9e51-44bd-9989-1d02f81998f3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should query studies by label",
              "fullTitle": "Query studies by label name Should query studies by label",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?labelName=test`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\n\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(1);\nexpect(data[0][\"0020000D\"][\"Value\"][0]).to.equal(STUDY_UID);",
              "err": {},
              "uuid": "2ad2b90e-256c-4a8c-a3a2-b6c94fd98853",
              "parentUUID": "cc73469b-9e51-44bd-9989-1d02f81998f3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ad2b90e-256c-4a8c-a3a2-b6c94fd98853"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "37617724-74e9-42c6-abde-808da95ec06a",
          "title": "query instances",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query instances\"",
              "fullTitle": "query instances \"before all\" hook in \"query instances\"",
              "timedOut": false,
              "duration": 1630,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "ee99d1a8-4fed-4929-8c1a-37bb7e2ee101",
              "parentUUID": "37617724-74e9-42c6-abde-808da95ec06a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"query instances\"",
              "fullTitle": "query instances \"after all\" hook in \"query instances\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "d9616f82-cb46-493c-892a-535acdc125a1",
              "parentUUID": "37617724-74e9-42c6-abde-808da95ec06a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "fb854e6c-42b4-4711-b41c-216a9610bd62",
              "title": "query instances with 'SOPClassUID'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query instances with param 'SOPClassUID=1.2.840.10008.5.1.4.1.1.7' and get 5 instances successfully",
                  "fullTitle": "query instances query instances with 'SOPClassUID' Should query instances with param 'SOPClassUID=1.2.840.10008.5.1.4.1.1.7' and get 5 instances successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "63327d01-5ffb-4f33-b4eb-276d34e6c0d7",
                  "parentUUID": "fb854e6c-42b4-4711-b41c-216a9610bd62",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query instances with param 'SOPClassUID=foobar' and get 0 instance successfully",
                  "fullTitle": "query instances query instances with 'SOPClassUID' Should query instances with param 'SOPClassUID=foobar' and get 0 instance successfully",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "6d884ce3-b3be-4644-86fd-b2bda194f00d",
                  "parentUUID": "fb854e6c-42b4-4711-b41c-216a9610bd62",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63327d01-5ffb-4f33-b4eb-276d34e6c0d7",
                "6d884ce3-b3be-4644-86fd-b2bda194f00d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "0ec8e91a-69f2-42ad-bf07-38030164766b",
              "title": "query instances with 'SOPInstanceUID'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query instances with param 'SOPInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.146366877811836789535656349132' and get 1 instance successfully",
                  "fullTitle": "query instances query instances with 'SOPInstanceUID' Should query instances with param 'SOPInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.146366877811836789535656349132' and get 1 instance successfully",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "c97ba249-7792-4616-bfff-b61c7107dd88",
                  "parentUUID": "0ec8e91a-69f2-42ad-bf07-38030164766b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query instances with param 'SOPInstanceUID=foobar' and get 0 instance successfully",
                  "fullTitle": "query instances query instances with 'SOPInstanceUID' Should query instances with param 'SOPInstanceUID=foobar' and get 0 instance successfully",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "45db2252-2a50-4b54-8b43-5a28eee11cf7",
                  "parentUUID": "0ec8e91a-69f2-42ad-bf07-38030164766b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c97ba249-7792-4616-bfff-b61c7107dd88",
                "45db2252-2a50-4b54-8b43-5a28eee11cf7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "45b1dfcb-9cc7-46b7-bf53-fcabee930556",
              "title": "query instances with 'ContentDate",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query instances with param 'ContentDate=19990416' and get 9 instances successfully",
                  "fullTitle": "query instances query instances with 'ContentDate Should query instances with param 'ContentDate=19990416' and get 9 instances successfully",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "c8fde727-b272-4c61-800a-309fa263c8fa",
                  "parentUUID": "45b1dfcb-9cc7-46b7-bf53-fcabee930556",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query instances with param 'ContentDate=19990909' and get 0 instance successfully",
                  "fullTitle": "query instances query instances with 'ContentDate Should query instances with param 'ContentDate=19990909' and get 0 instance successfully",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "74073b6b-c956-4478-8be9-0390f1e527df",
                  "parentUUID": "45b1dfcb-9cc7-46b7-bf53-fcabee930556",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8fde727-b272-4c61-800a-309fa263c8fa",
                "74073b6b-c956-4478-8be9-0390f1e527df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "9abf3af8-a52e-4c2c-adcb-1f8b12d9d389",
              "title": "query instances with 'ContentTime'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query instances with param 'ContentTime=140241' and get 1 instance successfully",
                  "fullTitle": "query instances query instances with 'ContentTime' Should query instances with param 'ContentTime=140241' and get 1 instance successfully",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "f63b98b8-8bf3-4a2a-aff6-8a7752ad4ea2",
                  "parentUUID": "9abf3af8-a52e-4c2c-adcb-1f8b12d9d389",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query instances with param 'ContentTime=140248' and get 0 instance successfully",
                  "fullTitle": "query instances query instances with 'ContentTime' Should query instances with param 'ContentTime=140248' and get 0 instance successfully",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "aeadea8f-af6d-49c9-9b00-652e967e6dd3",
                  "parentUUID": "9abf3af8-a52e-4c2c-adcb-1f8b12d9d389",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f63b98b8-8bf3-4a2a-aff6-8a7752ad4ea2",
                "aeadea8f-af6d-49c9-9b00-652e967e6dd3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "6f28c7d2-3da5-4af5-a598-9ad2510e2fcb",
              "title": "query instances with 'InstanceNumber'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query instances with param 'InstanceNumber=72' and get 1 instance successfully",
                  "fullTitle": "query instances query instances with 'InstanceNumber' Should query instances with param 'InstanceNumber=72' and get 1 instance successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "e309f0ca-2197-4a4a-a849-6b73a3cb1761",
                  "parentUUID": "6f28c7d2-3da5-4af5-a598-9ad2510e2fcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query instances with param 'InstanceNumber=12345678910' and get 0 instance successfully",
                  "fullTitle": "query instances query instances with 'InstanceNumber' Should query instances with param 'InstanceNumber=12345678910' and get 0 instance successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                  "err": {},
                  "uuid": "0d4d2403-c1d4-47da-8f33-a8fae87926ab",
                  "parentUUID": "6f28c7d2-3da5-4af5-a598-9ad2510e2fcb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e309f0ca-2197-4a4a-a849-6b73a3cb1761",
                "0d4d2403-c1d4-47da-8f33-a8fae87926ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "bf8db8b8-4d7a-4122-8227-b912011f8dfa",
              "title": "query instances with sequence parameters",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"query instances with sequence parameters\"",
                  "fullTitle": "query instances query instances with sequence parameters \"before all\" hook in \"query instances with sequence parameters\"",
                  "timedOut": false,
                  "duration": 70,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await storeInstanceForTest(\n    resolve(\n        __dirname,\n        \"../../../testData/dicomFiles/1-01-mod-vo\"\n    )\n);",
                  "err": {},
                  "uuid": "e8fe5b3f-c6b6-42b1-8db7-4238b5dd8d65",
                  "parentUUID": "bf8db8b8-4d7a-4122-8227-b912011f8dfa",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "b73119a6-33f1-459a-a6da-300909f7388c",
                  "title": "query instances with 'ConceptNameCodeSequence.CodeValue'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodeValue=Test' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodeValue' Should query instances with param 'ConceptNameCodeSequence.CodeValue=Test' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "11d89afe-785a-4432-8373-5011dd04b677",
                      "parentUUID": "b73119a6-33f1-459a-a6da-300909f7388c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodeValue=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodeValue' Should query instances with param 'ConceptNameCodeSequence.CodeValue=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "424d6849-fc1f-4660-983f-275bfb9bc0ef",
                      "parentUUID": "b73119a6-33f1-459a-a6da-300909f7388c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "11d89afe-785a-4432-8373-5011dd04b677",
                    "424d6849-fc1f-4660-983f-275bfb9bc0ef"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 14,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "ce4719c1-b8d1-4534-a7a8-948ef0e9d8f8",
                  "title": "query instances with 'ConceptNameCodeSequence.CodingSchemeDesignator'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodingSchemeDesignator=LFUCK' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodingSchemeDesignator' Should query instances with param 'ConceptNameCodeSequence.CodingSchemeDesignator=LFUCK' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "87e81cd0-7083-4817-ac39-a4b469e0c20e",
                      "parentUUID": "ce4719c1-b8d1-4534-a7a8-948ef0e9d8f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodingSchemeDesignator=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodingSchemeDesignator' Should query instances with param 'ConceptNameCodeSequence.CodingSchemeDesignator=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "d8a63977-2fb1-482d-b2f2-51b009644c94",
                      "parentUUID": "ce4719c1-b8d1-4534-a7a8-948ef0e9d8f8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "87e81cd0-7083-4817-ac39-a4b469e0c20e",
                    "d8a63977-2fb1-482d-b2f2-51b009644c94"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "3d9818e6-b8a9-4071-bf04-a278f348330e",
                  "title": "query instances with 'ConceptNameCodeSequence.CodingSchemeVersion'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodingSchemeVersion=v1.0' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodingSchemeVersion' Should query instances with param 'ConceptNameCodeSequence.CodingSchemeVersion=v1.0' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "5299a587-33c5-4ed3-ab67-09812faaf695",
                      "parentUUID": "3d9818e6-b8a9-4071-bf04-a278f348330e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodingSchemeVersion=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodingSchemeVersion' Should query instances with param 'ConceptNameCodeSequence.CodingSchemeVersion=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "1d0b38f0-3b68-4dbb-b486-4d95ff020254",
                      "parentUUID": "3d9818e6-b8a9-4071-bf04-a278f348330e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5299a587-33c5-4ed3-ab67-09812faaf695",
                    "1d0b38f0-3b68-4dbb-b486-4d95ff020254"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "0a3d77d1-7d8e-43f2-9c3c-d43347a4cd40",
                  "title": "query instances with 'ConceptNameCodeSequence.CodeMeaning'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodeMeaning=For Test' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodeMeaning' Should query instances with param 'ConceptNameCodeSequence.CodeMeaning=For Test' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "c679ca71-f50a-450d-9a29-b841d027ddf6",
                      "parentUUID": "0a3d77d1-7d8e-43f2-9c3c-d43347a4cd40",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ConceptNameCodeSequence.CodeMeaning=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ConceptNameCodeSequence.CodeMeaning' Should query instances with param 'ConceptNameCodeSequence.CodeMeaning=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "ed1bb64f-8264-4e4f-9d46-d4f2b176f355",
                      "parentUUID": "0a3d77d1-7d8e-43f2-9c3c-d43347a4cd40",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c679ca71-f50a-450d-9a29-b841d027ddf6",
                    "ed1bb64f-8264-4e4f-9d46-d4f2b176f355"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "e15c96d1-6ca4-407e-875f-69443a02465a",
                  "title": "query instances with 'ContentSequence.ValueType'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ValueType=TEXT' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ValueType' Should query instances with param 'ContentSequence.ValueType=TEXT' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "9086fe39-f440-4025-9fe9-f32d83cb7b6b",
                      "parentUUID": "e15c96d1-6ca4-407e-875f-69443a02465a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ValueType=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ValueType' Should query instances with param 'ContentSequence.ValueType=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "ad1d260e-8a6e-487a-810c-cb98ffb1cf7f",
                      "parentUUID": "e15c96d1-6ca4-407e-875f-69443a02465a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9086fe39-f440-4025-9fe9-f32d83cb7b6b",
                    "ad1d260e-8a6e-487a-810c-cb98ffb1cf7f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "769b2ce9-bb83-4ac0-a45a-01ec4dff1dc8",
                  "title": "query instances with 'ContentSequence.RelationshipType'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.RelationshipType=CONTAINS' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.RelationshipType' Should query instances with param 'ContentSequence.RelationshipType=CONTAINS' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "773e5ac8-c3e9-49a1-9bcb-b6098a75e4b0",
                      "parentUUID": "769b2ce9-bb83-4ac0-a45a-01ec4dff1dc8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.RelationshipType=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.RelationshipType' Should query instances with param 'ContentSequence.RelationshipType=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "ecab81c3-abf5-49b1-ad4d-26f10ea28291",
                      "parentUUID": "769b2ce9-bb83-4ac0-a45a-01ec4dff1dc8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "773e5ac8-c3e9-49a1-9bcb-b6098a75e4b0",
                    "ecab81c3-abf5-49b1-ad4d-26f10ea28291"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "893cc31c-7d15-4744-bbd5-c3520c0f33a1",
                  "title": "query instances with 'ContentSequence.TextValue'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.TextValue=Test' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.TextValue' Should query instances with param 'ContentSequence.TextValue=Test' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "4753f200-b77c-4091-b081-de5f9ff3e7a8",
                      "parentUUID": "893cc31c-7d15-4744-bbd5-c3520c0f33a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.TextValue=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.TextValue' Should query instances with param 'ContentSequence.TextValue=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "b9048a7e-1601-42c6-96bd-f7201f413e24",
                      "parentUUID": "893cc31c-7d15-4744-bbd5-c3520c0f33a1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4753f200-b77c-4091-b081-de5f9ff3e7a8",
                    "b9048a7e-1601-42c6-96bd-f7201f413e24"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "636fc2a9-9e51-412d-a480-22c24520065a",
                  "title": "query instances with 'ContentSequence.ConceptNameCodeSequence.CodeValue'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeValue=Test 2' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodeValue' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeValue=Test 2' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "b43d0c30-2e3c-4b18-978e-d6ef31e8d854",
                      "parentUUID": "636fc2a9-9e51-412d-a480-22c24520065a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeValue=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodeValue' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeValue=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "ec34959c-194d-4946-adb9-a197f2804cd5",
                      "parentUUID": "636fc2a9-9e51-412d-a480-22c24520065a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b43d0c30-2e3c-4b18-978e-d6ef31e8d854",
                    "ec34959c-194d-4946-adb9-a197f2804cd5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "a1439fe4-ad6e-4774-b468-e0bf6f333198",
                  "title": "query instances with 'ContentSequence.ConceptNameCodeSequence.CodingSchemeDesignator'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeDesignator=LFUCK2' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodingSchemeDesignator' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeDesignator=LFUCK2' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "2d1f6c11-442f-49a3-8757-8e8f4d26b922",
                      "parentUUID": "a1439fe4-ad6e-4774-b468-e0bf6f333198",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeDesignator=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodingSchemeDesignator' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeDesignator=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "a2e723c8-9e86-4a00-9060-0f8714d65a91",
                      "parentUUID": "a1439fe4-ad6e-4774-b468-e0bf6f333198",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2d1f6c11-442f-49a3-8757-8e8f4d26b922",
                    "a2e723c8-9e86-4a00-9060-0f8714d65a91"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "d417e671-97bf-40ca-a18d-203ee28f91da",
                  "title": "query instances with 'ContentSequence.ConceptNameCodeSequence.CodingSchemeVersion'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeVersion=v2.0' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodingSchemeVersion' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeVersion=v2.0' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "a5b190e1-0c41-4710-89b4-7bd721a06caa",
                      "parentUUID": "d417e671-97bf-40ca-a18d-203ee28f91da",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeVersion=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodingSchemeVersion' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodingSchemeVersion=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 12,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "d55e2acf-7726-408a-832c-ff27f1d400b0",
                      "parentUUID": "d417e671-97bf-40ca-a18d-203ee28f91da",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a5b190e1-0c41-4710-89b4-7bd721a06caa",
                    "d55e2acf-7726-408a-832c-ff27f1d400b0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 18,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "49086821-f325-4335-af45-450df92ba82d",
                  "title": "query instances with 'ContentSequence.ConceptNameCodeSequence.CodeMeaning'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeMeaning=For Test 2' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodeMeaning' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeMeaning=For Test 2' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "68ec0ba6-3533-4c53-8bb5-86f6b3e04b44",
                      "parentUUID": "49086821-f325-4335-af45-450df92ba82d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeMeaning=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptNameCodeSequence.CodeMeaning' Should query instances with param 'ContentSequence.ConceptNameCodeSequence.CodeMeaning=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "690930d0-9879-4cfa-a8f5-05a87e579ea0",
                      "parentUUID": "49086821-f325-4335-af45-450df92ba82d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "68ec0ba6-3533-4c53-8bb5-86f6b3e04b44",
                    "690930d0-9879-4cfa-a8f5-05a87e579ea0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 14,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "8c4b70ae-7117-4549-8757-3d9b2a3deab0",
                  "title": "query instances with 'ContentSequence.ConceptCodeSequence.CodeValue'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeValue=Test 2' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodeValue' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeValue=Test 2' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "753fdd04-d358-404d-8ff6-6b0843e673ae",
                      "parentUUID": "8c4b70ae-7117-4549-8757-3d9b2a3deab0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeValue=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodeValue' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeValue=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "6de6f7c4-ad0d-4262-85b2-2b4b6b146ea7",
                      "parentUUID": "8c4b70ae-7117-4549-8757-3d9b2a3deab0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "753fdd04-d358-404d-8ff6-6b0843e673ae",
                    "6de6f7c4-ad0d-4262-85b2-2b4b6b146ea7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "1222d0d2-68b8-4a95-a22f-0ab80a657874",
                  "title": "query instances with 'ContentSequence.ConceptCodeSequence.CodingSchemeDesignator'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeDesignator=LFUCK2' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodingSchemeDesignator' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeDesignator=LFUCK2' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "bc21932c-b5f1-49d6-aa02-ad402f63792e",
                      "parentUUID": "1222d0d2-68b8-4a95-a22f-0ab80a657874",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeDesignator=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodingSchemeDesignator' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeDesignator=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "9244d615-584d-4f06-8842-2afef5808f45",
                      "parentUUID": "1222d0d2-68b8-4a95-a22f-0ab80a657874",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bc21932c-b5f1-49d6-aa02-ad402f63792e",
                    "9244d615-584d-4f06-8842-2afef5808f45"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "c1d6b3b1-1b40-4832-87d6-adbed5aeda9d",
                  "title": "query instances with 'ContentSequence.ConceptCodeSequence.CodingSchemeVersion'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeVersion=v2.0' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodingSchemeVersion' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeVersion=v2.0' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "4360fa62-58d6-4c27-b9b0-2717118a69f1",
                      "parentUUID": "c1d6b3b1-1b40-4832-87d6-adbed5aeda9d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeVersion=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodingSchemeVersion' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodingSchemeVersion=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "67aed62c-80bb-4559-a77b-84b7b64b79fa",
                      "parentUUID": "c1d6b3b1-1b40-4832-87d6-adbed5aeda9d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4360fa62-58d6-4c27-b9b0-2717118a69f1",
                    "67aed62c-80bb-4559-a77b-84b7b64b79fa"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "3563281e-84b7-4e17-bcfa-b9a110078300",
                  "title": "query instances with 'ContentSequence.ConceptCodeSequence.CodeMeaning'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeMeaning=For Test 2' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodeMeaning' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeMeaning=For Test 2' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "be61098f-02e4-47ed-9a29-3e87e1fe305f",
                      "parentUUID": "3563281e-84b7-4e17-bcfa-b9a110078300",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeMeaning=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'ContentSequence.ConceptCodeSequence.CodeMeaning' Should query instances with param 'ContentSequence.ConceptCodeSequence.CodeMeaning=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "993f94bd-e24c-4401-bdc4-879dadf5772a",
                      "parentUUID": "3563281e-84b7-4e17-bcfa-b9a110078300",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "be61098f-02e4-47ed-9a29-3e87e1fe305f",
                    "993f94bd-e24c-4401-bdc4-879dadf5772a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 16,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "c6c14885-b4af-4472-a003-983be95a2906",
                  "title": "query instances with 'VerifyingObserverSequence.VerifyingObserverName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'VerifyingObserverSequence.VerifyingObserverName=fakeName' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'VerifyingObserverSequence.VerifyingObserverName' Should query instances with param 'VerifyingObserverSequence.VerifyingObserverName=fakeName' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "ae1d41e0-08a1-49c3-8e4c-f411b8962aa7",
                      "parentUUID": "c6c14885-b4af-4472-a003-983be95a2906",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'VerifyingObserverSequence.VerifyingObserverName=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'VerifyingObserverSequence.VerifyingObserverName' Should query instances with param 'VerifyingObserverSequence.VerifyingObserverName=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "a0a20f6b-5727-4b8f-8d60-07014105f3d2",
                      "parentUUID": "c6c14885-b4af-4472-a003-983be95a2906",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ae1d41e0-08a1-49c3-8e4c-f411b8962aa7",
                    "a0a20f6b-5727-4b8f-8d60-07014105f3d2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "80dee2a0-6fec-4645-9b09-7a29ab100a7a",
                  "title": "query instances with 'VerifyingObserverSequence.VerificationDateTime'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'VerifyingObserverSequence.VerificationDateTime=20200201-' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'VerifyingObserverSequence.VerificationDateTime' Should query instances with param 'VerifyingObserverSequence.VerificationDateTime=20200201-' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "be6d26c8-3a3c-4c75-bdcc-c371f3bc5da2",
                      "parentUUID": "80dee2a0-6fec-4645-9b09-7a29ab100a7a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'VerifyingObserverSequence.VerificationDateTime=19990101' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'VerifyingObserverSequence.VerificationDateTime' Should query instances with param 'VerifyingObserverSequence.VerificationDateTime=19990101' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "937d4707-c89b-4383-8d07-80a3fba67759",
                      "parentUUID": "80dee2a0-6fec-4645-9b09-7a29ab100a7a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'VerifyingObserverSequence.VerificationDateTime=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'VerifyingObserverSequence.VerificationDateTime' Should query instances with param 'VerifyingObserverSequence.VerificationDateTime=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "839d3038-0adc-4600-85a4-d1d38dadff4c",
                      "parentUUID": "80dee2a0-6fec-4645-9b09-7a29ab100a7a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "be6d26c8-3a3c-4c75-bdcc-c371f3bc5da2",
                    "937d4707-c89b-4383-8d07-80a3fba67759",
                    "839d3038-0adc-4600-85a4-d1d38dadff4c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "c8c6e83f-1e2a-48b1-b850-f8c3b58e813d",
                  "title": "query instances with 'VerifyingObserverSequence.VerifyingOrganization'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryInstances.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query instances with param 'VerifyingObserverSequence.VerifyingOrganization=Test Org' and get 1 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'VerifyingObserverSequence.VerifyingOrganization' Should query instances with param 'VerifyingObserverSequence.VerifyingOrganization=Test Org' and get 1 instance successfully",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "2ffdc86c-4171-4dd6-8b66-7ac6eba1040c",
                      "parentUUID": "c8c6e83f-1e2a-48b1-b850-f8c3b58e813d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query instances with param 'VerifyingObserverSequence.VerifyingOrganization=aaa' and get 0 instance successfully",
                      "fullTitle": "query instances query instances with sequence parameters query instances with 'VerifyingObserverSequence.VerifyingOrganization' Should query instances with param 'VerifyingObserverSequence.VerifyingOrganization=aaa' and get 0 instance successfully",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/instances?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (code) {\n    expect(response.statusCode).to.equal(code);\n    return;\n}\nif (expectCount === 0) {\n    if (response.statusCode === 200) {\n        let data = await response.json();\n        console.log(data);\n    }\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectCount);",
                      "err": {},
                      "uuid": "4a2c9b36-4821-4960-8a96-e59dd693e39a",
                      "parentUUID": "c8c6e83f-1e2a-48b1-b850-f8c3b58e813d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2ffdc86c-4171-4dd6-8b66-7ac6eba1040c",
                    "4a2c9b36-4821-4960-8a96-e59dd693e39a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "d246e97a-1c66-4928-ac9c-06b4cfc4b7a0",
          "title": "QIDO-RS search patient '/dicom-web/patients'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"QIDO-RS search patient '/dicom-web/patients'\"",
              "fullTitle": "QIDO-RS search patient '/dicom-web/patients' \"before all\" hook in \"QIDO-RS search patient '/dicom-web/patients'\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/patients\",\n    body: structuredClone(testPatient)\n});",
              "err": {},
              "uuid": "61f776da-688d-4d48-bf34-b848bc6d9ed4",
              "parentUUID": "d246e97a-1c66-4928-ac9c-06b4cfc4b7a0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should search patients",
              "fullTitle": "QIDO-RS search patient '/dicom-web/patients' Should search patients",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/patients\"\n});\nexpect(response.statusCode).to.equal(200);\nlet patients = await response.json();\nexpect(patients).to.be.an(\"array\");\nexpect(patients).have.lengthOf(1);",
              "err": {},
              "uuid": "f7aaa420-06a4-4cfb-ba3d-60b60c73dae7",
              "parentUUID": "d246e97a-1c66-4928-ac9c-06b4cfc4b7a0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "0d570150-5d7d-46a9-9dd1-608e892e396a",
              "title": "query with params",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "00bdf637-9d83-403a-9426-2a1a4e3f29fd",
                  "title": "query with param 'PatientName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query patients with param 'PatientName=John^Doe' and get patient successfully",
                      "fullTitle": "QIDO-RS search patient '/dicom-web/patients' query with params query with param 'PatientName' Should query patients with param 'PatientName=John^Doe' and get patient successfully",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "57a65cc0-4c54-4fe3-b8f6-eb812f11b623",
                      "parentUUID": "00bdf637-9d83-403a-9426-2a1a4e3f29fd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query patients with param 'PatientName=foo' and get patient successfully",
                      "fullTitle": "QIDO-RS search patient '/dicom-web/patients' query with params query with param 'PatientName' Should query patients with param 'PatientName=foo' and get patient successfully",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "dcfd11b6-ab66-4ec8-b0c6-0a07ce67c75b",
                      "parentUUID": "00bdf637-9d83-403a-9426-2a1a4e3f29fd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query patients with param 'PatientName=John*&PatientName=*Doe' and get 1 patient successfully",
                      "fullTitle": "QIDO-RS search patient '/dicom-web/patients' query with params query with param 'PatientName' Should query patients with param 'PatientName=John*&PatientName=*Doe' and get 1 patient successfully",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?PatientName=John*&PatientName=*Doe`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\n        \nexpect(response.statusCode).to.equal(200);\n        \nlet data = await response.json();\n        \nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(1);",
                      "err": {},
                      "uuid": "832e24cb-781c-4ad7-bfff-790eb9554e44",
                      "parentUUID": "00bdf637-9d83-403a-9426-2a1a4e3f29fd",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "57a65cc0-4c54-4fe3-b8f6-eb812f11b623",
                    "dcfd11b6-ab66-4ec8-b0c6-0a07ce67c75b",
                    "832e24cb-781c-4ad7-bfff-790eb9554e44"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 11,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "09141e68-b557-4978-b7f2-8fdbc90889e1",
                  "title": "query with param 'PatientID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query patients with param 'PatientID=12345' and get patient successfully",
                      "fullTitle": "QIDO-RS search patient '/dicom-web/patients' query with params query with param 'PatientID' Should query patients with param 'PatientID=12345' and get patient successfully",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "bc53f1af-7fe3-48fb-b7dc-31c431f0e28e",
                      "parentUUID": "09141e68-b557-4978-b7f2-8fdbc90889e1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query patients with param 'PatientID=foo' and get patient successfully",
                      "fullTitle": "QIDO-RS search patient '/dicom-web/patients' query with params query with param 'PatientID' Should query patients with param 'PatientID=foo' and get patient successfully",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "d5895ad0-a50e-4e91-a40b-ffb5bd0e2fdb",
                      "parentUUID": "09141e68-b557-4978-b7f2-8fdbc90889e1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bc53f1af-7fe3-48fb-b7dc-31c431f0e28e",
                    "d5895ad0-a50e-4e91-a40b-ffb5bd0e2fdb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "eb01600b-9e00-4c34-9e3d-59de17ac6449",
                  "title": "query with param 'PatientBirthDate'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query patients with param 'PatientBirthDate=19800101' and get patient successfully",
                      "fullTitle": "QIDO-RS search patient '/dicom-web/patients' query with params query with param 'PatientBirthDate' Should query patients with param 'PatientBirthDate=19800101' and get patient successfully",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "fb90a1b2-73f1-4510-8ee0-7928e621277b",
                      "parentUUID": "eb01600b-9e00-4c34-9e3d-59de17ac6449",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query patients with param 'PatientBirthDate=19000101' and get patient successfully",
                      "fullTitle": "QIDO-RS search patient '/dicom-web/patients' query with params query with param 'PatientBirthDate' Should query patients with param 'PatientBirthDate=19000101' and get patient successfully",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "43afeb16-133b-4656-80a8-9f7259bede8e",
                      "parentUUID": "eb01600b-9e00-4c34-9e3d-59de17ac6449",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fb90a1b2-73f1-4510-8ee0-7928e621277b",
                    "43afeb16-133b-4656-80a8-9f7259bede8e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "d6179d4f-93e8-477a-8f3d-9ce823d3ff9f",
                  "title": "query with param 'IssuerOfPatientID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryPatients.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should query patients with param 'IssuerOfPatientID=Issuer ID' and get patient successfully",
                      "fullTitle": "QIDO-RS search patient '/dicom-web/patients' query with params query with param 'IssuerOfPatientID' Should query patients with param 'IssuerOfPatientID=Issuer ID' and get patient successfully",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "77b4081b-9256-45d6-96f8-33cdff5d4f05",
                      "parentUUID": "d6179d4f-93e8-477a-8f3d-9ce823d3ff9f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should query patients with param 'IssuerOfPatientID=foo' and get patient successfully",
                      "fullTitle": "QIDO-RS search patient '/dicom-web/patients' query with params query with param 'IssuerOfPatientID' Should query patients with param 'IssuerOfPatientID=foo' and get patient successfully",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/patients?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                      "err": {},
                      "uuid": "79cbb513-e141-4b45-9159-c4dfb39a21c7",
                      "parentUUID": "d6179d4f-93e8-477a-8f3d-9ce823d3ff9f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "77b4081b-9256-45d6-96f8-33cdff5d4f05",
                    "79cbb513-e141-4b45-9159-c4dfb39a21c7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "f7aaa420-06a4-4cfb-ba3d-60b60c73dae7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "620ba5b0-8087-44eb-8015-1d89ea21be6e",
          "title": "query series",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query series\"",
              "fullTitle": "query series \"before all\" hook in \"query series\"",
              "timedOut": false,
              "duration": 1758,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../testData/dicomFiles/1-01-mod-vo\")\n);",
              "err": {},
              "uuid": "c1aa6111-0880-4f76-a71a-3aeee45dcbb5",
              "parentUUID": "620ba5b0-8087-44eb-8015-1d89ea21be6e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"query series\"",
              "fullTitle": "query series \"after all\" hook in \"query series\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "d50a1fc4-71fe-46d3-aa02-a36399175ad5",
              "parentUUID": "620ba5b0-8087-44eb-8015-1d89ea21be6e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should query series successfully and get 9 series",
              "fullTitle": "query series Should query series successfully and get 9 series",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/series\",\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(9);",
              "err": {},
              "uuid": "565b7aff-f6e8-45ed-ab22-fdd280106aa6",
              "parentUUID": "620ba5b0-8087-44eb-8015-1d89ea21be6e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "2bec2b65-5f9d-4e1e-85e1-9cda1e02bb71",
              "title": "query series with param 'PerformingPhysicianName'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'PerformingPhysicianName=cName' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'PerformingPhysicianName' Should query series with param 'PerformingPhysicianName=cName' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "7f2163f6-db4c-44d5-8264-3a40f7271509",
                  "parentUUID": "2bec2b65-5f9d-4e1e-85e1-9cda1e02bb71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'PerformingPhysicianName=dName' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'PerformingPhysicianName' Should query series with param 'PerformingPhysicianName=dName' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "85dfc9aa-c362-4ad9-bb5b-17791bf11ff4",
                  "parentUUID": "2bec2b65-5f9d-4e1e-85e1-9cda1e02bb71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'PerformingPhysicianName=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'PerformingPhysicianName' Should query series with param 'PerformingPhysicianName=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "dd447341-2750-422a-8618-49de6d775aa5",
                  "parentUUID": "2bec2b65-5f9d-4e1e-85e1-9cda1e02bb71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f2163f6-db4c-44d5-8264-3a40f7271509",
                "85dfc9aa-c362-4ad9-bb5b-17791bf11ff4",
                "dd447341-2750-422a-8618-49de6d775aa5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "a91e0020-9220-49f3-abb0-556e24674e60",
              "title": "query series with param 'OperatorsName'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'OperatorsName=pyName' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'OperatorsName' Should query series with param 'OperatorsName=pyName' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "bec75543-ce26-4cbd-88d8-9f8bd4f08145",
                  "parentUUID": "a91e0020-9220-49f3-abb0-556e24674e60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'OperatorsName=py' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'OperatorsName' Should query series with param 'OperatorsName=py' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "acb3a909-34ae-474e-8fc9-a949a2da2e7c",
                  "parentUUID": "a91e0020-9220-49f3-abb0-556e24674e60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'OperatorsName=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'OperatorsName' Should query series with param 'OperatorsName=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "c7f1ff49-b69a-4bd6-92e7-5553ede56066",
                  "parentUUID": "a91e0020-9220-49f3-abb0-556e24674e60",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bec75543-ce26-4cbd-88d8-9f8bd4f08145",
                "acb3a909-34ae-474e-8fc9-a949a2da2e7c",
                "c7f1ff49-b69a-4bd6-92e7-5553ede56066"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "a2a62eb4-49a5-4575-9d02-e014cf8f1919",
              "title": "query series with param 'RequestAttributesSequence.AccessionNumber'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'RequestAttributesSequence.AccessionNumber=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.AccessionNumber' Should query series with param 'RequestAttributesSequence.AccessionNumber=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "41bad36d-a155-48e3-a8f8-b87f28f15235",
                  "parentUUID": "a2a62eb4-49a5-4575-9d02-e014cf8f1919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'RequestAttributesSequence.AccessionNumber=123456789' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.AccessionNumber' Should query series with param 'RequestAttributesSequence.AccessionNumber=123456789' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "9fd6dce7-7848-4d46-a21c-fb649036bb1c",
                  "parentUUID": "a2a62eb4-49a5-4575-9d02-e014cf8f1919",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41bad36d-a155-48e3-a8f8-b87f28f15235",
                "9fd6dce7-7848-4d46-a21c-fb649036bb1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "f114c60f-5b1b-43c4-8c7d-35bae8beefcc",
              "title": "query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.LocalNamespaceEntityID'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.LocalNamespaceEntityID' Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "393f23d8-b7d7-452e-a6e8-3f51a60d296d",
                  "parentUUID": "f114c60f-5b1b-43c4-8c7d-35bae8beefcc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=fuckyou' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.LocalNamespaceEntityID' Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.LocalNamespaceEntityID=fuckyou' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "9c53c177-d096-4098-a6f9-3595a4754d77",
                  "parentUUID": "f114c60f-5b1b-43c4-8c7d-35bae8beefcc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "393f23d8-b7d7-452e-a6e8-3f51a60d296d",
                "9c53c177-d096-4098-a6f9-3595a4754d77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "1f920279-9075-4f0c-bddd-f1a01284f673",
              "title": "query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityID'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityID=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityID' Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityID=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "922cbe79-c582-4ac2-85f1-0724306a1948",
                  "parentUUID": "1f920279-9075-4f0c-bddd-f1a01284f673",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityID=b459025d-58f8-45c1-8ea9-0dc108fabc4c' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityID' Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityID=b459025d-58f8-45c1-8ea9-0dc108fabc4c' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "a7d5f79c-8719-4bfa-890e-d0bdfccc82dd",
                  "parentUUID": "1f920279-9075-4f0c-bddd-f1a01284f673",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "922cbe79-c582-4ac2-85f1-0724306a1948",
                "a7d5f79c-8719-4bfa-890e-d0bdfccc82dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "6040ab97-bbd0-4172-b2b0-d4612d33df70",
              "title": "query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityIDType'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityIDType=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityIDType' Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityIDType=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "d9ae7a5c-45b9-4e42-ad8a-113d2c292bec",
                  "parentUUID": "6040ab97-bbd0-4172-b2b0-d4612d33df70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityIDType=UUID' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityIDType' Should query series with param 'RequestAttributesSequence.IssuerOfAccessionNumberSequence.UniversalEntityIDType=UUID' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "c1da5a3f-ef57-4cda-8e95-2d88dc8f3624",
                  "parentUUID": "6040ab97-bbd0-4172-b2b0-d4612d33df70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9ae7a5c-45b9-4e42-ad8a-113d2c292bec",
                "c1da5a3f-ef57-4cda-8e95-2d88dc8f3624"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "646a2525-a5a2-48ba-8957-f8c40f183e9a",
              "title": "query series with param 'RequestAttributesSequence.StudyInstanceUID'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'RequestAttributesSequence.StudyInstanceUID=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.StudyInstanceUID' Should query series with param 'RequestAttributesSequence.StudyInstanceUID=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "14e12176-5c7f-4585-9434-7dbe4f16539b",
                  "parentUUID": "646a2525-a5a2-48ba-8957-f8c40f183e9a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'RequestAttributesSequence.StudyInstanceUID=1.2.826.0.1.3680043.8.498.11038417314486293343745968896540168442' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.StudyInstanceUID' Should query series with param 'RequestAttributesSequence.StudyInstanceUID=1.2.826.0.1.3680043.8.498.11038417314486293343745968896540168442' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "d265ff54-9111-47e2-8ebc-82460ef0de86",
                  "parentUUID": "646a2525-a5a2-48ba-8957-f8c40f183e9a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14e12176-5c7f-4585-9434-7dbe4f16539b",
                "d265ff54-9111-47e2-8ebc-82460ef0de86"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "a5dad9a4-b6b2-4442-8cc1-afcec141c2ac",
              "title": "query series with param 'RequestAttributesSequence.ScheduledProcedureStepID'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'RequestAttributesSequence.ScheduledProcedureStepID=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.ScheduledProcedureStepID' Should query series with param 'RequestAttributesSequence.ScheduledProcedureStepID=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "37216ae4-fc9b-4399-877e-8145601b6364",
                  "parentUUID": "a5dad9a4-b6b2-4442-8cc1-afcec141c2ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'RequestAttributesSequence.ScheduledProcedureStepID=aaa' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.ScheduledProcedureStepID' Should query series with param 'RequestAttributesSequence.ScheduledProcedureStepID=aaa' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "4bc2364f-3089-402e-8bb4-7ba2f03bd79f",
                  "parentUUID": "a5dad9a4-b6b2-4442-8cc1-afcec141c2ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37216ae4-fc9b-4399-877e-8145601b6364",
                "4bc2364f-3089-402e-8bb4-7ba2f03bd79f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "385f8856-03bf-48f0-984d-bd16b536039a",
              "title": "query series with param 'RequestAttributesSequence.RequestedProcedureID'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query series with param 'RequestAttributesSequence.RequestedProcedureID=foobar' and get 0 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.RequestedProcedureID' Should query series with param 'RequestAttributesSequence.RequestedProcedureID=foobar' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "9d7302bf-6e68-4fa2-a61f-3a51465c5242",
                  "parentUUID": "385f8856-03bf-48f0-984d-bd16b536039a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query series with param 'RequestAttributesSequence.RequestedProcedureID=bbb' and get 1 series successfully",
                  "fullTitle": "query series query series with param 'RequestAttributesSequence.RequestedProcedureID' Should query series with param 'RequestAttributesSequence.RequestedProcedureID=bbb' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "b1c6d9ed-ebd4-486a-b50f-2a5519bf70c6",
                  "parentUUID": "385f8856-03bf-48f0-984d-bd16b536039a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d7302bf-6e68-4fa2-a61f-3a51465c5242",
                "b1c6d9ed-ebd4-486a-b50f-2a5519bf70c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "565b7aff-f6e8-45ed-ab22-fdd280106aa6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "653eabca-c302-45df-badf-42e5e227a322",
          "title": "query series with param instance delete status",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\querySeriesWithParamInstanceDeleteStatus.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\querySeriesWithParamInstanceDeleteStatus.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query series with param instance delete status\"",
              "fullTitle": "query series with param instance delete status \"before all\" hook in \"query series with param instance delete status\"",
              "timedOut": false,
              "duration": 1674,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "0c730198-2eb2-41d1-abf9-ba71cef5f95c",
              "parentUUID": "653eabca-c302-45df-badf-42e5e227a322",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should query series with 'instanceDeleteStatus' param result in 1 series",
              "fullTitle": "query series with param instance delete status should query series with 'instanceDeleteStatus' param result in 1 series",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${TEST_STUDY_UID}/series/${TEST_SERIES_UID}/instances/${TEST_INSTANCE_UID1}/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nlet response = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/series\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    query: {\n        instanceDeleteStatus: 1\n    }\n});\n\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(1);",
              "err": {},
              "uuid": "d47fe285-f686-4fbd-a2ea-f82bb8891a79",
              "parentUUID": "653eabca-c302-45df-badf-42e5e227a322",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query series with 'instanceDeleteStatus' param result in 1 series when delete instance in same study",
              "fullTitle": "query series with param instance delete status should query series with 'instanceDeleteStatus' param result in 1 series when delete instance in same study",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${TEST_STUDY_UID}/series/${TEST_SERIES_UID}/instances/${TEST_INSTANCE_UID2}/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nlet response = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/series\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    query: {\n        instanceDeleteStatus: 1\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(1);",
              "err": {},
              "uuid": "a2793ed7-56d8-45b4-8be5-a2cd1bf3ffae",
              "parentUUID": "653eabca-c302-45df-badf-42e5e227a322",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d47fe285-f686-4fbd-a2ea-f82bb8891a79",
            "a2793ed7-56d8-45b4-8be5-a2cd1bf3ffae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "bc9289d0-9a57-43cb-8417-5c966bd0fb15",
          "title": "query studies '/dicom-web/studies'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query studies '/dicom-web/studies'\"",
              "fullTitle": "query studies '/dicom-web/studies' \"before all\" hook in \"query studies '/dicom-web/studies'\"",
              "timedOut": false,
              "duration": 1821,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "517f152c-b75b-40be-82a8-cdaac91b2b94",
              "parentUUID": "bc9289d0-9a57-43cb-8417-5c966bd0fb15",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"query studies '/dicom-web/studies'\"",
              "fullTitle": "query studies '/dicom-web/studies' \"after all\" hook in \"query studies '/dicom-web/studies'\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "f494505e-1548-4620-9d58-a27ccd5b57b6",
              "parentUUID": "bc9289d0-9a57-43cb-8417-5c966bd0fb15",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should query studies and get 4 studies successfully",
              "fullTitle": "query studies '/dicom-web/studies' Should query studies and get 4 studies successfully",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/studies\",\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\n\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);\nlet firstData = data[0];\n// Required Matching Attributes\n// {@link https://dicom.nema.org/medical/dicom/current/output/html/part18.html#table_10.6.1-5}\nexpect(firstData).to.have.property(\"00080020\");\nexpect(firstData).to.have.property(\"00080030\");\nexpect(firstData).to.have.property(\"00080050\");\nexpect(firstData).to.have.property(\"00080061\");\nexpect(firstData).to.have.property(\"00080090\");\nexpect(firstData).to.have.property(\"00100010\");\nexpect(firstData).to.have.property(\"00100020\");\nexpect(firstData).to.have.property(\"0020000D\");\nexpect(firstData).to.have.property(\"00200010\");",
              "err": {},
              "uuid": "920665c7-3c4e-437b-95fe-fef9f660c735",
              "parentUUID": "bc9289d0-9a57-43cb-8417-5c966bd0fb15",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5d5d163b-dd45-4d80-a4db-1b74ff26a9ee",
              "title": "query studies with param 'StudyDate'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'StudyDate=20100213' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyDate' Should query studies with param 'StudyDate=20100213' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "965c6b16-9aa4-4868-93ad-87e0384a4c97",
                  "parentUUID": "5d5d163b-dd45-4d80-a4db-1b74ff26a9ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyDate=-20100213' and get 3 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyDate' Should query studies with param 'StudyDate=-20100213' and get 3 studies successfully",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "17cfc212-1997-4029-95e3-c26d029556f2",
                  "parentUUID": "5d5d163b-dd45-4d80-a4db-1b74ff26a9ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyDate=20100101-' and get 2 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyDate' Should query studies with param 'StudyDate=20100101-' and get 2 studies successfully",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "f883a9b9-5397-4fe5-ac03-2d3c2cecb834",
                  "parentUUID": "5d5d163b-dd45-4d80-a4db-1b74ff26a9ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyDate=20100212-20181031' and get 2 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyDate' Should query studies with param 'StudyDate=20100212-20181031' and get 2 studies successfully",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "c4df74a9-a3bb-4f03-88df-f93207f0ed23",
                  "parentUUID": "5d5d163b-dd45-4d80-a4db-1b74ff26a9ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "965c6b16-9aa4-4868-93ad-87e0384a4c97",
                "17cfc212-1997-4029-95e3-c26d029556f2",
                "f883a9b9-5397-4fe5-ac03-2d3c2cecb834",
                "c4df74a9-a3bb-4f03-88df-f93207f0ed23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 62,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "eb794b51-6ab9-42f0-bbbf-0d86cf20e5c1",
              "title": "query studies with param 'StudyTime'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'StudyTime=170922' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyTime' Should query studies with param 'StudyTime=170922' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "54ce52a2-6302-4e8c-b33a-07e0cb5bd9e3",
                  "parentUUID": "eb794b51-6ab9-42f0-bbbf-0d86cf20e5c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyTime=-170922' and get 4 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyTime' Should query studies with param 'StudyTime=-170922' and get 4 studies successfully",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "892355a8-26b7-4626-b95e-c996f7d2fdb3",
                  "parentUUID": "eb794b51-6ab9-42f0-bbbf-0d86cf20e5c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyTime=150000-' and get 2 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyTime' Should query studies with param 'StudyTime=150000-' and get 2 studies successfully",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "6b30ed4e-c8b2-4388-890e-7c9d004a930d",
                  "parentUUID": "eb794b51-6ab9-42f0-bbbf-0d86cf20e5c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyTime=130000-160000' and get 2 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyTime' Should query studies with param 'StudyTime=130000-160000' and get 2 studies successfully",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "a60b832d-9279-4a5a-a39c-794deb45cef3",
                  "parentUUID": "eb794b51-6ab9-42f0-bbbf-0d86cf20e5c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54ce52a2-6302-4e8c-b33a-07e0cb5bd9e3",
                "892355a8-26b7-4626-b95e-c996f7d2fdb3",
                "6b30ed4e-c8b2-4388-890e-7c9d004a930d",
                "a60b832d-9279-4a5a-a39c-794deb45cef3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 64,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "a11e4e07-b0c5-4eac-ae91-1e515cac0fb8",
              "title": "query studies with param 'AccessionNumber'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'AccessionNumber=123456' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'AccessionNumber' Should query studies with param 'AccessionNumber=123456' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "1f8e8620-e9a6-446e-9542-0efc49226a46",
                  "parentUUID": "a11e4e07-b0c5-4eac-ae91-1e515cac0fb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'AccessionNumber=3266660953883852' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'AccessionNumber' Should query studies with param 'AccessionNumber=3266660953883852' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "184966a9-23be-475c-a852-fd8635a351ea",
                  "parentUUID": "a11e4e07-b0c5-4eac-ae91-1e515cac0fb8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f8e8620-e9a6-446e-9542-0efc49226a46",
                "184966a9-23be-475c-a852-fd8635a351ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "cc4219dc-e18f-4fdd-9f1d-896dd193f3af",
              "title": "query studies with param 'ModalitiesInStudy'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'ModalitiesInStudy=CT' and get 2 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'ModalitiesInStudy' Should query studies with param 'ModalitiesInStudy=CT' and get 2 studies successfully",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "0d68d73c-a75e-432e-8cad-6a318530098a",
                  "parentUUID": "cc4219dc-e18f-4fdd-9f1d-896dd193f3af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'ModalitiesInStudy=DOC' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'ModalitiesInStudy' Should query studies with param 'ModalitiesInStudy=DOC' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "41a009ff-977c-4a04-b6a5-2e4e66b53117",
                  "parentUUID": "cc4219dc-e18f-4fdd-9f1d-896dd193f3af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d68d73c-a75e-432e-8cad-6a318530098a",
                "41a009ff-977c-4a04-b6a5-2e4e66b53117"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "6792b67a-b145-4a55-a13d-5d95b4961861",
              "title": "query studies with param 'PatientName'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'PatientName=Philips^Amy' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'PatientName' Should query studies with param 'PatientName=Philips^Amy' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "4d094585-5792-4e5e-82f7-637e06373b87",
                  "parentUUID": "6792b67a-b145-4a55-a13d-5d95b4961861",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'PatientName=Philips*' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'PatientName' Should query studies with param 'PatientName=Philips*' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "d28d06fa-6593-4c27-9f0a-b054a18b884e",
                  "parentUUID": "6792b67a-b145-4a55-a13d-5d95b4961861",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'PatientName=foobar' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'PatientName' Should query studies with param 'PatientName=foobar' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "4b1509f8-466e-41aa-a932-0ab1d1d06d05",
                  "parentUUID": "6792b67a-b145-4a55-a13d-5d95b4961861",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'PatientName=Philips*&PatientName=*Amy' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'PatientName' Should query studies with param 'PatientName=Philips*&PatientName=*Amy' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?PatientName=Philips*&PatientName=*Amy`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\n    \nexpect(response.statusCode).to.equal(200);\n    \nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(1);",
                  "err": {},
                  "uuid": "2363bc3e-9e40-4135-8bb8-8cd5ded701ed",
                  "parentUUID": "6792b67a-b145-4a55-a13d-5d95b4961861",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d094585-5792-4e5e-82f7-637e06373b87",
                "d28d06fa-6593-4c27-9f0a-b054a18b884e",
                "4b1509f8-466e-41aa-a932-0ab1d1d06d05",
                "2363bc3e-9e40-4135-8bb8-8cd5ded701ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 36,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "8aab531a-aa11-4cbc-a6cf-d048aa3a86c9",
              "title": "query studies with param 'PatientID'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'PatientID=123456' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'PatientID' Should query studies with param 'PatientID=123456' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "fd1df45b-8292-4e98-b43b-fedc03367ace",
                  "parentUUID": "8aab531a-aa11-4cbc-a6cf-d048aa3a86c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'PatientID=C3*' and get 2 studies successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'PatientID' Should query studies with param 'PatientID=C3*' and get 2 studies successfully",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "38c40c40-5673-4b5a-b752-a24b266ccd4f",
                  "parentUUID": "8aab531a-aa11-4cbc-a6cf-d048aa3a86c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'PatientID=foobar' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'PatientID' Should query studies with param 'PatientID=foobar' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "e5a29d8d-5e53-48d8-8917-149d5d560d0a",
                  "parentUUID": "8aab531a-aa11-4cbc-a6cf-d048aa3a86c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd1df45b-8292-4e98-b43b-fedc03367ace",
                "38c40c40-5673-4b5a-b752-a24b266ccd4f",
                "e5a29d8d-5e53-48d8-8917-149d5d560d0a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "4559d64c-c3ca-4676-bc9c-bb19bc69f686",
              "title": "query studies with param 'StudyInstanceUID'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596634768' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyInstanceUID' Should query studies with param 'StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596634768' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "d17c6a66-ddad-4f86-bd9d-9f9da7ed10a4",
                  "parentUUID": "4559d64c-c3ca-4676-bc9c-bb19bc69f686",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596123456' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyInstanceUID' Should query studies with param 'StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596123456' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "fff1abdb-9b76-478e-aefe-c128b7004edf",
                  "parentUUID": "4559d64c-c3ca-4676-bc9c-bb19bc69f686",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d17c6a66-ddad-4f86-bd9d-9f9da7ed10a4",
                "fff1abdb-9b76-478e-aefe-c128b7004edf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "1cf7b867-d359-4ca3-88e4-7ae3e3a49156",
              "title": "query studies with param 'StudyID'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'StudyID=D18-1001' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyID' Should query studies with param 'StudyID=D18-1001' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "33ba43a0-749c-4b2d-8ff1-98e1628d854d",
                  "parentUUID": "1cf7b867-d359-4ca3-88e4-7ae3e3a49156",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyID=foo' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyID' Should query studies with param 'StudyID=foo' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "3170a842-d003-4ecd-903a-149e8ed073d6",
                  "parentUUID": "1cf7b867-d359-4ca3-88e4-7ae3e3a49156",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33ba43a0-749c-4b2d-8ff1-98e1628d854d",
                "3170a842-d003-4ecd-903a-149e8ed073d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "c2e3285f-9994-4b12-97cf-77269a460962",
              "title": "query studies with param 'ReferringPhysicianName'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'ReferringPhysicianName=ROBERT^BROWN' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'ReferringPhysicianName' Should query studies with param 'ReferringPhysicianName=ROBERT^BROWN' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "570d7b0c-80d6-4e18-bfb2-9954c022fa42",
                  "parentUUID": "c2e3285f-9994-4b12-97cf-77269a460962",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'ReferringPhysicianName=foo' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'ReferringPhysicianName' Should query studies with param 'ReferringPhysicianName=foo' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "8daffd56-3db6-4155-b1b0-875cddb8ae8b",
                  "parentUUID": "c2e3285f-9994-4b12-97cf-77269a460962",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "570d7b0c-80d6-4e18-bfb2-9954c022fa42",
                "8daffd56-3db6-4155-b1b0-875cddb8ae8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "fb94df3d-6c2f-4b55-b2fc-52d10f990675",
              "title": "query studies with param 'StudyDescription'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query studies with param 'StudyDescription=foo' and get 0 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyDescription' Should query studies with param 'StudyDescription=foo' and get 0 study successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "d9eef0f8-3214-477a-8cc5-8186cdfbfaa9",
                  "parentUUID": "fb94df3d-6c2f-4b55-b2fc-52d10f990675",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query studies with param 'StudyDescription=XR CHEST 2 VIEWS AP OR PA+LAT' and get 1 study successfully",
                  "fullTitle": "query studies '/dicom-web/studies' query studies with param 'StudyDescription' Should query studies with param 'StudyDescription=XR CHEST 2 VIEWS AP OR PA+LAT' and get 1 study successfully",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    },\n    query: {\n        [param]: value\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "1b9eec1f-1941-4ad2-b6a4-cb94dae8412b",
                  "parentUUID": "fb94df3d-6c2f-4b55-b2fc-52d10f990675",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9eef0f8-3214-477a-8cc5-8186cdfbfaa9",
                "1b9eec1f-1941-4ad2-b6a4-cb94dae8412b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "6bfb6d4b-3ee9-4f5f-9b35-e696575a460d",
              "title": "sort",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudies.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should sort studies by 00080020",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should sort studies by 00080020",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);",
                  "err": {},
                  "uuid": "9ede7310-8e7f-4c85-9504-e3baefe4a5f9",
                  "parentUUID": "6bfb6d4b-3ee9-4f5f-9b35-e696575a460d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort studies by -00080020",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should sort studies by -00080020",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);",
                  "err": {},
                  "uuid": "3bd33528-e4e7-4cc1-abdc-d22f40271fce",
                  "parentUUID": "6bfb6d4b-3ee9-4f5f-9b35-e696575a460d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort studies by 00080030",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should sort studies by 00080030",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);",
                  "err": {},
                  "uuid": "636c43b1-937a-4e99-8f0f-4261b418d8ca",
                  "parentUUID": "6bfb6d4b-3ee9-4f5f-9b35-e696575a460d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort studies by 00080050",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should sort studies by 00080050",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);",
                  "err": {},
                  "uuid": "212de587-063c-4cfd-a011-3cd6493b0179",
                  "parentUUID": "6bfb6d4b-3ee9-4f5f-9b35-e696575a460d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort studies by 0020000D",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should sort studies by 0020000D",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);",
                  "err": {},
                  "uuid": "1b36ffaf-40e5-461e-9ac9-63d1eb87a691",
                  "parentUUID": "6bfb6d4b-3ee9-4f5f-9b35-e696575a460d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort studies by 00200010",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should sort studies by 00200010",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);",
                  "err": {},
                  "uuid": "9bac5abe-55cd-4613-9d83-c37ff4f52df9",
                  "parentUUID": "6bfb6d4b-3ee9-4f5f-9b35-e696575a460d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort studies by 00100020",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should sort studies by 00100020",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(4);",
                  "err": {},
                  "uuid": "0d8562f9-59a7-447e-bd8a-e57d332c21a4",
                  "parentUUID": "6bfb6d4b-3ee9-4f5f-9b35-e696575a460d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 400 (Bad Request) when sorting by unsupported field",
                  "fullTitle": "query studies '/dicom-web/studies' sort Should raise 400 (Bad Request) when sorting by unsupported field",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies?orderBy=${dictionary.keyword.NumberOfStudyRelatedInstances}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\n    \nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "ea4f8661-c241-45ac-8e37-8f9a8f498f6a",
                  "parentUUID": "6bfb6d4b-3ee9-4f5f-9b35-e696575a460d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ede7310-8e7f-4c85-9504-e3baefe4a5f9",
                "3bd33528-e4e7-4cc1-abdc-d22f40271fce",
                "636c43b1-937a-4e99-8f0f-4261b418d8ca",
                "212de587-063c-4cfd-a011-3cd6493b0179",
                "1b36ffaf-40e5-461e-9ac9-63d1eb87a691",
                "9bac5abe-55cd-4613-9d83-c37ff4f52df9",
                "0d8562f9-59a7-447e-bd8a-e57d332c21a4",
                "ea4f8661-c241-45ac-8e37-8f9a8f498f6a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 151,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "920665c7-3c4e-437b-95fe-fef9f660c735"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "34b4fdb3-0cfd-46a6-9de7-8f5e055f70bd",
          "title": "query study-series",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query study-series\"",
              "fullTitle": "query study-series \"before all\" hook in \"query study-series\"",
              "timedOut": false,
              "duration": 2622,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nreturn;",
              "err": {},
              "uuid": "79586428-2234-485d-aa06-367f274e411f",
              "parentUUID": "34b4fdb3-0cfd-46a6-9de7-8f5e055f70bd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should query study-series and get 3 series successfully and have proper attributes",
              "fullTitle": "query study-series Should query study-series and get 3 series successfully and have proper attributes",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(3);\nlet firstData = data[0];\nexpect(firstData).to.be.an(\"object\");\nexpect(firstData).have.property(\"00080060\");\nexpect(firstData).have.property(\"0020000E\");\nexpect(firstData).have.property(\"00200011\");",
              "err": {},
              "uuid": "6b299130-0075-4652-9ab0-fe6895aef2f1",
              "parentUUID": "34b4fdb3-0cfd-46a6-9de7-8f5e055f70bd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "7672d32a-e2aa-4600-b5f9-b813e287b1f9",
              "title": "query study-series with param 'Modality'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query study-series with param 'Modality=OT' and get 1 series successfully",
                  "fullTitle": "query study-series query study-series with param 'Modality' Should query study-series with param 'Modality=OT' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "898f8dee-629d-411d-804e-d207d1ac4806",
                  "parentUUID": "7672d32a-e2aa-4600-b5f9-b813e287b1f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query study-series with param 'Modality=CT' and get 2 series successfully",
                  "fullTitle": "query study-series query study-series with param 'Modality' Should query study-series with param 'Modality=CT' and get 2 series successfully",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "0c98594d-9601-411c-a44c-aafbde4162f2",
                  "parentUUID": "7672d32a-e2aa-4600-b5f9-b813e287b1f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query study-series with param 'Modality=DOC' and get 0 series successfully",
                  "fullTitle": "query study-series query study-series with param 'Modality' Should query study-series with param 'Modality=DOC' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "e81cab31-3695-488f-9825-6894a6f3c77d",
                  "parentUUID": "7672d32a-e2aa-4600-b5f9-b813e287b1f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "898f8dee-629d-411d-804e-d207d1ac4806",
                "0c98594d-9601-411c-a44c-aafbde4162f2",
                "e81cab31-3695-488f-9825-6894a6f3c77d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "d0007ca9-eecf-41d2-bb9e-89a7a4c6ecb4",
              "title": "query study-series with param 'SeriesInstanceUID'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query study-series with param 'SeriesInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.101062900156808513233428214720' and get 1 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesInstanceUID' Should query study-series with param 'SeriesInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.101062900156808513233428214720' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "d0a49045-2616-4c08-b419-925fa375032e",
                  "parentUUID": "d0007ca9-eecf-41d2-bb9e-89a7a4c6ecb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query study-series with param 'SeriesInstanceUID=123456' and get 0 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesInstanceUID' Should query study-series with param 'SeriesInstanceUID=123456' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "7b13aa63-a247-4467-97d8-dc5e233f0f2d",
                  "parentUUID": "d0007ca9-eecf-41d2-bb9e-89a7a4c6ecb4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0a49045-2616-4c08-b419-925fa375032e",
                "7b13aa63-a247-4467-97d8-dc5e233f0f2d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "12ffbf41-f729-453d-8394-95a9b28cdebb",
              "title": "query study-series with param 'SeriesNumber'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query study-series with param 'SeriesNumber=1' and get 1 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesNumber' Should query study-series with param 'SeriesNumber=1' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "42c4a465-2b78-4825-ac72-8f6819fc941d",
                  "parentUUID": "12ffbf41-f729-453d-8394-95a9b28cdebb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query study-series with param 'SeriesNumber=3001' and get 1 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesNumber' Should query study-series with param 'SeriesNumber=3001' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "cbd0316e-8ad0-496a-9f80-707b528ce0e5",
                  "parentUUID": "12ffbf41-f729-453d-8394-95a9b28cdebb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query study-series with param 'SeriesNumber=5678' and get 0 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesNumber' Should query study-series with param 'SeriesNumber=5678' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "e59e48d3-25b7-402d-9b46-c1175c16f128",
                  "parentUUID": "12ffbf41-f729-453d-8394-95a9b28cdebb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42c4a465-2b78-4825-ac72-8f6819fc941d",
                "cbd0316e-8ad0-496a-9f80-707b528ce0e5",
                "e59e48d3-25b7-402d-9b46-c1175c16f128"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "acca0184-f22b-4a11-9342-aae69f8eb34e",
              "title": "query study-series with param 'SeriesDate'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query study-series with param 'SeriesDate=19990417' and get 1 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesDate' Should query study-series with param 'SeriesDate=19990417' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "398a2fb8-4cf0-4d4f-9652-eb8d32631235",
                  "parentUUID": "acca0184-f22b-4a11-9342-aae69f8eb34e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query study-series with param 'SeriesDate=19990101' and get 0 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesDate' Should query study-series with param 'SeriesDate=19990101' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "9dfc1ff9-aa40-42f9-9bc2-c361500fb51b",
                  "parentUUID": "acca0184-f22b-4a11-9342-aae69f8eb34e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "398a2fb8-4cf0-4d4f-9652-eb8d32631235",
                "9dfc1ff9-aa40-42f9-9bc2-c361500fb51b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "c10a02a0-d595-425c-abc0-0e7ab80067d9",
              "title": "query study-series with param 'SeriesDescription'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query study-series with param 'SeriesDescription=*Capture*' and get 1 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesDescription' Should query study-series with param 'SeriesDescription=*Capture*' and get 1 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "92aacd76-465a-4a0c-a4f5-4c03539222b8",
                  "parentUUID": "c10a02a0-d595-425c-abc0-0e7ab80067d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query study-series with param 'SeriesDescription=24861268' and get 0 series successfully",
                  "fullTitle": "query study-series query study-series with param 'SeriesDescription' Should query study-series with param 'SeriesDescription=24861268' and get 0 series successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?${param}=${value}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);",
                  "err": {},
                  "uuid": "b3949653-6ab0-4730-8c1f-5b53fe04190b",
                  "parentUUID": "c10a02a0-d595-425c-abc0-0e7ab80067d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "92aacd76-465a-4a0c-a4f5-4c03539222b8",
                "b3949653-6ab0-4730-8c1f-5b53fe04190b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "3bde1990-de87-4cba-8f5b-6b892e72544b",
              "title": "sort",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should sort series by 00080021",
                  "fullTitle": "query study-series sort Should sort series by 00080021",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(3);",
                  "err": {},
                  "uuid": "1c6841fc-18a0-45a6-af97-795604e64bb4",
                  "parentUUID": "3bde1990-de87-4cba-8f5b-6b892e72544b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort series by 00080060",
                  "fullTitle": "query study-series sort Should sort series by 00080060",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(3);",
                  "err": {},
                  "uuid": "e89eed37-0918-4712-a0ea-eaea50aac49a",
                  "parentUUID": "3bde1990-de87-4cba-8f5b-6b892e72544b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort series by 0008103E",
                  "fullTitle": "query study-series sort Should sort series by 0008103E",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(3);",
                  "err": {},
                  "uuid": "9bdbba88-0073-445f-a971-ccfd3b7d546c",
                  "parentUUID": "3bde1990-de87-4cba-8f5b-6b892e72544b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort series by 00200011",
                  "fullTitle": "query study-series sort Should sort series by 00200011",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(3);",
                  "err": {},
                  "uuid": "b5e8b777-18fd-46a6-91cc-19a0cc96523c",
                  "parentUUID": "3bde1990-de87-4cba-8f5b-6b892e72544b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort series by 0020000E",
                  "fullTitle": "query study-series sort Should sort series by 0020000E",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(3);",
                  "err": {},
                  "uuid": "cb19b2a4-9c5d-4c9c-8a21-33588a63a9d7",
                  "parentUUID": "3bde1990-de87-4cba-8f5b-6b892e72544b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort series by 00080020",
                  "fullTitle": "query study-series sort Should sort series by 00080020",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(3);",
                  "err": {},
                  "uuid": "2672dd97-4026-4381-9de6-35480bc4637d",
                  "parentUUID": "3bde1990-de87-4cba-8f5b-6b892e72544b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c6841fc-18a0-45a6-af97-795604e64bb4",
                "e89eed37-0918-4712-a0ea-eaea50aac49a",
                "9bdbba88-0073-445f-a971-ccfd3b7d546c",
                "b5e8b777-18fd-46a6-91cc-19a0cc96523c",
                "cb19b2a4-9c5d-4c9c-8a21-33588a63a9d7",
                "2672dd97-4026-4381-9de6-35480bc4637d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "6b299130-0075-4652-9ab0-fe6895aef2f1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "8c6df2d2-22f8-49b8-beef-d360823d0fa9",
          "title": "query study-series-instances",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeriesInstances.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeriesInstances.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query study-series-instances\"",
              "fullTitle": "query study-series-instances \"before all\" hook in \"query study-series-instances\"",
              "timedOut": false,
              "duration": 1709,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "6a70ad9b-b94d-47d8-99a5-f9cdc3ed50a1",
              "parentUUID": "8c6df2d2-22f8-49b8-beef-d360823d0fa9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"query study-series-instances\"",
              "fullTitle": "query study-series-instances \"after all\" hook in \"query study-series-instances\"",
              "timedOut": false,
              "duration": 41,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "4c0c425f-4f03-49df-8255-23c2a8d3c209",
              "parentUUID": "8c6df2d2-22f8-49b8-beef-d360823d0fa9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should query study-series-instances and get 5 instances",
              "fullTitle": "query study-series-instances Should query study-series-instances and get 5 instances",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
              "err": {},
              "uuid": "196d27ce-e85d-4836-9ba5-c06b617404ea",
              "parentUUID": "8c6df2d2-22f8-49b8-beef-d360823d0fa9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "967f9847-b7b6-4d75-bd06-5b0a6aaffbf5",
              "title": "sort",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeriesInstances.test.js",
              "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudySeriesInstances.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should sort instances by 00080016",
                  "fullTitle": "query study-series-instances sort Should sort instances by 00080016",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
                  "err": {},
                  "uuid": "89b8c898-98a4-4291-904b-17f7f4c216ba",
                  "parentUUID": "967f9847-b7b6-4d75-bd06-5b0a6aaffbf5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort instances by 00080018",
                  "fullTitle": "query study-series-instances sort Should sort instances by 00080018",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
                  "err": {},
                  "uuid": "84645242-0d92-40af-91b0-03fae53b46c9",
                  "parentUUID": "967f9847-b7b6-4d75-bd06-5b0a6aaffbf5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort instances by 00080023",
                  "fullTitle": "query study-series-instances sort Should sort instances by 00080023",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
                  "err": {},
                  "uuid": "63fd6fa0-ccf3-45a2-9480-9bade858df57",
                  "parentUUID": "967f9847-b7b6-4d75-bd06-5b0a6aaffbf5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort instances by 00080033",
                  "fullTitle": "query study-series-instances sort Should sort instances by 00080033",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
                  "err": {},
                  "uuid": "ff97b169-82ce-4f42-9894-a92841e8f247",
                  "parentUUID": "967f9847-b7b6-4d75-bd06-5b0a6aaffbf5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort instances by 00200013",
                  "fullTitle": "query study-series-instances sort Should sort instances by 00200013",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
                  "err": {},
                  "uuid": "2c2289c4-6d6a-4538-aee5-22bc80d65098",
                  "parentUUID": "967f9847-b7b6-4d75-bd06-5b0a6aaffbf5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should sort instances by 00080060",
                  "fullTitle": "query study-series-instances sort Should sort instances by 00080060",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances?orderBy=${field}`,\n    headers: {\n        \"content-type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
                  "err": {},
                  "uuid": "51243064-7b2f-4587-bab0-45ba4004bb36",
                  "parentUUID": "967f9847-b7b6-4d75-bd06-5b0a6aaffbf5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89b8c898-98a4-4291-904b-17f7f4c216ba",
                "84645242-0d92-40af-91b0-03fae53b46c9",
                "63fd6fa0-ccf3-45a2-9480-9bade858df57",
                "ff97b169-82ce-4f42-9894-a92841e8f247",
                "2c2289c4-6d6a-4538-aee5-22bc80d65098",
                "51243064-7b2f-4587-bab0-45ba4004bb36"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 128,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "196d27ce-e85d-4836-9ba5-c06b617404ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "257c385b-9e76-4274-a4ad-051b575b5cce",
          "title": "query studies with param instance delete status",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\queryStudyWithParamInstanceDeleteStatus.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\queryStudyWithParamInstanceDeleteStatus.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query studies with param instance delete status\"",
              "fullTitle": "query studies with param instance delete status \"before all\" hook in \"query studies with param instance delete status\"",
              "timedOut": false,
              "duration": 1641,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "0c90cca2-60bc-4fd0-b4d2-f99fea84fb47",
              "parentUUID": "257c385b-9e76-4274-a4ad-051b575b5cce",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should query studies with 'instanceDeleteStatus' param result in 1 study",
              "fullTitle": "query studies with param instance delete status should query studies with 'instanceDeleteStatus' param result in 1 study",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${TEST_STUDY_UID}/series/${TEST_SERIES_UID}/instances/${TEST_INSTANCE_UID1}/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nlet response = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/studies\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    query: {\n        instanceDeleteStatus: 1\n    }\n});\n\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(1);",
              "err": {},
              "uuid": "1bb671e0-54eb-47a1-9ce2-5360e4c772e4",
              "parentUUID": "257c385b-9e76-4274-a4ad-051b575b5cce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query studies with 'instanceDeleteStatus' param result in 1 study when delete instance in same study",
              "fullTitle": "query studies with param instance delete status should query studies with 'instanceDeleteStatus' param result in 1 study when delete instance in same study",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${TEST_STUDY_UID}/series/${TEST_SERIES_UID}/instances/${TEST_INSTANCE_UID2}/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nlet response = await inject(app, {\n    method: \"GET\",\n    url: \"/dicom-web/studies\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    query: {\n        instanceDeleteStatus: 1\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(1);",
              "err": {},
              "uuid": "cd9c32df-9ff5-4db9-9a64-fe36f1ea52b5",
              "parentUUID": "257c385b-9e76-4274-a4ad-051b575b5cce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1bb671e0-54eb-47a1-9ce2-5360e4c772e4",
            "cd9c32df-9ff5-4db9-9a64-fe36f1ea52b5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "869ba661-b911-490b-ab8f-3fbcff70d7ac",
          "title": "query instances '/dicom-web/instances' with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\withUser\\queryInstancesWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\withUser\\queryInstancesWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query instances '/dicom-web/instances' with user\"",
              "fullTitle": "query instances '/dicom-web/instances' with user \"before all\" hook in \"query instances '/dicom-web/instances' with user\"",
              "timedOut": false,
              "duration": 261,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nconst testDicomFilename = resolve(__dirname, \"../../../../testData/dicomFiles/1-01-mod-vo\");\nawait storeInstanceWithUserForTest(testDicomFilename, TEST_USERS[0]);\nawait storeInstanceWithUserForTest(testDicomFilename, TEST_USERS[2]);\nawait storeInstanceWithUserForTest(testDicomFilename, TEST_USERS[3]);",
              "err": {},
              "uuid": "9f0e3c12-7989-4b05-be13-12e047e82fb1",
              "parentUUID": "869ba661-b911-490b-ab8f-3fbcff70d7ac",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should query instances with user 'test' successfully (return 1 instance)",
              "fullTitle": "query instances '/dicom-web/instances' with user should query instances with user 'test' successfully (return 1 instance)",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/instances\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"instance\";\nrequest.user = TEST_USERS[0];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(200);\nexpect(response._getJSONData()).to.be.an.instanceOf(Array);\nexpect(response._getJSONData().length).to.be.equal(1);",
              "err": {},
              "uuid": "034a60fa-eb98-4d58-b5da-133309e359a5",
              "parentUUID": "869ba661-b911-490b-ab8f-3fbcff70d7ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query instances with user 'test2' successfully (return 1 instance)",
              "fullTitle": "query instances '/dicom-web/instances' with user should query instances with user 'test2' successfully (return 1 instance)",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/instances\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"instance\";\nrequest.user = TEST_USERS[1];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(200);\nexpect(response._getJSONData()).to.be.an.instanceOf(Array);\nexpect(response._getJSONData().length).to.be.equal(1);",
              "err": {},
              "uuid": "9456b6b3-31b8-4c22-b092-780ce039abe8",
              "parentUUID": "869ba661-b911-490b-ab8f-3fbcff70d7ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query instances with user 'oTest' successfully (return 1 instance)",
              "fullTitle": "query instances '/dicom-web/instances' with user should query instances with user 'oTest' successfully (return 1 instance)",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/instances\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"instance\";\nrequest.user = TEST_USERS[2];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(200);\nexpect(response._getJSONData()).to.be.an.instanceOf(Array);\nexpect(response._getJSONData().length).to.be.equal(1);",
              "err": {},
              "uuid": "425ee6ef-9acd-4d69-b4cd-69f06490f470",
              "parentUUID": "869ba661-b911-490b-ab8f-3fbcff70d7ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query instances with user 'pTest' successfully (return 1 instance)",
              "fullTitle": "query instances '/dicom-web/instances' with user should query instances with user 'pTest' successfully (return 1 instance)",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/instances\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"instance\";\nrequest.user = TEST_USERS[3];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(200);\nexpect(response._getJSONData()).to.be.an.instanceOf(Array);\nexpect(response._getJSONData().length).to.be.equal(1);",
              "err": {},
              "uuid": "c44d3e67-adad-44d2-b95c-8ad5165a34c0",
              "parentUUID": "869ba661-b911-490b-ab8f-3fbcff70d7ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query instances with user 'pTest2' successfully (return 0 instance)",
              "fullTitle": "query instances '/dicom-web/instances' with user should query instances with user 'pTest2' successfully (return 0 instance)",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/instances\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"instance\";\nrequest.user = TEST_USERS[4];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(204);",
              "err": {},
              "uuid": "f4c32205-8094-4bc4-b603-4041c3a35e7e",
              "parentUUID": "869ba661-b911-490b-ab8f-3fbcff70d7ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "034a60fa-eb98-4d58-b5da-133309e359a5",
            "9456b6b3-31b8-4c22-b092-780ce039abe8",
            "425ee6ef-9acd-4d69-b4cd-69f06490f470",
            "c44d3e67-adad-44d2-b95c-8ad5165a34c0",
            "f4c32205-8094-4bc4-b603-4041c3a35e7e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 39,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "84938813-a2c3-4ef9-8849-d55cd2671fa5",
          "title": "query series '/dicom-web/series' with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\withUser\\querySeriesWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\withUser\\querySeriesWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query series '/dicom-web/series' with user\"",
              "fullTitle": "query series '/dicom-web/series' with user \"before all\" hook in \"query series '/dicom-web/series' with user\"",
              "timedOut": false,
              "duration": 222,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nconst testDicomFilename = resolve(__dirname, \"../../../../testData/dicomFiles/1-01-mod-vo\");\nawait storeInstanceWithUserForTest(testDicomFilename, TEST_USERS[0]);\nawait storeInstanceWithUserForTest(testDicomFilename, TEST_USERS[2]);\nawait storeInstanceWithUserForTest(testDicomFilename, TEST_USERS[3]);",
              "err": {},
              "uuid": "b1ee4958-2da6-4846-925e-69e932a6ce98",
              "parentUUID": "84938813-a2c3-4ef9-8849-d55cd2671fa5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should query series with user 'test' successfully (return 1 series)",
              "fullTitle": "query series '/dicom-web/series' with user should query series with user 'test' successfully (return 1 series)",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/series\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"series\";\nrequest.user = TEST_USERS[0];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(200);\nexpect(response._getJSONData()).to.be.an.instanceOf(Array);\nexpect(response._getJSONData().length).to.be.equal(1);",
              "err": {},
              "uuid": "69649887-8af0-4194-8d21-f71fcb8af50d",
              "parentUUID": "84938813-a2c3-4ef9-8849-d55cd2671fa5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query series with user 'test2' successfully (return 1 series)",
              "fullTitle": "query series '/dicom-web/series' with user should query series with user 'test2' successfully (return 1 series)",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/series\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"series\";\nrequest.user = TEST_USERS[1];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(200);\nexpect(response._getJSONData()).to.be.an.instanceOf(Array);\nexpect(response._getJSONData().length).to.be.equal(1);",
              "err": {},
              "uuid": "aa5b161d-731e-42b2-8b1e-04e8f744c7ac",
              "parentUUID": "84938813-a2c3-4ef9-8849-d55cd2671fa5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query series with user 'oTest' successfully (return 1 series)",
              "fullTitle": "query series '/dicom-web/series' with user should query series with user 'oTest' successfully (return 1 series)",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/series\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"series\";\nrequest.user = TEST_USERS[2];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(200);\nexpect(response._getJSONData()).to.be.an.instanceOf(Array);\nexpect(response._getJSONData().length).to.be.equal(1);",
              "err": {},
              "uuid": "bd4917e6-af9b-4fb7-a00d-cfa3a6ed42f6",
              "parentUUID": "84938813-a2c3-4ef9-8849-d55cd2671fa5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query series with user 'pTest' successfully (return 1 series)",
              "fullTitle": "query series '/dicom-web/series' with user should query series with user 'pTest' successfully (return 1 series)",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/series\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"series\";\nrequest.user = TEST_USERS[3];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(200);\nexpect(response._getJSONData()).to.be.an.instanceOf(Array);\nexpect(response._getJSONData().length).to.be.equal(1);",
              "err": {},
              "uuid": "eed46fb9-78ca-4835-bac5-2bbfd791835d",
              "parentUUID": "84938813-a2c3-4ef9-8849-d55cd2671fa5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query series with user 'pTest2' successfully (return 0 series)",
              "fullTitle": "query series '/dicom-web/series' with user should query series with user 'pTest2' successfully (return 0 series)",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/series\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"series\";\nrequest.user = TEST_USERS[4];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(204);",
              "err": {},
              "uuid": "bb3122b0-b2c6-4657-9857-f43274b200a4",
              "parentUUID": "84938813-a2c3-4ef9-8849-d55cd2671fa5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "69649887-8af0-4194-8d21-f71fcb8af50d",
            "aa5b161d-731e-42b2-8b1e-04e8f744c7ac",
            "bd4917e6-af9b-4fb7-a00d-cfa3a6ed42f6",
            "eed46fb9-78ca-4835-bac5-2bbfd791835d",
            "bb3122b0-b2c6-4657-9857-f43274b200a4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "bd82c104-b090-40f9-ac5e-9c9340411557",
          "title": "query studies '/dicom-web/studies' with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\QIDO-RS\\withUser\\queryStudiesWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\QIDO-RS\\withUser\\queryStudiesWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"query studies '/dicom-web/studies' with user\"",
              "fullTitle": "query studies '/dicom-web/studies' with user \"before all\" hook in \"query studies '/dicom-web/studies' with user\"",
              "timedOut": false,
              "duration": 212,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nconst testDicomFilename = resolve(__dirname, \"../../../../testData/dicomFiles/1-01-mod-vo\");\nawait storeInstanceWithUserForTest(testDicomFilename, TEST_USERS[0]);\nawait storeInstanceWithUserForTest(testDicomFilename, TEST_USERS[2]);\nawait storeInstanceWithUserForTest(testDicomFilename, TEST_USERS[3]);",
              "err": {},
              "uuid": "6102102b-6bec-4c95-adc0-8c33f82cd69c",
              "parentUUID": "bd82c104-b090-40f9-ac5e-9c9340411557",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should query study with user 'test' successfully (return 1 study)",
              "fullTitle": "query studies '/dicom-web/studies' with user should query study with user 'test' successfully (return 1 study)",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/studies\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"study\";\nrequest.user = TEST_USERS[0];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(200);\nexpect(response._getJSONData()).to.be.an.instanceOf(Array);\nexpect(response._getJSONData().length).to.be.equal(1);",
              "err": {},
              "uuid": "95279c7b-2244-48c4-b263-fe1aa40e4e21",
              "parentUUID": "bd82c104-b090-40f9-ac5e-9c9340411557",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query study with user 'test2' successfully (return 1 study)",
              "fullTitle": "query studies '/dicom-web/studies' with user should query study with user 'test2' successfully (return 1 study)",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/studies\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"study\";\nrequest.user = TEST_USERS[1];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(200);\nexpect(response._getJSONData()).to.be.an.instanceOf(Array);\nexpect(response._getJSONData().length).to.be.equal(1);",
              "err": {},
              "uuid": "e16779d6-0179-4e9f-81bf-8bf2e98a0c19",
              "parentUUID": "bd82c104-b090-40f9-ac5e-9c9340411557",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query study with user 'oTest' successfully (return 1 study)",
              "fullTitle": "query studies '/dicom-web/studies' with user should query study with user 'oTest' successfully (return 1 study)",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/studies\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"study\";\nrequest.user = TEST_USERS[2];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(200);\nexpect(response._getJSONData()).to.be.an.instanceOf(Array);\nexpect(response._getJSONData().length).to.be.equal(1);",
              "err": {},
              "uuid": "e0401c69-f829-4018-a1d0-c357a9211096",
              "parentUUID": "bd82c104-b090-40f9-ac5e-9c9340411557",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query study with user 'pTest' successfully (return 1 study)",
              "fullTitle": "query studies '/dicom-web/studies' with user should query study with user 'pTest' successfully (return 1 study)",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/studies\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"study\";\nrequest.user = TEST_USERS[3];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(200);\nexpect(response._getJSONData()).to.be.an.instanceOf(Array);\nexpect(response._getJSONData().length).to.be.equal(1);",
              "err": {},
              "uuid": "09b5e306-5edb-4fb4-845c-e77ebb10ce0e",
              "parentUUID": "bd82c104-b090-40f9-ac5e-9c9340411557",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should query study with user 'pTest2' successfully (return 0 study)",
              "fullTitle": "query studies '/dicom-web/studies' with user should query study with user 'pTest2' successfully (return 0 study)",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/dicom-web/studies\",\n    headers: {\n        \"content-type\": \"application/dicom+json\",\n        \"host\": \"localhost:8080\"\n    }\n});\nrequest.dicomLevel = \"study\";\nrequest.user = TEST_USERS[4];\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.be.equal(204);",
              "err": {},
              "uuid": "90a82615-9bc0-438b-abec-7ea60488d7eb",
              "parentUUID": "bd82c104-b090-40f9-ac5e-9c9340411557",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95279c7b-2244-48c4-b263-fe1aa40e4e21",
            "e16779d6-0179-4e9f-81bf-8bf2e98a0c19",
            "e0401c69-f829-4018-a1d0-c357a9211096",
            "09b5e306-5edb-4fb4-845c-e77ebb10ce0e",
            "90a82615-9bc0-438b-abec-7ea60488d7eb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 35,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "79ae445a-233a-4a10-b2e5-9e974eb33078",
          "title": "Count Study's Series' Instances with User",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\STAT-RS\\withUser\\countInstanceOfSeriesOfStudyWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\STAT-RS\\withUser\\countInstanceOfSeriesOfStudyWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Count Study's Series' Instances with User\"",
              "fullTitle": "Count Study's Series' Instances with User \"before all\" hook in \"Count Study's Series' Instances with User\"",
              "timedOut": false,
              "duration": 702,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet dicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let dicomFile of dicomFiles) {\n    await storeInstanceWithUserForTest(dicomFile, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "1b10afd6-f92f-422d-8928-a2aa3eac7c5e",
              "parentUUID": "79ae445a-233a-4a10-b2e5-9e974eb33078",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Count Study's Series' Instances with User 'test', 'test2', and 'oTest' result in 5, 5, and 0",
              "fullTitle": "Count Study's Series' Instances with User Count Study's Series' Instances with User 'test', 'test2', and 'oTest' result in 5, 5, and 0",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let userTestRequest = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/count`,\n    method: \"GET\",\n    user: TEST_USERS[0],\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    }\n});\nlet userTest2Request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/count`,\n    method: \"GET\",\n    user: TEST_USERS[1],\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    }\n});\nlet oTestRequest = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/count`,\n    method: \"GET\",\n    user: TEST_USERS[2],\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    }\n});\nlet userTestResponse = createResponse();\nlet userTest2Response = createResponse();\nlet oTestResponse = createResponse();\nawait Promise.all([\n    CountInstancesController(userTestRequest, userTestResponse),\n    CountInstancesController(userTest2Request, userTest2Response),\n    CountInstancesController(oTestRequest, oTestResponse)\n]);\nexpect(userTestResponse.statusCode).to.equal(200);\nexpect(userTest2Response.statusCode).to.equal(200);\nexpect(oTestResponse.statusCode).to.equal(200);\nexpect(userTestResponse._getJSONData()).to.have.property(\"count\").to.equal(5);\nexpect(userTest2Response._getJSONData()).to.have.property(\"count\").to.equal(5);\nexpect(oTestResponse._getJSONData()).to.have.property(\"count\").to.equal(0);",
              "err": {},
              "uuid": "48b9490c-7037-47ba-a8a6-70261f8777b6",
              "parentUUID": "79ae445a-233a-4a10-b2e5-9e974eb33078",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "48b9490c-7037-47ba-a8a6-70261f8777b6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "d01543c2-c00c-4696-92dd-84ddd63485ea",
          "title": "Count Instances with User",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\STAT-RS\\withUser\\countInstanceWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\STAT-RS\\withUser\\countInstanceWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Count Instances with User\"",
              "fullTitle": "Count Instances with User \"before all\" hook in \"Count Instances with User\"",
              "timedOut": false,
              "duration": 634,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet dicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let dicomFile of dicomFiles) {\n    await storeInstanceWithUserForTest(dicomFile, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "643d980a-76db-48c8-b563-b3035235013e",
              "parentUUID": "d01543c2-c00c-4696-92dd-84ddd63485ea",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Count Instances with User 'test', 'test2', and 'oTest' result in 11, 11, and 0",
              "fullTitle": "Count Instances with User Count Instances with User 'test', 'test2', and 'oTest' result in 11, 11, and 0",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let userTestRequest = createRequest({\n    url: `/dicom-web/instances/count`,\n    method: \"GET\",\n    user: TEST_USERS[0]\n});\nlet userTest2Request = createRequest({\n    url: `/dicom-web/instances/count`,\n    method: \"GET\",\n    user: TEST_USERS[1]\n});\nlet oTestRequest = createRequest({\n    url: `/dicom-web/instances/count`,\n    method: \"GET\",\n    user: TEST_USERS[2]\n});\nlet userTestResponse = createResponse();\nlet userTest2Response = createResponse();\nlet oTestResponse = createResponse();\nawait Promise.all([\n    CountInstancesController(userTestRequest, userTestResponse),\n    CountInstancesController(userTest2Request, userTest2Response),\n    CountInstancesController(oTestRequest, oTestResponse)\n]);\nexpect(userTestResponse.statusCode).to.equal(200);\nexpect(userTest2Response.statusCode).to.equal(200);\nexpect(oTestResponse.statusCode).to.equal(200);\nexpect(userTestResponse._getJSONData()).to.have.property(\"count\").to.equal(11);\nexpect(userTest2Response._getJSONData()).to.have.property(\"count\").to.equal(11);\nexpect(oTestResponse._getJSONData()).to.have.property(\"count\").to.equal(0);",
              "err": {},
              "uuid": "06cb69a7-6816-496b-a914-50e3c9cc2ebd",
              "parentUUID": "d01543c2-c00c-4696-92dd-84ddd63485ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "06cb69a7-6816-496b-a914-50e3c9cc2ebd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "c95d423a-d96a-45ab-a284-66c482ead363",
          "title": "Count Patients with User",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\STAT-RS\\withUser\\countPatientWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\STAT-RS\\withUser\\countPatientWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Count Patients with User\"",
              "fullTitle": "Count Patients with User \"before all\" hook in \"Count Patients with User\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet request = createRequest({\n    url: `/dicom-web/patients`,\n    method: \"POST\",\n    body: structuredClone(testPatient),\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet createPatientService = new CreatePatientService(request, response);\nawait createPatientService.create();",
              "err": {},
              "uuid": "5db4cdb6-81d0-4d45-ab89-1ead820cdeac",
              "parentUUID": "c95d423a-d96a-45ab-a284-66c482ead363",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should count patients with user 'test'",
              "fullTitle": "Count Patients with User Should count patients with user 'test'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/patients/count`,\n    method: \"GET\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CountPatientController(request, response);\nexpect(response.statusCode).to.equal(200);\nexpect(response._getJSONData()).to.have.property(\"count\").to.equal(1);",
              "err": {},
              "uuid": "8fe6b597-c388-4ec6-a707-e58e4103727b",
              "parentUUID": "c95d423a-d96a-45ab-a284-66c482ead363",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should count patients with user 'test2'",
              "fullTitle": "Count Patients with User Should count patients with user 'test2'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/patients/count`,\n    method: \"GET\",\n    user: TEST_USERS[1]\n});\nlet response = createResponse();\nawait CountPatientController(request, response);\nexpect(response.statusCode).to.equal(200);\nexpect(response._getJSONData()).to.have.property(\"count\").to.equal(1);",
              "err": {},
              "uuid": "c49fa3b1-921f-43c0-a501-04f757bfe134",
              "parentUUID": "c95d423a-d96a-45ab-a284-66c482ead363",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not count patients with user 'oTest'",
              "fullTitle": "Count Patients with User Should not count patients with user 'oTest'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/patients/count`,\n    method: \"GET\",\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\n\nawait CountPatientController(request, response);\nexpect(response.statusCode).to.equal(200);\nexpect(response._getJSONData()).have.property(\"count\").to.equal(0);",
              "err": {},
              "uuid": "e98cbaa0-e616-481b-b5be-f40d48a6bde8",
              "parentUUID": "c95d423a-d96a-45ab-a284-66c482ead363",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should count patients with user 'test', 'test2' and 'oTest' in concurrent then get proper count",
              "fullTitle": "Count Patients with User Should count patients with user 'test', 'test2' and 'oTest' in concurrent then get proper count",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let userTestRequest = createRequest({\n    url: `/dicom-web/patients/count`,\n    method: \"GET\",\n    user: TEST_USERS[0]\n});\nlet userTest2Request = createRequest({\n    url: `/dicom-web/patients/count`,\n    method: \"GET\",\n    user: TEST_USERS[1]\n});\nlet oTestRequest = createRequest({\n    url: `/dicom-web/patients/count`,\n    method: \"GET\",\n    user: TEST_USERS[2]\n});\nlet userTestResponse = createResponse();\nlet userTest2Response = createResponse();\nlet oTestResponse = createResponse();\nawait Promise.all([\n    CountPatientController(userTestRequest, userTestResponse),\n    CountPatientController(userTest2Request, userTest2Response),\n    CountPatientController(oTestRequest, oTestResponse)\n]);\nexpect(userTestResponse.statusCode).to.equal(200);\nexpect(userTest2Response.statusCode).to.equal(200);\nexpect(oTestResponse.statusCode).to.equal(200);\nexpect(userTestResponse._getJSONData().count).to.equal(1);\nexpect(userTest2Response._getJSONData().count).to.equal(1);\nexpect(oTestResponse._getJSONData().count).to.equal(0);",
              "err": {},
              "uuid": "5fe88c8e-521e-4750-9868-87a5612b11f2",
              "parentUUID": "c95d423a-d96a-45ab-a284-66c482ead363",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8fe6b597-c388-4ec6-a707-e58e4103727b",
            "c49fa3b1-921f-43c0-a501-04f757bfe134",
            "e98cbaa0-e616-481b-b5be-f40d48a6bde8",
            "5fe88c8e-521e-4750-9868-87a5612b11f2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "55d7ecb6-8d29-4a07-9fe4-c7eda3d53401",
          "title": "Count Study's Series with User",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\STAT-RS\\withUser\\countSeriesOfStudyWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\STAT-RS\\withUser\\countSeriesOfStudyWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Count Study's Series with User\"",
              "fullTitle": "Count Study's Series with User \"before all\" hook in \"Count Study's Series with User\"",
              "timedOut": false,
              "duration": 1686,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet dicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../testData/dicomFiles\"),\n    absolute: true\n});\nfor (let dicomFile of dicomFiles) {\n    await storeInstanceWithUserForTest(dicomFile, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "dd96b447-a23f-4901-8d65-2aa06ebc0244",
              "parentUUID": "55d7ecb6-8d29-4a07-9fe4-c7eda3d53401",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Count Series with User 'test', 'test2', and 'oTest' result in 3, 3, and 0",
              "fullTitle": "Count Study's Series with User Count Series with User 'test', 'test2', and 'oTest' result in 3, 3, and 0",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let userTestRequest = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/count`,\n    method: \"GET\",\n    params: {\n        studyUID: STUDY_UID\n    },\n    user: TEST_USERS[0]\n});\nlet userTest2Request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/count`,\n    method: \"GET\",\n    params: {\n        studyUID: STUDY_UID\n    },\n    user: TEST_USERS[1]\n});\nlet userOTestRequest = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/count`,\n    method: \"GET\",\n    params: {\n        studyUID: STUDY_UID\n    },\n    user: TEST_USERS[2]\n});\nlet userTestResponse = createResponse();\nlet userTest2Response = createResponse();\nlet userOTestResponse = createResponse();\nawait Promise.all([\n    CountSeriesController(userTestRequest, userTestResponse),\n    CountSeriesController(userTest2Request, userTest2Response),\n    CountSeriesController(userOTestRequest, userOTestResponse)\n]);\nexpect(userTestResponse.statusCode).to.equal(200);\nexpect(userTest2Response.statusCode).to.equal(200);\nexpect(userOTestResponse.statusCode).to.equal(200);\nexpect(userTestResponse._getJSONData()).to.have.property(\"count\").to.equal(3);\nexpect(userTest2Response._getJSONData()).to.have.property(\"count\").to.equal(3);\nexpect(userOTestResponse._getJSONData()).to.have.property(\"count\").to.equal(0);",
              "err": {},
              "uuid": "094f17cd-3605-42f5-8435-c7e6f8bfa50d",
              "parentUUID": "55d7ecb6-8d29-4a07-9fe4-c7eda3d53401",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "094f17cd-3605-42f5-8435-c7e6f8bfa50d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "fe422f9d-0a8a-4f5d-80ee-0e2a83d1b88b",
          "title": "Count Series with User",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\STAT-RS\\withUser\\countSeriesWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\STAT-RS\\withUser\\countSeriesWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Count Series with User\"",
              "fullTitle": "Count Series with User \"before all\" hook in \"Count Series with User\"",
              "timedOut": false,
              "duration": 621,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet dicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let dicomFile of dicomFiles) {\n    await storeInstanceWithUserForTest(dicomFile, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "28efec3c-810c-4d9e-8ded-a70126e90bd2",
              "parentUUID": "fe422f9d-0a8a-4f5d-80ee-0e2a83d1b88b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Count Series with User 'test', 'test2', and 'oTest' result in 3, 3, and 0",
              "fullTitle": "Count Series with User Count Series with User 'test', 'test2', and 'oTest' result in 3, 3, and 0",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let userTestRequest = createRequest({\n    url: `/dicom-web/series/count`,\n    method: \"GET\",\n    user: TEST_USERS[0]\n});\nlet userTest2Request = createRequest({\n    url: `/dicom-web/series/count`,\n    method: \"GET\",\n    user: TEST_USERS[1]\n});\nlet userOTestRequest = createRequest({\n    url: `/dicom-web/series/count`,\n    method: \"GET\",\n    user: TEST_USERS[2]\n});\nlet userTestResponse = createResponse();\nlet userTest2Response = createResponse();\nlet userOTestResponse = createResponse();\nawait Promise.all([\n    CountSeriesController(userTestRequest, userTestResponse),\n    CountSeriesController(userTest2Request, userTest2Response),\n    CountSeriesController(userOTestRequest, userOTestResponse)\n]);\nexpect(userTestResponse.statusCode).to.equal(200);\nexpect(userTest2Response.statusCode).to.equal(200);\nexpect(userOTestResponse.statusCode).to.equal(200);\nexpect(userTestResponse._getJSONData()).to.have.property(\"count\").to.equal(3);\nexpect(userTest2Response._getJSONData()).to.have.property(\"count\").to.equal(3);\nexpect(userOTestResponse._getJSONData()).to.have.property(\"count\").to.equal(0);",
              "err": {},
              "uuid": "d2c353ac-8b39-476d-93ab-16924eccfd80",
              "parentUUID": "fe422f9d-0a8a-4f5d-80ee-0e2a83d1b88b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2c353ac-8b39-476d-93ab-16924eccfd80"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "4c628ec9-02d3-4941-b6b9-671c2a439f2f",
          "title": "Count Studies with User",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\STAT-RS\\withUser\\countStudyWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\STAT-RS\\withUser\\countStudyWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Count Studies with User\"",
              "fullTitle": "Count Studies with User \"before all\" hook in \"Count Studies with User\"",
              "timedOut": false,
              "duration": 630,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet dicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let dicomFile of dicomFiles) {\n    await storeInstanceWithUserForTest(dicomFile, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "3a08fd63-4f2b-49da-a37f-caae2bd07709",
              "parentUUID": "4c628ec9-02d3-4941-b6b9-671c2a439f2f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Count Studies with User 'test', 'test2', and 'oTest' result in 1, 1, and 0",
              "fullTitle": "Count Studies with User Count Studies with User 'test', 'test2', and 'oTest' result in 1, 1, and 0",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let userTestRequest = createRequest({\n    url: `/dicom-web/studies/count`,\n    method: \"GET\",\n    user: TEST_USERS[0]\n});\nlet userTest2Request = createRequest({\n    url: `/dicom-web/studies/count`,\n    method: \"GET\",\n    user: TEST_USERS[1]\n});\nlet userOTestRequest = createRequest({\n    url: `/dicom-web/studies/count`,\n    method: \"GET\",\n    user: TEST_USERS[2]\n});\nlet userTestResponse = createResponse();\nlet userTest2Response = createResponse();\nlet userOTestResponse = createResponse();\nawait Promise.all([\n    CountStudyController(userTestRequest, userTestResponse),\n    CountStudyController(userTest2Request, userTest2Response),\n    CountStudyController(userOTestRequest, userOTestResponse)\n]);\nexpect(userTestResponse.statusCode).to.equal(200);\nexpect(userTest2Response.statusCode).to.equal(200);\nexpect(userOTestResponse.statusCode).to.equal(200);\nexpect(userTestResponse._getJSONData()).to.have.property(\"count\").to.equal(1);\nexpect(userTest2Response._getJSONData()).to.have.property(\"count\").to.equal(1);\nexpect(userOTestResponse._getJSONData()).to.have.property(\"count\").to.equal(0);",
              "err": {},
              "uuid": "5702d65b-7c14-482c-b018-4111b8c5a778",
              "parentUUID": "4c628ec9-02d3-4941-b6b9-671c2a439f2f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5702d65b-7c14-482c-b018-4111b8c5a778"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
          "title": "Store DICOM Instance route: POST '/dicom-web/studies'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\STOW-RS\\storeInstance.test.js",
          "file": "\\test\\api\\dicom-web\\STOW-RS\\storeInstance.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Store DICOM Instance route: POST '/dicom-web/studies'\"",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' \"before all\" hook in \"Store DICOM Instance route: POST '/dicom-web/studies'\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "4b616d8b-4c4d-423e-9711-1dde5660e70c",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Store DICOM Instance route: POST '/dicom-web/studies'\"",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' \"after all\" hook in \"Store DICOM Instance route: POST '/dicom-web/studies'\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "10cc088c-77e4-40e4-abd9-cc4bbb3cf3da",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should store a DICOM instance with complete attributes successfully and have proper attributes",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store a DICOM instance with complete attributes successfully and have proper attributes",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDicomFilename = resolve(__dirname, \"../../../testData/dicomFiles/1-01-mod-vo\");\n        const response = await storeInstanceForTest(testDicomFilename);\n        expect(response.statusCode).to.be.equal(200);\n        let testFileDicomJson = await JDcm2Json.get(testDicomFilename);\n        await expectInstanceHaveProperAttributes(testFileDicomJson);",
              "err": {},
              "uuid": "5b1fa63a-4c73-44af-bfca-aff9e281aa7a",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should update a DICOM instance",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should update a DICOM instance",
              "timedOut": false,
              "duration": 69,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDicomFilename = resolve(__dirname, \"../../../testData/forStore/1-01-mod-vo-updated\");\nconst response = await storeInstanceForTest(testDicomFilename);\nexpect(response.statusCode).to.be.equal(200);\nlet testFileDicomJson = await JDcm2Json.get(testDicomFilename);\nawait expectInstanceHaveProperAttributes(testFileDicomJson);",
              "err": {},
              "uuid": "422e9ee6-3f76-473d-ad76-3d58d202bb1d",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1, CR) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1, CR) successfully",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "1076d9f1-fc4a-4142-a260-4cd658b3e9db",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1.1, DX) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1.1, DX) successfully",
              "timedOut": false,
              "duration": 480,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "18176810-bf0d-4a2d-ad94-6fad274582ca",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, CT) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, CT) successfully",
              "timedOut": false,
              "duration": 66,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "ba8c7c4a-8a2c-4c53-b5f4-d1a9983539f0",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.4, MR) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.4, MR) successfully",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "4eff284e-393c-49bb-9d4f-5f59e5c38d35",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, US) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, US) successfully",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "dd9c22b0-5e5a-4dbb-bb28-e5e1682c01e4",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.104.1, US) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.104.1, US) successfully",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "1d62adee-6a98-491e-a1d3-aee7fdbcd9c0",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, SC) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, SC) successfully",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "f10db3ff-a504-4c41-a9d2-428c1cda25bc",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, OT) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, OT) successfully",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "c89fa29b-357f-456f-9576-c7358bb3b765",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.9.1.1, ECG) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.9.1.1, ECG) successfully",
              "timedOut": false,
              "duration": 138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "e3516ef0-6cc1-4936-8fc2-4ca564bb51d0",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.12.1, XA) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.12.1, XA) successfully",
              "timedOut": false,
              "duration": 135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "a8847d78-4c78-4b27-875b-9c7b16102083",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.3.1, Multi-Frame (US)) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.3.1, Multi-Frame (US)) successfully",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "7563ae19-2a7c-4358-b5f9-c3e8cf11bf1d",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.91.1, ANN) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.91.1, ANN) successfully",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "aae34df2-e1cf-490b-b55b-53131f0b78e2",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.481.3, RTSTRUCT) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.481.3, RTSTRUCT) successfully",
              "timedOut": false,
              "duration": 150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "053490a1-e239-498b-a721-58bb4dbfaa45",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.66.4, SEG) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.66.4, SEG) successfully",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "fba9e103-6ed5-4590-b8eb-81085a5b2bfd",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.11.1, GSPS) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.11.1, GSPS) successfully",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "fc585a3a-94a1-4572-9101-09401d10c86b",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.91, JPEG 2000) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.91, JPEG 2000) successfully",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "f81a53ca-a450-4433-b4d4-df1bd9e224e1",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.51, JPEG Lossless) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.51, JPEG Lossless) successfully",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "dec46c2a-57cf-4a63-a157-eb1d85393ed0",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.50, JPEG Baseline) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.50, JPEG Baseline) successfully",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "650de329-2edd-4250-950b-3a7ca1594e58",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.1, Explicit VR Little Endian (Uncompressed)) successfully",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.1, Explicit VR Little Endian (Uncompressed)) successfully",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(filename);\nexpect(response.statusCode).to.be.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"object\");\nexpect(data?.[\"00081198\"]?.[\"Value\"]?.length || 0).to.be.equal(0);\nexpect(data).have.property(\"00081199\").have.property(\"Value\").have.lengthOf(1);",
              "err": {},
              "uuid": "e6a4c76c-d1d2-4708-a805-b2fcbae8a7d3",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return error when store not DICOM file",
              "fullTitle": "Store DICOM Instance route: POST '/dicom-web/studies' Should return error when store not DICOM file",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await storeInstanceForTest(resolve(__dirname, \"../../../testData/dicomFiles/data.json\"));\nexpect(response.statusCode).to.be.not.equal(200);",
              "err": {},
              "uuid": "34a4e08b-a619-409a-81fb-4565f75975d8",
              "parentUUID": "1565aaa1-adc4-49f6-89d6-fa7807343cd4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b1fa63a-4c73-44af-bfca-aff9e281aa7a",
            "422e9ee6-3f76-473d-ad76-3d58d202bb1d",
            "1076d9f1-fc4a-4142-a260-4cd658b3e9db",
            "18176810-bf0d-4a2d-ad94-6fad274582ca",
            "ba8c7c4a-8a2c-4c53-b5f4-d1a9983539f0",
            "4eff284e-393c-49bb-9d4f-5f59e5c38d35",
            "dd9c22b0-5e5a-4dbb-bb28-e5e1682c01e4",
            "1d62adee-6a98-491e-a1d3-aee7fdbcd9c0",
            "f10db3ff-a504-4c41-a9d2-428c1cda25bc",
            "c89fa29b-357f-456f-9576-c7358bb3b765",
            "e3516ef0-6cc1-4936-8fc2-4ca564bb51d0",
            "a8847d78-4c78-4b27-875b-9c7b16102083",
            "7563ae19-2a7c-4358-b5f9-c3e8cf11bf1d",
            "aae34df2-e1cf-490b-b55b-53131f0b78e2",
            "053490a1-e239-498b-a721-58bb4dbfaa45",
            "fba9e103-6ed5-4590-b8eb-81085a5b2bfd",
            "fc585a3a-94a1-4572-9101-09401d10c86b",
            "f81a53ca-a450-4433-b4d4-df1bd9e224e1",
            "dec46c2a-57cf-4a63-a157-eb1d85393ed0",
            "650de329-2edd-4250-950b-3a7ca1594e58",
            "e6a4c76c-d1d2-4708-a805-b2fcbae8a7d3",
            "34a4e08b-a619-409a-81fb-4565f75975d8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1936,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "a2a4f8e2-de87-471f-8829-746f779b9b32",
          "title": "Store DICOM Instance with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\STOW-RS\\storeInstanceWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\STOW-RS\\storeInstanceWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Store DICOM Instance with user\"",
              "fullTitle": "Store DICOM Instance with user \"before all\" hook in \"Store DICOM Instance with user\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}",
              "err": {},
              "uuid": "7701bb56-2a11-4646-9cfc-3acfcf7bc877",
              "parentUUID": "a2a4f8e2-de87-471f-8829-746f779b9b32",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should store a DICOM instance with user successfully",
              "fullTitle": "Store DICOM Instance with user Should store a DICOM instance with user successfully",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDicomFilename = resolve(__dirname, \"../../../testData/dicomFiles/1-01-mod-vo\");\nconst { storeResult, tempFilepath } = await storeInstanceWithUserForTest(testDicomFilename, TEST_USERS[0]);\nexpect(storeResult.code).to.be.equal(200);\nexpect(storeResult.responseMessage)\n    .have.property(\"00081199\")\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .have.property(\"00081155\")\n    .have.property(\"Value\")\n    .have.property(\"0\")\n    .eq(\"1.2.276.0.7230010.3.1.4.2304755699.3648.1691733220.920\");\nawait storeInstanceWithUserForTest(testDicomFilename, TEST_USERS[1]);\nif (process.env.TEST_DB_TYPE === \"sql\") {\n    let patients = await PatientModel.findAll({});\n    expect(patients).to.have.lengthOf(1);\n    expect(patients[0].user_id).to.be.not.null;\n    let studies = await StudyModel.findAll({});\n    expect(studies).to.have.lengthOf(1);\n    expect(studies[0].user_id).to.be.not.null;\n    let series = await SeriesModel.findAll({});\n    expect(series).to.have.lengthOf(1);\n    expect(series[0].user_id).to.be.not.null;\n    let instances = await InstanceModel.findAll({});\n    expect(instances).to.have.lengthOf(1);\n    expect(instances[0].user_id).to.be.not.null;\n}",
              "err": {},
              "uuid": "2916995d-3928-420f-94b4-ce0e4d8c5f2b",
              "parentUUID": "a2a4f8e2-de87-471f-8829-746f779b9b32",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2916995d-3928-420f-94b4-ce0e4d8c5f2b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 178,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "976361b9-6792-4b6f-b7a2-597bc996f4a6",
          "title": "UPS-RS workitem cancellation",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2c80f4ac-6116-41b1-918c-7c5fc78e5cc4",
              "title": "cancel IN PROGRESS",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"cancel IN PROGRESS\"",
                  "fullTitle": "UPS-RS workitem cancellation cancel IN PROGRESS \"before all\" hook in \"cancel IN PROGRESS\"",
                  "timedOut": false,
                  "duration": 37,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await dbInstance.destroyAll();\nawait createTestInProgressWorkitem();",
                  "err": {},
                  "uuid": "c94b53e6-f51f-4e28-a033-c668c0d7e6d7",
                  "parentUUID": "2c80f4ac-6116-41b1-918c-7c5fc78e5cc4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should cancel workitem successfully",
                  "fullTitle": "UPS-RS workitem cancellation cancel IN PROGRESS Should cancel workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}/cancelrequest`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify(cancellationRequestPayload)\n});\nexpect(response.statusCode).to.equal(202);",
                  "err": {},
                  "uuid": "3464fb23-9b82-4ed4-a8f1-52c17a2c98db",
                  "parentUUID": "2c80f4ac-6116-41b1-918c-7c5fc78e5cc4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3464fb23-9b82-4ed4-a8f1-52c17a2c98db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "648ab4cd-7bb3-44cd-afb3-88fa9c6ebf5c",
              "title": "cancel CANCELED",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"cancel CANCELED\"",
                  "fullTitle": "UPS-RS workitem cancellation cancel CANCELED \"before all\" hook in \"cancel CANCELED\"",
                  "timedOut": false,
                  "duration": 43,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await dbInstance.destroyAll();\nawait createTestCanceledWorkitem();",
                  "err": {},
                  "uuid": "6b71aafd-f035-41d6-97db-2cec71f97d9a",
                  "parentUUID": "648ab4cd-7bb3-44cd-afb3-88fa9c6ebf5c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should cancel workitem successfully",
                  "fullTitle": "UPS-RS workitem cancellation cancel CANCELED Should cancel workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}/cancelrequest`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify(cancellationRequestPayload)\n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "25ca74b7-5542-461b-809d-d3b1003f5649",
                  "parentUUID": "648ab4cd-7bb3-44cd-afb3-88fa9c6ebf5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25ca74b7-5542-461b-809d-d3b1003f5649"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "768ab6d9-d283-48d4-be95-39fb3e42084c",
              "title": "cancel SCHEDULED",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"cancel SCHEDULED\"",
                  "fullTitle": "UPS-RS workitem cancellation cancel SCHEDULED \"before all\" hook in \"cancel SCHEDULED\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await dbInstance.destroyAll();\nawait createTestScheduledWorkitem();",
                  "err": {},
                  "uuid": "d28b3fcc-8b18-421c-b02a-48cc1867b799",
                  "parentUUID": "768ab6d9-d283-48d4-be95-39fb3e42084c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should raise 409 (Conflict) when cancelling SCHEDULED workitem",
                  "fullTitle": "UPS-RS workitem cancellation cancel SCHEDULED Should raise 409 (Conflict) when cancelling SCHEDULED workitem",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}/cancelrequest`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify(cancellationRequestPayload)\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "0a3bff99-0ebf-44fc-835b-3d22155b559b",
                  "parentUUID": "768ab6d9-d283-48d4-be95-39fb3e42084c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a3bff99-0ebf-44fc-835b-3d22155b559b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "33539814-0a39-4d68-9e94-ea5c3d1eb268",
              "title": "cancel COMPLETED",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\cancelWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"cancel COMPLETED\"",
                  "fullTitle": "UPS-RS workitem cancellation cancel COMPLETED \"before all\" hook in \"cancel COMPLETED\"",
                  "timedOut": false,
                  "duration": 62,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await dbInstance.destroyAll();\nawait createTestCompletedWorkitem();",
                  "err": {},
                  "uuid": "fa6f6b6d-4c4b-423d-9452-9d664eab1bc4",
                  "parentUUID": "33539814-0a39-4d68-9e94-ea5c3d1eb268",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should raise 409 (Conflict) when cancelling COMPLETED workitem",
                  "fullTitle": "UPS-RS workitem cancellation cancel COMPLETED Should raise 409 (Conflict) when cancelling COMPLETED workitem",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}/cancelrequest`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify(cancellationRequestPayload)\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "4e00e000-8a94-4684-a98e-2927f20fa0cd",
                  "parentUUID": "33539814-0a39-4d68-9e94-ea5c3d1eb268",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e00e000-8a94-4684-a98e-2927f20fa0cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "7f1ea512-403c-4b37-ae29-751486015006",
          "title": "UPS-RS change workitem state",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS change workitem state\"",
              "fullTitle": "UPS-RS change workitem state \"before all\" hook in \"UPS-RS change workitem state\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet createWorkitemResponse = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    payload: testWorkitem\n});\ncreatedWorkitemLocation = createWorkitemResponse.headers[\"content-location\"];",
              "err": {},
              "uuid": "b130c2c3-720f-4ae6-b266-6c4504012cfc",
              "parentUUID": "7f1ea512-403c-4b37-ae29-751486015006",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should raise 409 (Conflict) when changing SCHEDULED to COMPLETED",
              "fullTitle": "UPS-RS change workitem state Should raise 409 (Conflict) when changing SCHEDULED to COMPLETED",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n            method: \"PUT\",\n            url: `/dicom-web/workitems/${workitemUID}/state`,\n            headers: {\n                \"Content-Type\": \"application/dicom+json\"\n            },\n            payload: JSON.stringify([changeUpsStateToCompletedRequestPayload])\n        });\n        expect(response.statusCode).to.equal(409);",
              "err": {},
              "uuid": "b427a7bb-0c28-4344-b3e6-55762d1f70c1",
              "parentUUID": "7f1ea512-403c-4b37-ae29-751486015006",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "83d1fbb5-8eac-478d-911c-06e1bcd27d4b",
              "title": "change workitem state to IN PROGRESS",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should change workitem to IN PROGRESS successfully",
                  "fullTitle": "UPS-RS change workitem state change workitem state to IN PROGRESS Should change workitem to IN PROGRESS successfully",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n                method: \"PUT\",\n                url: `/dicom-web/workitems/${workitemUID}/state`,\n                headers: {\n                    \"Content-Type\": \"application/dicom+json\"\n                },\n                payload: JSON.stringify([changeUpsStateRequestPayload])\n            });\n            expect(response.statusCode).to.equal(200);\n            let fetchWorkitemResponse = await inject(app, {\n                method: \"GET\",\n                url: createdWorkitemLocation\n            });\n            let data = await fetchWorkitemResponse.json();\n            expect(data).to.be.an(\"array\");\n            expect(data[0]).to.be.an(\"object\");\n            expect(data[0]).have.property(\"00741000\").have.property(\"Value\").have.property(\"0\").to.be.equal(\"IN PROGRESS\");",
                  "err": {},
                  "uuid": "dce7311e-49a8-47c6-87ef-c4e45719d085",
                  "parentUUID": "83d1fbb5-8eac-478d-911c-06e1bcd27d4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise Bad Request (400) when missing Transaction UID",
                  "fullTitle": "UPS-RS change workitem state change workitem state to IN PROGRESS Should raise Bad Request (400) when missing Transaction UID",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let clonedPayload = structuredClone(changeUpsStateRequestPayload);\ndelete clonedPayload[\"00081195\"];\nlet response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([clonedPayload])\n});\nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "0c090b33-2fc2-4154-af26-04725e149e51",
                  "parentUUID": "83d1fbb5-8eac-478d-911c-06e1bcd27d4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 409 (Conflict) when workitem is already IN PROGRESS",
                  "fullTitle": "UPS-RS change workitem state change workitem state to IN PROGRESS Should raise 409 (Conflict) when workitem is already IN PROGRESS",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateRequestPayload])\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "020da2ea-d2bb-4dca-8114-94695f3653a1",
                  "parentUUID": "83d1fbb5-8eac-478d-911c-06e1bcd27d4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "0aa434a7-0f44-4357-8dcd-f4d610252e7a",
                  "title": "update workitem that state is IN PROGRESS",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
                  "file": "\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should raise Bad Request (400) when missing Transaction UID in request payload",
                      "fullTitle": "UPS-RS change workitem state change workitem state to IN PROGRESS update workitem that state is IN PROGRESS Should raise Bad Request (400) when missing Transaction UID in request payload",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify(testWorkitem)\n});\nexpect(response.statusCode).to.equal(400);",
                      "err": {},
                      "uuid": "a7fdfd72-54eb-41c0-a78a-5981db928af0",
                      "parentUUID": "0aa434a7-0f44-4357-8dcd-f4d610252e7a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should raise Bad Request (400) when Transaction UID not consistent",
                      "fullTitle": "UPS-RS change workitem state change workitem state to IN PROGRESS update workitem that state is IN PROGRESS Should raise Bad Request (400) when Transaction UID not consistent",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let aTestWorkitem = structuredClone(testWorkitem[0]);\naTestWorkitem[\"00081195\"][\"Value\"] = [\"1.2.3.4\"];\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([aTestWorkitem])\n});\nexpect(response.statusCode).to.equal(400);",
                      "err": {},
                      "uuid": "02f606cd-21e5-4875-932e-6b9571983d4c",
                      "parentUUID": "0aa434a7-0f44-4357-8dcd-f4d610252e7a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a7fdfd72-54eb-41c0-a78a-5981db928af0",
                    "02f606cd-21e5-4875-932e-6b9571983d4c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                }
              ],
              "passes": [
                "dce7311e-49a8-47c6-87ef-c4e45719d085",
                "0c090b33-2fc2-4154-af26-04725e149e51",
                "020da2ea-d2bb-4dca-8114-94695f3653a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 27,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "23ec6e18-a325-4d7b-8f9f-23f46483805b",
              "title": "change workitem state to COMPLETED",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should raise Bad Request (400) when changing state to COMPLETED that workitem not meet to final state",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should raise Bad Request (400) when changing state to COMPLETED that workitem not meet to final state",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCompletedRequestPayload])\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "3853001e-e21b-47d5-944a-a7901b90b162",
                  "parentUUID": "23ec6e18-a325-4d7b-8f9f-23f46483805b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise Bad Request (400) when Transaction UID not consistent",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should raise Bad Request (400) when Transaction UID not consistent",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let requestPayload = structuredClone(changeUpsStateRequestPayload);\nrequestPayload[\"00081195\"][\"Value\"][0] = \"1.2.3.4\";\nrequestPayload[\"00741000\"][\"Value\"][0] = \"COMPLETED\";\nlet response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([requestPayload])\n});\nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "392886ca-4f1e-417d-a75b-301132a59f1a",
                  "parentUUID": "23ec6e18-a325-4d7b-8f9f-23f46483805b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should update workitem with 'Unified Procedure Step Performed Procedure Sequence'",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should update workitem with 'Unified Procedure Step Performed Procedure Sequence'",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let upsPerformedProcedureSequence = {\n    \"00741216\": {\n        \"vr\": \"SQ\",\n        \"Value\": [\n            {\n                \"00404050\": {\n                    \"vr\": \"DT\",\n                    \"Value\": [\n                        \"20230523051211.171171+0800\"\n                    ]\n                },\n                \"00404051\": {\n                    \"vr\": \"DT\",\n                    \"Value\": [\n                        \"20230523053011.171171+0800\"\n                    ]\n                },\n                \"00404028\": {\n                    \"vr\": \"SQ\",\n                    \"Value\": [\n                        {\n                            \"00080100\": {\n                                \"vr\": \"SH\",\n                                \"Value\": [\n                                    \"AnyStation\"\n                                ]\n                            },\n                            \"00080102\": {\n                                \"vr\": \"SH\",\n                                \"Value\": [\n                                    \"RadReadingGroup\"\n                                ]\n                            },\n                            \"00080104\": {\n                                \"vr\": \"LO\",\n                                \"Value\": [\n                                    \"performerAE\"\n                                ]\n                            }\n                        }\n                    ]\n                },\n                \"00404019\": {\n                    \"vr\": \"SQ\",\n                    \"Value\": [\n                        {\n                            \"00080100\": {\n                                \"vr\": \"SH\",\n                                \"Value\": [\n                                    \"AnyMethod\"\n                                ]\n                            },\n                            \"00080102\": {\n                                \"vr\": \"SH\",\n                                \"Value\": [\n                                    \"99RACCOON\"\n                                ]\n                            },\n                            \"00080104\": {\n                                \"vr\": \"LO\",\n                                \"Value\": [\n                                    \"Local Any Method\"\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n};\nlet clonedPayload = structuredClone(testWorkitem[0]);\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([\n        {\n            ...clonedPayload,\n            ...{ \"00081195\": changeUpsStateRequestPayload[\"00081195\"] },\n            ...upsPerformedProcedureSequence\n        }\n    ])\n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "8dc877d9-2d19-42c4-a06f-8cd115655c9f",
                  "parentUUID": "23ec6e18-a325-4d7b-8f9f-23f46483805b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should change workitem state to COMPLETED successfully",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should change workitem state to COMPLETED successfully",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCompletedRequestPayload])\n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "2a80ff99-0257-48af-a06a-aaba052b3c0b",
                  "parentUUID": "23ec6e18-a325-4d7b-8f9f-23f46483805b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise Bad Request (400) when updating workitem in COMPLETED state",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should raise Bad Request (400) when updating workitem in COMPLETED state",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let clonedPayload = structuredClone(testWorkitem[0]);\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([{\n        ...clonedPayload,\n        ...{ \"00081195\": changeUpsStateRequestPayload[\"00081195\"] }\n    }])\n});\nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "bc672428-3689-4f75-b144-b22bdd82ddbf",
                  "parentUUID": "23ec6e18-a325-4d7b-8f9f-23f46483805b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 409 (Conflict) when changing state COMPLETED to CANCELED",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should raise 409 (Conflict) when changing state COMPLETED to CANCELED",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCanceledRequestPayload])\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "da1c739f-9d13-451c-aa38-615618cd30e3",
                  "parentUUID": "23ec6e18-a325-4d7b-8f9f-23f46483805b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 409 (Conflict) when changing state COMPLETED to IN PROGRESS",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should raise 409 (Conflict) when changing state COMPLETED to IN PROGRESS",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateRequestPayload])\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "a1dda4d8-c0a1-4ee2-a1b6-d3e5a094d994",
                  "parentUUID": "23ec6e18-a325-4d7b-8f9f-23f46483805b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should have 'warning' in headers when state already be COMPLETED",
                  "fullTitle": "UPS-RS change workitem state change workitem state to COMPLETED Should have 'warning' in headers when state already be COMPLETED",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCompletedRequestPayload])\n});\nconsole.log(response.headers);\nexpect(response.headers).have.property(\"warning\");",
                  "err": {},
                  "uuid": "e3cb6ded-d36b-4fde-b16a-7d473a1abea2",
                  "parentUUID": "23ec6e18-a325-4d7b-8f9f-23f46483805b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3853001e-e21b-47d5-944a-a7901b90b162",
                "392886ca-4f1e-417d-a75b-301132a59f1a",
                "8dc877d9-2d19-42c4-a06f-8cd115655c9f",
                "2a80ff99-0257-48af-a06a-aaba052b3c0b",
                "bc672428-3689-4f75-b144-b22bdd82ddbf",
                "da1c739f-9d13-451c-aa38-615618cd30e3",
                "a1dda4d8-c0a1-4ee2-a1b6-d3e5a094d994",
                "e3cb6ded-d36b-4fde-b16a-7d473a1abea2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 64,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "91e98cbb-99f7-4ab3-9630-ef4445362eb7",
              "title": "change workitem state to CANCELED",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\changeWorkitemState.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"change workitem state to CANCELED\"",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED \"before all\" hook in \"change workitem state to CANCELED\"",
                  "timedOut": false,
                  "duration": 18,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await dbInstance.destroyAll();\nawait inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    payload: testWorkitem\n});",
                  "err": {},
                  "uuid": "43749f7a-b008-49fb-9f9c-232cfdaadcd7",
                  "parentUUID": "91e98cbb-99f7-4ab3-9630-ef4445362eb7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should raise 409 (Conflict) when changing state SCHEDULED to CANCELED",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED Should raise 409 (Conflict) when changing state SCHEDULED to CANCELED",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCanceledRequestPayload])\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "240868ae-a408-4cca-bf41-c77d9abfafe4",
                  "parentUUID": "91e98cbb-99f7-4ab3-9630-ef4445362eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should change state to IN PROGRESS",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED Should change state to IN PROGRESS",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let changeStateToInProgressResponse = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateRequestPayload])\n});\nexpect(changeStateToInProgressResponse.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "3f98b6fc-9dff-4cd8-a989-068583b307cc",
                  "parentUUID": "91e98cbb-99f7-4ab3-9630-ef4445362eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise Bad Request (400) when Transaction UID not consistent",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED Should raise Bad Request (400) when Transaction UID not consistent",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let requestPayload = structuredClone(changeUpsStateRequestPayload);\nrequestPayload[\"00081195\"][\"Value\"][0] = \"1.2.3.4\";\nrequestPayload[\"00741000\"][\"Value\"][0] = \"CANCELED\";\nlet response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([requestPayload])\n});\nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "72984351-1368-4fcc-8499-248f6c235954",
                  "parentUUID": "91e98cbb-99f7-4ab3-9630-ef4445362eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should change workitem state to CANCELED successfully",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED Should change workitem state to CANCELED successfully",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCanceledRequestPayload])\n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "a20edf49-cc78-42b1-850f-c343da864066",
                  "parentUUID": "91e98cbb-99f7-4ab3-9630-ef4445362eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should have 'warning' in headers when state already be CANCELED",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED Should have 'warning' in headers when state already be CANCELED",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCanceledRequestPayload])\n});\nconsole.log(response.headers);\nexpect(response.headers).have.property(\"warning\");",
                  "err": {},
                  "uuid": "e8ec44d7-501d-4d81-b29a-66ed3dddad5a",
                  "parentUUID": "91e98cbb-99f7-4ab3-9630-ef4445362eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 409 (Conflict) when changing state CANCELED to IN PROGRESS",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED Should raise 409 (Conflict) when changing state CANCELED to IN PROGRESS",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateRequestPayload])\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "50fb707e-7fdf-44d0-b3f7-35d52348a95f",
                  "parentUUID": "91e98cbb-99f7-4ab3-9630-ef4445362eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 409 (Conflict) when changing state CANCELED to COMPLETED",
                  "fullTitle": "UPS-RS change workitem state change workitem state to CANCELED Should raise 409 (Conflict) when changing state CANCELED to COMPLETED",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateToCompletedRequestPayload])\n});\nexpect(response.statusCode).to.equal(409);",
                  "err": {},
                  "uuid": "f8eab8dc-5c83-49b6-8155-5c9cd9f978d3",
                  "parentUUID": "91e98cbb-99f7-4ab3-9630-ef4445362eb7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "240868ae-a408-4cca-bf41-c77d9abfafe4",
                "3f98b6fc-9dff-4cd8-a989-068583b307cc",
                "72984351-1368-4fcc-8499-248f6c235954",
                "a20edf49-cc78-42b1-850f-c343da864066",
                "e8ec44d7-501d-4d81-b29a-66ed3dddad5a",
                "50fb707e-7fdf-44d0-b3f7-35d52348a95f",
                "f8eab8dc-5c83-49b6-8155-5c9cd9f978d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 63,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "b427a7bb-0c28-4344-b3e6-55762d1f70c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "e281cf07-5a2c-4178-bb42-6a4464939664",
          "title": "UPS-RS create workitem",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\createWorkitem.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\createWorkitem.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS create workitem\"",
              "fullTitle": "UPS-RS create workitem \"before all\" hook in \"UPS-RS create workitem\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "8fd07d20-9432-4297-a6cf-e6eace8626ca",
              "parentUUID": "e281cf07-5a2c-4178-bb42-6a4464939664",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"UPS-RS create workitem\"",
              "fullTitle": "UPS-RS create workitem \"after all\" hook in \"UPS-RS create workitem\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "a8c27be3-ccce-487e-9606-33a09f5ca5a6",
              "parentUUID": "e281cf07-5a2c-4178-bb42-6a4464939664",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should create workitem and have required attributes",
              "fullTitle": "UPS-RS create workitem Should create workitem and have required attributes",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify(testWorkitem)\n});\nexpect(response.statusCode).to.equal(201);\nexpect(response.headers).have.property(\"content-location\").to.be.a(\"string\");\nlet fetchWorkitemResponse = await inject(app, {\n    method: \"GET\",\n    url: response.headers[\"content-location\"]\n});\nexpect(fetchWorkitemResponse.statusCode).to.equal(200);\nlet data = await fetchWorkitemResponse.json();\nlet workitem = data[0];\n// The origin server shall create a new Workitem in the SCHEDULED state\nexpect(workitem).have.property(\"00741000\").have.property(\"Value\").have.property(\"0\").to.be.equal(\"SCHEDULED\");\n// #region Patient level\nexpect(workitem).to.be.a(\"object\");\nexpect(workitem).have.property(\"00100010\").to.be.deep.equal(testWorkitem[0][\"00100010\"]);\nexpect(workitem).have.property(\"00100020\").to.be.deep.equal(testWorkitem[0][\"00100020\"]);\nexpect(workitem).have.property(\"00100021\").to.be.deep.equal(testWorkitem[0][\"00100021\"]);\nexpect(workitem).have.property(\"00100030\").to.be.deep.equal(testWorkitem[0][\"00100030\"]);\nexpect(workitem).have.property(\"00100040\").to.be.deep.equal(testWorkitem[0][\"00100040\"]);\nexpect(workitem).have.property(\"00104000\").to.be.deep.equal(testWorkitem[0][\"00104000\"]);\n// #endregion\n// #region UPS level\nexpect(workitem).have.property(\"00080018\");\nexpect(workitem).have.property(\"00380010\").to.be.deep.equal(testWorkitem[0][\"00380010\"]);\nexpect(workitem).have.property(\"00380014\").to.be.deep.equal(testWorkitem[0][\"00380014\"]);\nexpect(workitem).have.property(\"00404005\").to.be.deep.equal(testWorkitem[0][\"00404005\"]);\nexpect(workitem).have.property(\"00404018\").to.be.deep.equal(testWorkitem[0][\"00404018\"]);\nexpect(workitem).have.property(\"00404025\").to.be.deep.equal(testWorkitem[0][\"00404025\"]);\nexpect(workitem).have.property(\"00404026\").to.be.deep.equal(testWorkitem[0][\"00404026\"]);\nexpect(workitem).have.property(\"00404027\").to.be.deep.equal(testWorkitem[0][\"00404027\"]);\nexpect(workitem).have.property(\"00404041\").to.be.deep.equal(testWorkitem[0][\"00404041\"]);\nexpect(workitem).have.property(\"0040A370\").to.be.deep.equal(testWorkitem[0][\"0040A370\"]);\nexpect(workitem).have.property(\"00741200\").to.be.deep.equal(testWorkitem[0][\"00741200\"]);\nexpect(workitem).have.property(\"00741202\").to.be.deep.equal(testWorkitem[0][\"00741202\"]);\nexpect(workitem).have.property(\"00741204\").to.be.deep.equal(testWorkitem[0][\"00741204\"]);\nexpect(workitem).have.property(\"0040E020\").to.be.deep.equal(testWorkitem[0][\"0040E020\"]);\nexpect(workitem).have.property(\"00404034\").to.be.deep.equal(testWorkitem[0][\"00404034\"]);\n// #endregion",
              "err": {},
              "uuid": "fb611a82-07d0-442b-924f-5f2f186eb3eb",
              "parentUUID": "e281cf07-5a2c-4178-bb42-6a4464939664",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should create workitem with specified instance UID",
              "fullTitle": "UPS-RS create workitem Should create workitem with specified instance UID",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify(testWorkitem)\n});\nexpect(response.statusCode).to.equal(201);\nlet fetchWorkitemResponse = await inject(app, {\n    method: \"GET\",\n    url: response.headers[\"content-location\"]\n});\nexpect(fetchWorkitemResponse.statusCode).to.equal(200);\nlet data = await fetchWorkitemResponse.json();\nlet workitem = data[0];\nexpect(workitem).to.be.a(\"object\");\nexpect(workitem).have.property(\"00080018\").have.property(\"Value\").have.property(\"0\").to.be.equal(workitemUID);",
              "err": {},
              "uuid": "6cafcebe-f087-4116-a38e-1f682702226d",
              "parentUUID": "e281cf07-5a2c-4178-bb42-6a4464939664",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should supply a work list when payload missing one",
              "fullTitle": "UPS-RS create workitem Should supply a work list when payload missing one",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedTestWorkitem = structuredClone(testWorkitem[0]);\ndelete clonedTestWorkitem[\"00741202\"];\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/workitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedTestWorkitem])\n});\nexpect(response.statusCode).to.equal(201);\nlet dataLocation = response.headers[\"content-location\"];\nlet fetchWorkitemResponse = await inject(app, {\n    method: \"GET\",\n    url: dataLocation\n});\nexpect(fetchWorkitemResponse.statusCode).to.equal(200);\nlet data = await fetchWorkitemResponse.json();\nexpect(data).to.be.an(\"array\");\nexpect(data[0]).to.be.an(\"object\");\nexpect(data[0]).have.property(\"00741202\").have.property(\"Value\").have.property(\"0\");",
              "err": {},
              "uuid": "be3d73ab-a019-440d-a2c4-7dcea2d1e7a8",
              "parentUUID": "e281cf07-5a2c-4178-bb42-6a4464939664",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when state is not SCHEDULED",
              "fullTitle": "UPS-RS create workitem Should raise 400 (Bad Request) when state is not SCHEDULED",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let clonedTestWorkitem = structuredClone(testWorkitem[0]);\nclonedTestWorkitem[\"00741000\"][\"Value\"][0] = \"IN PROGRESS\";\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedTestWorkitem])\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "3e68b9c1-f868-4630-863d-1b9968e5f44c",
              "parentUUID": "e281cf07-5a2c-4178-bb42-6a4464939664",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when create workitem that already exists",
              "fullTitle": "UPS-RS create workitem Should raise 400 (Bad Request) when create workitem that already exists",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify(testWorkitem)\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "a1aff238-efbb-40fe-8917-b1787f8a9e36",
              "parentUUID": "e281cf07-5a2c-4178-bb42-6a4464939664",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb611a82-07d0-442b-924f-5f2f186eb3eb",
            "6cafcebe-f087-4116-a38e-1f682702226d",
            "be3d73ab-a019-440d-a2c4-7dcea2d1e7a8",
            "3e68b9c1-f868-4630-863d-1b9968e5f44c",
            "a1aff238-efbb-40fe-8917-b1787f8a9e36"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 56,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "2f6ec5fd-7358-4327-92e9-5ed557f56974",
          "title": "UPS-RS retrieve workitem",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\retrieveWorkitem.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\retrieveWorkitem.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS retrieve workitem\"",
              "fullTitle": "UPS-RS retrieve workitem \"before all\" hook in \"UPS-RS retrieve workitem\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet createWorkitemResponse = await inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/workitems\",\n    payload: testWorkitem\n});\ncreatedWorkitemLocation = createWorkitemResponse.headers[\"content-location\"];",
              "err": {},
              "uuid": "75d0e015-0f8e-430e-8924-719ac6e63760",
              "parentUUID": "2f6ec5fd-7358-4327-92e9-5ed557f56974",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve workitem successfully",
              "fullTitle": "UPS-RS retrieve workitem Should retrieve workitem successfully",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n            method: \"GET\",\n            url: createdWorkitemLocation\n        });\n        expect(response.statusCode).to.equal(200);\n        let data = await response.json();\n        expect(data).to.be.an(\"array\");\n        expect(data[0]).to.be.an(\"object\");\n        expect(data[0]).have.property(\"00741000\").have.property(\"Value\").have.property(\"0\").to.be.equal(\"SCHEDULED\");",
              "err": {},
              "uuid": "20bd4fa8-a661-4dfe-a4ff-c214724918a5",
              "parentUUID": "2f6ec5fd-7358-4327-92e9-5ed557f56974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when workitem not found",
              "fullTitle": "UPS-RS retrieve workitem Should raise 404 (Not Found) when workitem not found",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n            method: \"GET\",\n            url: \"/dicom-web/workitems/foobar\"\n        });\n        expect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "a72e8982-e230-4d07-8ef8-01040161eb88",
              "parentUUID": "2f6ec5fd-7358-4327-92e9-5ed557f56974",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "20bd4fa8-a661-4dfe-a4ff-c214724918a5",
            "a72e8982-e230-4d07-8ef8-01040161eb88"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "8e83aeef-ed17-48dc-91fe-22de99c2f5fc",
          "title": "UPS-RS search workitems",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS search workitems\"",
              "fullTitle": "UPS-RS search workitems \"before all\" hook in \"UPS-RS search workitems\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    payload: testWorkitem\n});",
              "err": {},
              "uuid": "61a44f1d-b276-451e-b60a-ffad67903680",
              "parentUUID": "8e83aeef-ed17-48dc-91fe-22de99c2f5fc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should query workitem successfully",
              "fullTitle": "UPS-RS search workitems Should query workitem successfully",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems`\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(1);",
              "err": {},
              "uuid": "8eb48546-35f1-4b18-8e4a-09d01cf45d31",
              "parentUUID": "8e83aeef-ed17-48dc-91fe-22de99c2f5fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "de934070-865a-4a08-93cd-740b2518d44a",
              "title": "query with param 'SOPInstanceUID'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'SOPInstanceUID=1.2.826.0.1.3680043.8.498.10446888627027530123168162507860718519' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'SOPInstanceUID' Should query workitem with param 'SOPInstanceUID=1.2.826.0.1.3680043.8.498.10446888627027530123168162507860718519' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "57b58001-fa15-4403-8406-bbc3e500826f",
                  "parentUUID": "de934070-865a-4a08-93cd-740b2518d44a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'SOPInstanceUID=1.2.3.4' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'SOPInstanceUID' Should query workitem with param 'SOPInstanceUID=1.2.3.4' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "2a42aa97-18e8-43f5-b053-5bb3e46b43bc",
                  "parentUUID": "de934070-865a-4a08-93cd-740b2518d44a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "57b58001-fa15-4403-8406-bbc3e500826f",
                "2a42aa97-18e8-43f5-b053-5bb3e46b43bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "b830c8b0-84e9-4242-9762-5cb54fd532e3",
              "title": "query with param 'ScheduledProcedureStepPriority'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepPriority=MEDIUM' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepPriority' Should query workitem with param 'ScheduledProcedureStepPriority=MEDIUM' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "91201bcf-4920-4d51-a075-c80ff611d17a",
                  "parentUUID": "b830c8b0-84e9-4242-9762-5cb54fd532e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepPriority=LOW' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepPriority' Should query workitem with param 'ScheduledProcedureStepPriority=LOW' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "d96db248-0f0a-47f2-ab1b-82420718acc5",
                  "parentUUID": "b830c8b0-84e9-4242-9762-5cb54fd532e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91201bcf-4920-4d51-a075-c80ff611d17a",
                "d96db248-0f0a-47f2-ab1b-82420718acc5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "13784cca-4e1d-458d-b5ee-2e5871ea89e0",
              "title": "query with param 'ScheduledProcedureStepModificationDateTime'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepModificationDateTime=20211202115531-' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepModificationDateTime' Should query workitem with param 'ScheduledProcedureStepModificationDateTime=20211202115531-' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "0e0e74a6-6ce3-4b80-ad41-34247c8756f5",
                  "parentUUID": "13784cca-4e1d-458d-b5ee-2e5871ea89e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepModificationDateTime=20211202115532' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepModificationDateTime' Should query workitem with param 'ScheduledProcedureStepModificationDateTime=20211202115532' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "496fd14f-533e-4e2a-bdb1-dbcaa7cdf1b2",
                  "parentUUID": "13784cca-4e1d-458d-b5ee-2e5871ea89e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e0e74a6-6ce3-4b80-ad41-34247c8756f5",
                "496fd14f-533e-4e2a-bdb1-dbcaa7cdf1b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "50d72e6b-e557-4018-89b1-6f7d656c7a42",
              "title": "query with param 'ProcedureStepLabel'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ProcedureStepLabel=Scheduled procedure step description' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ProcedureStepLabel' Should query workitem with param 'ProcedureStepLabel=Scheduled procedure step description' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "cb3451d1-9108-452a-912a-a821cb24f5de",
                  "parentUUID": "50d72e6b-e557-4018-89b1-6f7d656c7a42",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ProcedureStepLabel=label' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ProcedureStepLabel' Should query workitem with param 'ProcedureStepLabel=label' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "d6fe3f2c-e1dd-4668-825d-4fb76cc4e3e5",
                  "parentUUID": "50d72e6b-e557-4018-89b1-6f7d656c7a42",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb3451d1-9108-452a-912a-a821cb24f5de",
                "d6fe3f2c-e1dd-4668-825d-4fb76cc4e3e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "c80db164-9758-4cc2-aa90-0fb231db3442",
              "title": "query with param 'WorklistLabel'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'WorklistLabel=WORKLIST' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'WorklistLabel' Should query workitem with param 'WorklistLabel=WORKLIST' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "b2ac2e16-0445-4253-82c2-3c5d1bafbbf7",
                  "parentUUID": "c80db164-9758-4cc2-aa90-0fb231db3442",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'WorklistLabel=label' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'WorklistLabel' Should query workitem with param 'WorklistLabel=label' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "617d3d0e-f743-46cc-aa07-c3b09332b00e",
                  "parentUUID": "c80db164-9758-4cc2-aa90-0fb231db3442",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2ac2e16-0445-4253-82c2-3c5d1bafbbf7",
                "617d3d0e-f743-46cc-aa07-c3b09332b00e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "3b0b0b19-dd19-40fe-a890-c47767624157",
              "title": "query with param 'ScheduledProcedureStepStartDateTime'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepStartDateTime=20211202115531-' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepStartDateTime' Should query workitem with param 'ScheduledProcedureStepStartDateTime=20211202115531-' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "a6fcc236-9fb1-409d-b008-520d68c9dc2d",
                  "parentUUID": "3b0b0b19-dd19-40fe-a890-c47767624157",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepStartDateTime=20211202115532' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepStartDateTime' Should query workitem with param 'ScheduledProcedureStepStartDateTime=20211202115532' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "a83a01fc-1c26-46c4-a7c5-ef2b87903281",
                  "parentUUID": "3b0b0b19-dd19-40fe-a890-c47767624157",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6fcc236-9fb1-409d-b008-520d68c9dc2d",
                "a83a01fc-1c26-46c4-a7c5-ef2b87903281"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "c6a419c2-a956-4807-a0a7-5ec3e77437b9",
              "title": "query with param 'ExpectedCompletionDateTime'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ExpectedCompletionDateTime=20211202115532-' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ExpectedCompletionDateTime' Should query workitem with param 'ExpectedCompletionDateTime=20211202115532-' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "960d6495-92e0-4e28-bbff-8297556c5448",
                  "parentUUID": "c6a419c2-a956-4807-a0a7-5ec3e77437b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ExpectedCompletionDateTime=20211202115533' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ExpectedCompletionDateTime' Should query workitem with param 'ExpectedCompletionDateTime=20211202115533' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "ec0962a6-f566-4b1f-b2c8-310d8a2de590",
                  "parentUUID": "c6a419c2-a956-4807-a0a7-5ec3e77437b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "960d6495-92e0-4e28-bbff-8297556c5448",
                "ec0962a6-f566-4b1f-b2c8-310d8a2de590"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "5f96c692-af92-4e39-9816-8bebceb8a45e",
              "title": "query with param 'ScheduledProcedureStepExpirationDateTime'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepExpirationDateTime=20221202115532-' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepExpirationDateTime' Should query workitem with param 'ScheduledProcedureStepExpirationDateTime=20221202115532-' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "ec189daf-6844-4173-be9f-59d51c1c8d86",
                  "parentUUID": "5f96c692-af92-4e39-9816-8bebceb8a45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ScheduledProcedureStepExpirationDateTime=20221202115532' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledProcedureStepExpirationDateTime' Should query workitem with param 'ScheduledProcedureStepExpirationDateTime=20221202115532' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "670f27dc-dcca-4760-83d0-179d2db68e42",
                  "parentUUID": "5f96c692-af92-4e39-9816-8bebceb8a45e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec189daf-6844-4173-be9f-59d51c1c8d86",
                "670f27dc-dcca-4760-83d0-179d2db68e42"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "749185e0-731e-4436-b2be-63ff66aff071",
              "title": "query with param 'InputReadinessState'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'InputReadinessState=READY' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'InputReadinessState' Should query workitem with param 'InputReadinessState=READY' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "98263f30-05a3-46f2-8b0c-6049b28413a9",
                  "parentUUID": "749185e0-731e-4436-b2be-63ff66aff071",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'InputReadinessState=UNAVAILABLE' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'InputReadinessState' Should query workitem with param 'InputReadinessState=UNAVAILABLE' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "407c07e4-3849-4fc7-895a-f19f7ddf9f03",
                  "parentUUID": "749185e0-731e-4436-b2be-63ff66aff071",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98263f30-05a3-46f2-8b0c-6049b28413a9",
                "407c07e4-3849-4fc7-895a-f19f7ddf9f03"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "5855254e-abda-4a11-a68d-f091e312cd5b",
              "title": "query with param 'AdmissionID'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'AdmissionID=11111' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'AdmissionID' Should query workitem with param 'AdmissionID=11111' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "142141f0-2bf2-4e71-a4b9-cbe9fd8f0f57",
                  "parentUUID": "5855254e-abda-4a11-a68d-f091e312cd5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'AdmissionID=123456' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'AdmissionID' Should query workitem with param 'AdmissionID=123456' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "c59d32a0-88fd-4d6c-b5eb-a559c97d73dc",
                  "parentUUID": "5855254e-abda-4a11-a68d-f091e312cd5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "142141f0-2bf2-4e71-a4b9-cbe9fd8f0f57",
                "c59d32a0-88fd-4d6c-b5eb-a559c97d73dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "7a34f4dc-c913-49f3-9fb6-6c758b55eb9c",
              "title": "query with param 'IssuerOfAdmissionIDSequence'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=123456789' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'IssuerOfAdmissionIDSequence' Should query workitem with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=123456789' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "fe3f48ff-04c5-4e3e-8224-b4df8a86cbee",
                  "parentUUID": "7a34f4dc-c913-49f3-9fb6-6c758b55eb9c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=aaa' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'IssuerOfAdmissionIDSequence' Should query workitem with param 'IssuerOfAdmissionIDSequence.LocalNamespaceEntityID=aaa' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "38f19e4b-a236-494a-8380-67f88f759d97",
                  "parentUUID": "7a34f4dc-c913-49f3-9fb6-6c758b55eb9c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=29c737e3-b739-4169-aca7-eea07a808643' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'IssuerOfAdmissionIDSequence' Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=29c737e3-b739-4169-aca7-eea07a808643' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "fcfe525e-2566-46d3-92f8-be71dfdb551e",
                  "parentUUID": "7a34f4dc-c913-49f3-9fb6-6c758b55eb9c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=bbb' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'IssuerOfAdmissionIDSequence' Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityID=bbb' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "016c5733-e4c8-421a-834c-2d9d0e4913c5",
                  "parentUUID": "7a34f4dc-c913-49f3-9fb6-6c758b55eb9c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=UUID' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'IssuerOfAdmissionIDSequence' Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=UUID' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "60dfd69f-28b0-4363-923f-e1d3071ad50f",
                  "parentUUID": "7a34f4dc-c913-49f3-9fb6-6c758b55eb9c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=ISO' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'IssuerOfAdmissionIDSequence' Should query workitem with param 'IssuerOfAdmissionIDSequence.UniversalEntityIDType=ISO' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "fc601274-2129-4d56-a1b2-b6353d7d4642",
                  "parentUUID": "7a34f4dc-c913-49f3-9fb6-6c758b55eb9c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe3f48ff-04c5-4e3e-8224-b4df8a86cbee",
                "38f19e4b-a236-494a-8380-67f88f759d97",
                "fcfe525e-2566-46d3-92f8-be71dfdb551e",
                "016c5733-e4c8-421a-834c-2d9d0e4913c5",
                "60dfd69f-28b0-4363-923f-e1d3071ad50f",
                "fc601274-2129-4d56-a1b2-b6353d7d4642"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "c661c1aa-c1d2-4a61-9656-1406628f1823",
              "title": "query with param 'ScheduledHumanPerformersSequence'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerName=fkyou' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledHumanPerformersSequence' Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerName=fkyou' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "191d31f3-13fe-4fe2-940e-099c7cf2f51c",
                  "parentUUID": "c661c1aa-c1d2-4a61-9656-1406628f1823",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerName=aaa' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledHumanPerformersSequence' Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerName=aaa' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "7953ba62-c749-4aa8-bfdf-5bf4f3805c34",
                  "parentUUID": "c661c1aa-c1d2-4a61-9656-1406628f1823",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerOrganization=My-Org' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledHumanPerformersSequence' Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerOrganization=My-Org' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "c6d0a663-dd88-4c69-bee4-719b9108adb7",
                  "parentUUID": "c661c1aa-c1d2-4a61-9656-1406628f1823",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerOrganization=bbb' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ScheduledHumanPerformersSequence' Should query workitem with param 'ScheduledHumanPerformersSequence.HumanPerformerOrganization=bbb' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "8545cb7d-ac7c-430c-9da5-7a328b620ba8",
                  "parentUUID": "c661c1aa-c1d2-4a61-9656-1406628f1823",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "191d31f3-13fe-4fe2-940e-099c7cf2f51c",
                "7953ba62-c749-4aa8-bfdf-5bf4f3805c34",
                "c6d0a663-dd88-4c69-bee4-719b9108adb7",
                "8545cb7d-ac7c-430c-9da5-7a328b620ba8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "ed064d1a-45ba-4cb7-9781-69e7ad956804",
              "title": "query with param 'ProcedureStepState'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'ProcedureStepState=SCHEDULED' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ProcedureStepState' Should query workitem with param 'ProcedureStepState=SCHEDULED' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "4b076e08-9e9c-421b-a076-5a46cfe6dd66",
                  "parentUUID": "ed064d1a-45ba-4cb7-9781-69e7ad956804",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'ProcedureStepState=COMPLETED' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'ProcedureStepState' Should query workitem with param 'ProcedureStepState=COMPLETED' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "4119b3fc-a1b7-4894-827f-359cf9429694",
                  "parentUUID": "ed064d1a-45ba-4cb7-9781-69e7ad956804",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b076e08-9e9c-421b-a076-5a46cfe6dd66",
                "4119b3fc-a1b7-4894-827f-359cf9429694"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "850d9f70-ec1f-4fa8-9c66-500d5ed32b26",
              "title": "query with param 'PatientID'",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\searchWorkitems.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should query workitem with param 'PatientID=11111' and get 1 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'PatientID' Should query workitem with param 'PatientID=11111' and get 1 workitem successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "8c04eec4-5909-4009-8574-e9620ec9897f",
                  "parentUUID": "850d9f70-ec1f-4fa8-9c66-500d5ed32b26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should query workitem with param 'PatientID=123456' and get 0 workitem successfully",
                  "fullTitle": "UPS-RS search workitems query with param 'PatientID' Should query workitem with param 'PatientID=123456' and get 0 workitem successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/workitems?${param}=${value}`\n});\n\nif (expectedCount === 0) {\n    expect(response.statusCode).to.equal(204);\n    return;\n}\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\");\nexpect(data).have.lengthOf(expectedCount);\nexpect(data[0]).to.be.an(\"object\");",
                  "err": {},
                  "uuid": "4d714809-6666-4f16-95bb-df743425c9b1",
                  "parentUUID": "850d9f70-ec1f-4fa8-9c66-500d5ed32b26",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c04eec4-5909-4009-8574-e9620ec9897f",
                "4d714809-6666-4f16-95bb-df743425c9b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "8eb48546-35f1-4b18-8e4a-09d01cf45d31"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "716e8856-9df3-493e-93c4-63aca8daa786",
          "title": "UPS-RS subscribe workitem",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS subscribe workitem\"",
              "fullTitle": "UPS-RS subscribe workitem \"before all\" hook in \"UPS-RS subscribe workitem\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nrandomPort = await getPorts();\nserver.listen({ host: localIp, port: randomPort }, () => {\n    console.log(`Listening on ${localIp}:${randomPort}`);\n});\nawait createTestWorkitem();",
              "err": {},
              "uuid": "06635840-e992-4e22-9e31-35bbf005f773",
              "parentUUID": "716e8856-9df3-493e-93c4-63aca8daa786",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"UPS-RS subscribe workitem\"",
              "fullTitle": "UPS-RS subscribe workitem \"after all\" hook in \"UPS-RS subscribe workitem\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "globalWs.close();\nserver.close();\nawait dbInstance.destroyAll();",
              "err": {},
              "uuid": "283f418d-21e3-4611-bb7d-28ce560d5bb5",
              "parentUUID": "716e8856-9df3-493e-93c4-63aca8daa786",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "5157f4ec-ea48-4ca4-8cad-9504b824bbbb",
              "title": "global subscription",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should subscribe global subscription and receive 1 initial event from ws",
                  "fullTitle": "UPS-RS subscribe workitem global subscription Should subscribe global subscription and receive 1 initial event from ws",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let received = false;\n\nlet ws = new WebSocket(`ws://${localIp}:${randomPort}/ws/subscribers/RACCOON`);\nws.once(\"message\", function (data) {\n    let receivedData = JSON.parse(data);\n    expect(receivedData).to.have.property(\"00001002\").have.property(\"Value\").is.an(\"array\");\n    ws.close();\n    done();\n    received = true;\n});\ninject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/RACCOON`\n})\n    .then(({ statusCode }) => {\n        expect(statusCode).to.equal(201);\n    });\nsetTimeout(() => {\n    if (!received) done(new Error(\"timeout\"));\n}, 2500);",
                  "err": {},
                  "uuid": "2cd60e2b-76a7-42a8-82eb-5f323bb31136",
                  "parentUUID": "5157f4ec-ea48-4ca4-8cad-9504b824bbbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should receive 1 initial event from ws when creating new workitem",
                  "fullTitle": "UPS-RS subscribe workitem global subscription Should receive 1 initial event from ws when creating new workitem",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let received = false;\nlet ws = new WebSocket(`ws://${localIp}:${randomPort}/ws/subscribers/RACCOON`);\nws.once(\"message\", function (data) {\n    let receivedData = JSON.parse(data);\n    expect(receivedData).to.have.property(\"00001002\").have.property(\"Value\").is.an(\"array\");\n    ws.close();\n    done();\n    received = true;\n});\ninject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify(testWorkitem)\n});\nsetTimeout(() => {\n    if (!received) done(new Error(\"timeout\"));\n}, 2500);",
                  "err": {},
                  "uuid": "ac5e274b-9f8e-49b2-9c1e-96e7bc7b6244",
                  "parentUUID": "5157f4ec-ea48-4ca4-8cad-9504b824bbbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should update global subscription",
                  "fullTitle": "UPS-RS subscribe workitem global subscription Should update global subscription",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/RACCOON?deletionlock=false`\n});\nexpect(response.statusCode).to.equal(201);",
                  "err": {},
                  "uuid": "3aa6ad37-efa6-4027-89b3-dd57afad0216",
                  "parentUUID": "5157f4ec-ea48-4ca4-8cad-9504b824bbbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should update progress information sequence and receive progress info update event",
                  "fullTitle": "UPS-RS subscribe workitem global subscription Should update progress information sequence and receive progress info update event",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let received = false;\nlet ws = new WebSocket(`ws://${localIp}:${randomPort}/ws/subscribers/RACCOON`);\nws.once(\"message\", function (data) {\n    let receivedData = JSON.parse(data);\n    expect(receivedData).to.have.property(\"00741002\").have.property(\"Value\").is.an(\"array\");\n    ws.close();\n    done();\n    received = true;\n});\nlet clonedWorkitem = structuredClone(testWorkitem[0]);\nclonedWorkitem[\"00741002\"] = {\n    \"vr\": \"SQ\",\n    \"Value\": [\n        {\n            \"00741004\": {\n                \"vr\": \"DS\",\n                \"Value\": [\n                    \"20\"\n                ]\n            }\n        }\n    ]\n};\ninject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}`,\n    payload: [clonedWorkitem]\n}).then(({ statusCode }) => {\n    expect(statusCode).to.equal(200);\n}\n);\nsetTimeout(() => {\n    if (!received) done(new Error(\"timeout\"));\n}, 2500);",
                  "err": {},
                  "uuid": "6bf8f7b1-4f72-4df9-b61d-b9689f18eb9f",
                  "parentUUID": "5157f4ec-ea48-4ca4-8cad-9504b824bbbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should change state to IN PROGRESS and receive state change report event",
                  "fullTitle": "UPS-RS subscribe workitem global subscription Should change state to IN PROGRESS and receive state change report event",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let received = false;\nlet ws = new WebSocket(`ws://${localIp}:${randomPort}/ws/subscribers/RACCOON`);\nws.once(\"message\", function (data) {\n    let receivedData = JSON.parse(data);\n    expect(receivedData).to.have.property(\"00741000\").have.property(\"Value\").is.an(\"array\").have.property(\"0\").to.be.equal(\"IN PROGRESS\");\n    ws.close();\n    done();\n    received = true;\n});\ninject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateRequestPayload])\n}).then(({ statusCode }) => {\n    expect(statusCode).to.be.equal(200);\n});\nsetTimeout(() => {\n    if (!received) done(new Error(\"timeout\"));\n}, 2500);",
                  "err": {},
                  "uuid": "f247cc57-e153-4540-b9ee-8403d71ddebe",
                  "parentUUID": "5157f4ec-ea48-4ca4-8cad-9504b824bbbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should suspend global subscription",
                  "fullTitle": "UPS-RS subscribe workitem global subscription Should suspend global subscription",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/RACCOON/suspend`\n}).then(({ statusCode }) => {\n    expect(statusCode).to.be.equal(200);\n    done();\n});",
                  "err": {},
                  "uuid": "ad20b6a1-732e-4f77-9c15-3a96558b50e5",
                  "parentUUID": "5157f4ec-ea48-4ca4-8cad-9504b824bbbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should unsubscribe global subscription",
                  "fullTitle": "UPS-RS subscribe workitem global subscription Should unsubscribe global subscription",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/RACCOON`\n});\nlet response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/RACCOON`\n});\nexpect(response.statusCode).to.be.equal(200);",
                  "err": {},
                  "uuid": "65b1d180-5e0d-4abb-9ae1-c793648a1439",
                  "parentUUID": "5157f4ec-ea48-4ca4-8cad-9504b824bbbb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2cd60e2b-76a7-42a8-82eb-5f323bb31136",
                "ac5e274b-9f8e-49b2-9c1e-96e7bc7b6244",
                "3aa6ad37-efa6-4027-89b3-dd57afad0216",
                "6bf8f7b1-4f72-4df9-b61d-b9689f18eb9f",
                "f247cc57-e153-4540-b9ee-8403d71ddebe",
                "ad20b6a1-732e-4f77-9c15-3a96558b50e5",
                "65b1d180-5e0d-4abb-9ae1-c793648a1439"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 100,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "a711e13b-19b5-4f20-af01-ec5ac721d579",
              "title": "filtered global subscription",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"filtered global subscription\"",
                  "fullTitle": "UPS-RS subscribe workitem filtered global subscription \"before all\" hook in \"filtered global subscription\"",
                  "timedOut": false,
                  "duration": 29,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await dbInstance.destroyAll();\nawait createTestWorkitem();\nlet clonedTestWorkitem = structuredClone(testWorkitem[0]);\nclonedTestWorkitem[\"00380014\"][\"Value\"][0][\"00400031\"][\"Value\"][0] = \"987654321\";\nawait inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([clonedTestWorkitem])\n});",
                  "err": {},
                  "uuid": "e8a5ee25-df16-4749-ba74-275cc4edc3a8",
                  "parentUUID": "a711e13b-19b5-4f20-af01-ec5ac721d579",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should subscribe filtered global subscription and receive 1 initial event from ws",
                  "fullTitle": "UPS-RS subscribe workitem filtered global subscription Should subscribe filtered global subscription and receive 1 initial event from ws",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let received = false;\nlet ws = new WebSocket(`ws://${localIp}:${randomPort}/ws/subscribers/RACCOON`);\nws.once(\"message\", function (data) {\n    let receivedData = JSON.parse(data);\n    expect(receivedData).to.have.property(\"00001002\").have.property(\"Value\").is.an(\"array\");\n    expect(receivedData).to.have.property(\"00001000\").have.property(\"Value\").is.an(\"array\").have.property(\"0\").to.be.equal(workitemUID);\n    ws.close();\n    done();\n    received = true;\n});\ninject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5.1/subscribers/RACCOON?00380014.00400031=123456789`\n})\n    .then(({ statusCode }) => {\n        expect(statusCode).to.equal(201);\n    });\nsetTimeout(() => {\n    if (!received) done(new Error(\"timeout\"));\n}, 2500);",
                  "err": {},
                  "uuid": "46ad86cd-3ca4-4863-88f6-d5e1d652490b",
                  "parentUUID": "a711e13b-19b5-4f20-af01-ec5ac721d579",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46ad86cd-3ca4-4863-88f6-d5e1d652490b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "6ee13e2d-9e1c-4aba-96c5-798a136f28c3",
              "title": "workitem subscription",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\subscribeWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"workitem subscription\"",
                  "fullTitle": "UPS-RS subscribe workitem workitem subscription \"before all\" hook in \"workitem subscription\"",
                  "timedOut": false,
                  "duration": 15,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await dbInstance.destroyAll();\nawait createTestWorkitem();",
                  "err": {},
                  "uuid": "ed89e7d8-8f12-403c-b500-9bc3f96ca04b",
                  "parentUUID": "6ee13e2d-9e1c-4aba-96c5-798a136f28c3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should subscribe workitem subscription",
                  "fullTitle": "UPS-RS subscribe workitem workitem subscription Should subscribe workitem subscription",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}/subscribers/RACCOON`\n});\nexpect(response.statusCode).to.be.equal(201);",
                  "err": {},
                  "uuid": "b5659588-55ce-4551-ae19-99eeb016d3a6",
                  "parentUUID": "6ee13e2d-9e1c-4aba-96c5-798a136f28c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should change state to IN PROGRESS and receive state change report event",
                  "fullTitle": "UPS-RS subscribe workitem workitem subscription Should change state to IN PROGRESS and receive state change report event",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let received = false;\nlet ws = new WebSocket(`ws://${localIp}:${randomPort}/ws/subscribers/RACCOON`);\nws.once(\"message\", function (data) {\n    let receivedData = JSON.parse(data);\n    expect(receivedData).to.have.property(\"00741000\").have.property(\"Value\").is.an(\"array\").have.property(\"0\").to.be.equal(\"IN PROGRESS\");\n    ws.close();\n    done();\n    received = true;\n});\ninject(app, {\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([changeUpsStateRequestPayload])\n}).then(({ statusCode }) => {\n    expect(statusCode).to.be.equal(200);\n});\nsetTimeout(() => {\n    if (!received) done(new Error(\"timeout\"));\n}, 2500);",
                  "err": {},
                  "uuid": "cf84e633-8ae5-45fa-b8f2-c4426cab82c4",
                  "parentUUID": "6ee13e2d-9e1c-4aba-96c5-798a136f28c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5659588-55ce-4551-ae19-99eeb016d3a6",
                "cf84e633-8ae5-45fa-b8f2-c4426cab82c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "545767a6-e76c-4f4f-bbac-762a637c6d70",
          "title": "UPS-RS unsubscribe workitem",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS unsubscribe workitem\"",
              "fullTitle": "UPS-RS unsubscribe workitem \"before all\" hook in \"UPS-RS unsubscribe workitem\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nrandomPort = await getPorts();\nserver.listen({ host: localIp, port: randomPort }, () => {\n    console.log(`Listening on ${randomPort}`);\n});\nawait createTestWorkitem();",
              "err": {},
              "uuid": "e6339540-1503-401f-84a6-0176d67301c4",
              "parentUUID": "545767a6-e76c-4f4f-bbac-762a637c6d70",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"UPS-RS unsubscribe workitem\"",
              "fullTitle": "UPS-RS unsubscribe workitem \"after all\" hook in \"UPS-RS unsubscribe workitem\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server.close();\nglobalWs.close();\nawait dbInstance.destroyAll();",
              "err": {},
              "uuid": "a5b5a93c-6b9a-4890-aa19-af61ca034ae0",
              "parentUUID": "545767a6-e76c-4f4f-bbac-762a637c6d70",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "7d2dd9d9-da98-45a5-9caa-19c654e5acae",
              "title": "unsubscribe global subscription",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"unsubscribe global subscription\"",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe global subscription \"before all\" hook in \"unsubscribe global subscription\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/RACCOON`,\n});",
                  "err": {},
                  "uuid": "4cd0b767-08b1-4336-80a9-38e2914a5b6f",
                  "parentUUID": "7d2dd9d9-da98-45a5-9caa-19c654e5acae",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should unsubscribe global subscription",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe global subscription Should unsubscribe global subscription",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/RACCOON`, \n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "61cb23a2-5673-4321-9f2a-852124706efa",
                  "parentUUID": "7d2dd9d9-da98-45a5-9caa-19c654e5acae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 404 when global subscription not exist",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe global subscription Should raise 404 when global subscription not exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/FOOBAR`, \n});\nexpect(response.statusCode).to.equal(404);",
                  "err": {},
                  "uuid": "5ca1c61a-3a6d-46e6-8fcb-cf3f8b80e6a9",
                  "parentUUID": "7d2dd9d9-da98-45a5-9caa-19c654e5acae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61cb23a2-5673-4321-9f2a-852124706efa",
                "5ca1c61a-3a6d-46e6-8fcb-cf3f8b80e6a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "f84751c4-ab94-4ad9-9220-eb363f6d9220",
              "title": "unsubscribe filtered global subscription",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"unsubscribe filtered global subscription\"",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe filtered global subscription \"before all\" hook in \"unsubscribe filtered global subscription\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5.1/subscribers/RACCOON?00380014.00400031=123456789`,\n});",
                  "err": {},
                  "uuid": "17632748-b570-4564-bf95-0c375feeea75",
                  "parentUUID": "f84751c4-ab94-4ad9-9220-eb363f6d9220",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should unsubscribe filtered global subscription",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe filtered global subscription Should unsubscribe filtered global subscription",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5.1/subscribers/RACCOON`, \n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "e412c519-654d-4f02-83d8-8aa419fe0b79",
                  "parentUUID": "f84751c4-ab94-4ad9-9220-eb363f6d9220",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e412c519-654d-4f02-83d8-8aa419fe0b79"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "ff540976-0705-45bc-91d4-bdd7b3fdc146",
              "title": "unsubscribe workitem subscription",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\unsubscribeWorkitem.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"unsubscribe workitem subscription\"",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe workitem subscription \"before all\" hook in \"unsubscribe workitem subscription\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}/subscribers/RACCOON`,\n});",
                  "err": {},
                  "uuid": "a322fa08-8ca0-4246-9598-9a4ea1d2729e",
                  "parentUUID": "ff540976-0705-45bc-91d4-bdd7b3fdc146",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should unsubscribe workitem subscription",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe workitem subscription Should unsubscribe workitem subscription",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/workitems/${workitemUID}/subscribers/RACCOON`, \n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "580bc883-b790-48a4-a4fe-2f7d138352f5",
                  "parentUUID": "ff540976-0705-45bc-91d4-bdd7b3fdc146",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 404 when global subscription not exist",
                  "fullTitle": "UPS-RS unsubscribe workitem unsubscribe workitem subscription Should raise 404 when global subscription not exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/workitems/1.2.840.10008.5.1.4.34.5/subscribers/FOOBAR`, \n});\nexpect(response.statusCode).to.equal(404);",
                  "err": {},
                  "uuid": "1ea76a1d-c13d-4d49-b40e-8eb3d120b3bf",
                  "parentUUID": "ff540976-0705-45bc-91d4-bdd7b3fdc146",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "580bc883-b790-48a4-a4fe-2f7d138352f5",
                "1ea76a1d-c13d-4d49-b40e-8eb3d120b3bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "69079378-ca07-447e-b09a-e43034626007",
          "title": "UPS-RS update workitem",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\updateWorkitem.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\updateWorkitem.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS update workitem\"",
              "fullTitle": "UPS-RS update workitem \"before all\" hook in \"UPS-RS update workitem\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet createWorkitemResponse = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    payload: testWorkitem\n});\ncreatedWorkitemLocation = createWorkitemResponse.headers[\"content-location\"];",
              "err": {},
              "uuid": "61f03eff-cce8-457e-8206-8d025c70f5b7",
              "parentUUID": "69079378-ca07-447e-b09a-e43034626007",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should update workitem successfully",
              "fullTitle": "UPS-RS update workitem Should update workitem successfully",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let fetchWorkitemResponse = await inject(app, {\n            method: \"GET\",\n            url: createdWorkitemLocation\n        });\n        expect(fetchWorkitemResponse.statusCode).to.equal(200);\n        let data = await fetchWorkitemResponse.json();\n        let createdWorkitem = data[0];\n        let updatedWorkItem = {\n            ...createdWorkitem,\n            \"00741002\": {\n                \"vr\": \"SQ\",\n                \"Value\": [\n                    {\n                        \"00741007\": {\n                            \"vr\": \"SQ\",\n                            \"Value\": [\n                                {\n                                    \"0040A040\": {\n                                        \"vr\": \"CS\",\n                                        \"Value\": [\n                                            \"TEXT\"\n                                        ]\n                                    },\n                                    \"0040A160\": {\n                                        \"vr\": \"UT\",\n                                        \"Value\": [\n                                            \"text value\"\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        };\n        let updateWorkitemResponse = await inject(app, {\n            method: \"POST\",\n            url: createdWorkitemLocation,\n            headers: {\n                \"Content-Type\": \"application/dicom+json\"\n            },\n            payload: JSON.stringify([updatedWorkItem])\n        });\n        expect(updateWorkitemResponse.statusCode).to.equal(200);\n        let fetchUpdatedWorkitemResponse = await inject(app, {\n            method: \"GET\",\n            url: createdWorkitemLocation\n        });\n        let updatedWorkitemResponseData = await fetchUpdatedWorkitemResponse.json();\n        let updatedWorkitemFromResponse = updatedWorkitemResponseData[0];\n        expect(updatedWorkitemFromResponse).have.property(\"00741002\").to.be.deep.equal(updatedWorkItem[\"00741002\"]);",
              "err": {},
              "uuid": "03c76666-6eea-4cba-82ec-10030d9a1122",
              "parentUUID": "69079378-ca07-447e-b09a-e43034626007",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise Bad Request (400) when updating workitem in SCHEDULED state with Transaction UID",
              "fullTitle": "UPS-RS update workitem Should raise Bad Request (400) when updating workitem in SCHEDULED state with Transaction UID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let fetchWorkitemResponse = await inject(app, {\n    method: \"GET\",\n    url: createdWorkitemLocation\n});\nexpect(fetchWorkitemResponse.statusCode).to.equal(200);\nlet data = await fetchWorkitemResponse.json();\nlet createdWorkitem = data[0];\nlet updatedWorkItem = {\n    ...createdWorkitem,\n    \"00081195\": {\n        \"vr\": \"UI\",\n        \"Value\": [\n            \"1.2.3.4\"\n        ]\n    }\n};\nlet updateWorkitemResponse = await inject(app, {\n    method: \"POST\",\n    url: createdWorkitemLocation,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify([updatedWorkItem])\n});\nexpect(updateWorkitemResponse.statusCode).to.equal(400);",
              "err": {},
              "uuid": "9e17105b-0fb0-4fc2-892c-f5a91f1c841b",
              "parentUUID": "69079378-ca07-447e-b09a-e43034626007",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "03c76666-6eea-4cba-82ec-10030d9a1122",
            "9e17105b-0fb0-4fc2-892c-f5a91f1c841b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "10e06222-e65e-4ce9-ba67-a08701f91c89",
          "title": "UPS-RS cancel workitem with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\withUser\\cancelWorkitemWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\withUser\\cancelWorkitemWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS cancel workitem with user\"",
              "fullTitle": "UPS-RS cancel workitem with user \"before all\" hook in \"UPS-RS cancel workitem with user\"",
              "timedOut": false,
              "duration": 64,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nawait createTestInProgressWorkitem(TEST_USERS[0]);\nawait createTestInProgressWorkitem(TEST_USERS[2]);",
              "err": {},
              "uuid": "fece72fd-df3b-47e3-91f4-2adde4f0f9e1",
              "parentUUID": "10e06222-e65e-4ce9-ba67-a08701f91c89",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should cancel workitem successfully",
              "fullTitle": "UPS-RS cancel workitem with user Should cancel workitem successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}/cancelrequest`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    params: {\n        workItem: workitemUID\n    },\n    body: cancellationRequestPayload,\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CancelWorkItemController(request, response);\nexpect(response.statusCode).to.be.equal(202);",
              "err": {},
              "uuid": "b9afa735-2187-46c2-bb0c-8b6080b67e47",
              "parentUUID": "10e06222-e65e-4ce9-ba67-a08701f91c89",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b9afa735-2187-46c2-bb0c-8b6080b67e47"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "ed580b52-83e6-4a10-a1dd-3b605d561214",
          "title": "UPS-RS change workitem state with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\withUser\\changeWorkitemStateWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\withUser\\changeWorkitemStateWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS change workitem state with user\"",
              "fullTitle": "UPS-RS change workitem state with user \"before all\" hook in \"UPS-RS change workitem state with user\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet request = createRequest({\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    query: {\n        workitem: workitemUID\n    },\n    body: [structuredClone(testWorkItem[0])],\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CreateWorkItemController(request, response);\nexpect(response.statusCode).to.equal(201);\nexpect(response.getHeaders()).have.property(\"content-location\").to.be.a(\"string\");\ncreatedWorkitemLocation = response.getHeaders()[\"content-location\"];\nlet createWorkitemForUser2Request = createRequest({\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    query: {\n        workitem: workitemUID\n    },\n    body: [structuredClone(testWorkItem[0])],\n    user: TEST_USERS[2]\n});\nlet createWorkitemForUser2Response = createResponse();\nawait CreateWorkItemController(createWorkitemForUser2Request, createWorkitemForUser2Response);\ncreatedWorkitemForUser2Location = createWorkitemForUser2Response.getHeaders()[\"content-location\"];",
              "err": {},
              "uuid": "8c6b814f-550f-4c57-919a-cbde733c4dd0",
              "parentUUID": "ed580b52-83e6-4a10-a1dd-3b605d561214",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should change workitem state with user 'test'",
              "fullTitle": "UPS-RS change workitem state with user Should change workitem state with user 'test'",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"PUT\",\n    url: `/dicom-web/workitems/${workitemUID}/state`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    params: {\n        workItem: workitemUID\n    },\n    body: [changeUpsStateRequestPayload],\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\n\nawait ChangeWorkItemStateController(request, response);\nexpect(response.statusCode).to.equal(200);\nlet fetchWorkitemRequest = createRequest({\n    method: \"GET\",\n    url: createdWorkitemLocation,\n    user: TEST_USERS[0]\n});\nlet fetchWorkitemResponse = createResponse();\nawait GetWorkItemController(fetchWorkitemRequest, fetchWorkitemResponse);\nexpect(fetchWorkitemResponse.statusCode).to.equal(200);\nexpect(fetchWorkitemResponse._getJSONData())\n.to.be.an(\"array\")\n.to.have.lengthOf(1)\n.have.property(\"0\")\n.have.property(\"00741000\")\n.have.property(\"Value\")\n.have.property(\"0\").to.equal(\"IN PROGRESS\");",
              "err": {},
              "uuid": "4fe24cf8-105a-4ae4-8d66-7d920de79f10",
              "parentUUID": "ed580b52-83e6-4a10-a1dd-3b605d561214",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not change workitem state for user 'oTest'",
              "fullTitle": "UPS-RS change workitem state with user Should not change workitem state for user 'oTest'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let fetchWorkitemRequest = createRequest({\n    method: \"GET\",\n    url: createdWorkitemForUser2Location,\n    user: TEST_USERS[2]\n});\nlet fetchWorkitemResponse = createResponse();\nawait GetWorkItemController(fetchWorkitemRequest, fetchWorkitemResponse);\nexpect(fetchWorkitemResponse.statusCode).to.equal(200);\nexpect(fetchWorkitemResponse._getJSONData())\n.to.be.an(\"array\")\n.to.have.lengthOf(1)\n.have.property(\"0\")\n.have.property(\"00741000\")\n.have.property(\"Value\")\n.have.property(\"0\").to.equal(\"SCHEDULED\");",
              "err": {},
              "uuid": "b3aac535-5695-4919-bd26-f4a42274a8c5",
              "parentUUID": "ed580b52-83e6-4a10-a1dd-3b605d561214",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4fe24cf8-105a-4ae4-8d66-7d920de79f10",
            "b3aac535-5695-4919-bd26-f4a42274a8c5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "456fdca0-cc5f-4f8c-98ff-bfda541c4554",
          "title": "UPS retrieve workitem with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\withUser\\retrieveWorkitemWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\withUser\\retrieveWorkitemWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS retrieve workitem with user\"",
              "fullTitle": "UPS retrieve workitem with user \"before all\" hook in \"UPS retrieve workitem with user\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet request = createRequest({\n    method: \"POST\",\n    url: `/dicom-web/workitems`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: structuredClone(testWorkitem),\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CreateWorkItemController(request, response);\nworkitemUID = response.getHeaders()[\"content-location\"].split(\"/\").pop();",
              "err": {},
              "uuid": "0d246f91-d62b-48b8-9bc8-5bb5ea2dabe3",
              "parentUUID": "456fdca0-cc5f-4f8c-98ff-bfda541c4554",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve workitem with user 'test'",
              "fullTitle": "UPS retrieve workitem with user Should retrieve workitem with user 'test'",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/workitems/${workitemUID}`,\n    params: {\n        workItem: workitemUID\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait GetWorkItemController(request, response);\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "eb8fbc90-956e-4491-9942-159f0e712f93",
              "parentUUID": "456fdca0-cc5f-4f8c-98ff-bfda541c4554",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve workitem with user 'test2'",
              "fullTitle": "UPS retrieve workitem with user Should retrieve workitem with user 'test2'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/workitems/${workitemUID}`,\n    params: {\n        workItem: workitemUID\n    },\n    user: TEST_USERS[1]\n});\nlet response = createResponse();\nawait GetWorkItemController(request, response);\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "ab448eb7-96e7-4465-9905-16c71a0421a7",
              "parentUUID": "456fdca0-cc5f-4f8c-98ff-bfda541c4554",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not retrieve workitem with user 'oTest'",
              "fullTitle": "UPS retrieve workitem with user Should not retrieve workitem with user 'oTest'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/workitems/${workitemUID}`,\n    params: {\n        workItem: workitemUID\n    },\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nawait GetWorkItemController(request, response);\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "73b4626e-5f99-4dab-abd8-4e04a60a5eb1",
              "parentUUID": "456fdca0-cc5f-4f8c-98ff-bfda541c4554",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eb8fbc90-956e-4491-9942-159f0e712f93",
            "ab448eb7-96e7-4465-9905-16c71a0421a7",
            "73b4626e-5f99-4dab-abd8-4e04a60a5eb1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "f132daca-cb78-4dd3-ad7d-879620091d39",
          "title": "UPS search workitems with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\withUser\\searchWorkitemWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\withUser\\searchWorkitemWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS search workitems with user\"",
              "fullTitle": "UPS search workitems with user \"before all\" hook in \"UPS search workitems with user\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}",
              "err": {},
              "uuid": "4354f692-b9c7-4047-823e-b07a53c5332c",
              "parentUUID": "f132daca-cb78-4dd3-ad7d-879620091d39",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create workitem with user",
              "fullTitle": "UPS search workitems with user Should create workitem with user",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"POST\",\n    url: `/dicom-web/workitems`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: [structuredClone(testWorkitem[0])],\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CreateWorkItemController(request, response);\nexpect(response.statusCode).to.equal(201);\nexpect(response.getHeaders()).have.property(\"content-location\").to.be.a(\"string\");",
              "err": {},
              "uuid": "d46bb6c9-287b-48c8-a9a5-d2b1658c307c",
              "parentUUID": "f132daca-cb78-4dd3-ad7d-879620091d39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should search workitem with user 'test' and get 1 workitem",
              "fullTitle": "UPS search workitems with user Should search workitem with user 'test' and get 1 workitem",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/workitems`,\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait GetWorkItemController(request, response);\nexpect(response.statusCode).to.equal(200);\nexpect(response._getJSONData()).have.property(\"length\").to.equal(1);",
              "err": {},
              "uuid": "38f4b55e-3820-4272-a24a-67e0a632fd02",
              "parentUUID": "f132daca-cb78-4dd3-ad7d-879620091d39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should search workitem with user 'test2' and get 1 workitem",
              "fullTitle": "UPS search workitems with user Should search workitem with user 'test2' and get 1 workitem",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/workitems`,\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait GetWorkItemController(request, response);\nexpect(response.statusCode).to.equal(200);\nexpect(response._getJSONData()).have.property(\"length\").to.equal(1);",
              "err": {},
              "uuid": "b3595577-1e48-4721-bac8-b347347c7914",
              "parentUUID": "f132daca-cb78-4dd3-ad7d-879620091d39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should search workitem with user 'oTest' and get 0 workitem",
              "fullTitle": "UPS search workitems with user Should search workitem with user 'oTest' and get 0 workitem",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/workitems`,\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nawait GetWorkItemController(request, response);\nexpect(response.statusCode).to.equal(204);",
              "err": {},
              "uuid": "c560e575-b9fd-4ddf-ab39-47d2ca2f9b5b",
              "parentUUID": "f132daca-cb78-4dd3-ad7d-879620091d39",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d46bb6c9-287b-48c8-a9a5-d2b1658c307c",
            "38f4b55e-3820-4272-a24a-67e0a632fd02",
            "b3595577-1e48-4721-bac8-b347347c7914",
            "c560e575-b9fd-4ddf-ab39-47d2ca2f9b5b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "dca58bba-718b-4a1e-bbb2-756f47829e3b",
          "title": "UPS-RS subscribe workitem with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\withUser\\subscribeWorkitemWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\withUser\\subscribeWorkitemWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS subscribe workitem with user\"",
              "fullTitle": "UPS-RS subscribe workitem with user \"before all\" hook in \"UPS-RS subscribe workitem with user\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet request = createRequest({\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    query: {\n        workitem: workitemUID\n    },\n    body: [structuredClone(testWorkItem[0])],\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CreateWorkItemController(request, response);\nexpect(response.statusCode).to.equal(201);\nexpect(response.getHeaders()).have.property(\"content-location\").to.be.a(\"string\");\ncreatedWorkitemLocation = response.getHeaders()[\"content-location\"];",
              "err": {},
              "uuid": "84d1b424-a00f-4db2-801c-71379b6d408c",
              "parentUUID": "dca58bba-718b-4a1e-bbb2-756f47829e3b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a57ddf48-ad21-4c47-ac02-db2bcd0f94d5",
              "title": "Subscribe global subscription",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\withUser\\subscribeWorkitemWithUser.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\withUser\\subscribeWorkitemWithUser.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should subscribe global subscription with user 'test'",
                  "fullTitle": "UPS-RS subscribe workitem with user Subscribe global subscription Should subscribe global subscription with user 'test'",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let request = createRequest({\n    method: \"POST\",\n    url: `/dicom-web/workitems/${SUBSCRIPTION_FIXED_UIDS.GlobalUID}/subscribers/RACCOON`,\n    user: TEST_USERS[0],\n    params: {\n        workItem: SUBSCRIPTION_FIXED_UIDS.GlobalUID,\n        subscriberAeTitle: \"RACCOON\"\n    }\n});\nlet response = createResponse();\nawait SubscribeWorkitemController(request, response);\nexpect(response.statusCode).to.equal(201);",
                  "err": {},
                  "uuid": "d2ddaa76-f8d1-459d-a59c-2b14536d38c1",
                  "parentUUID": "a57ddf48-ad21-4c47-ac02-db2bcd0f94d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should update global subscription for user 'test'",
                  "fullTitle": "UPS-RS subscribe workitem with user Subscribe global subscription Should update global subscription for user 'test'",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let request = createRequest({\n    method: \"POST\",\n    url: `/dicom-web/workitems/${SUBSCRIPTION_FIXED_UIDS.GlobalUID}/subscribers/RACCOON`,\n    user: TEST_USERS[0],\n    params: {\n        workItem: SUBSCRIPTION_FIXED_UIDS.GlobalUID,\n        subscriberAeTitle: \"RACCOON\"\n    },\n    query: {\n        deletionlock: false\n    }\n});\n\nlet response = createResponse();\nawait SubscribeWorkitemController(request, response);\nexpect(response.statusCode).to.equal(201);",
                  "err": {},
                  "uuid": "61cb2490-0bc9-4d38-8bac-606880d61117",
                  "parentUUID": "a57ddf48-ad21-4c47-ac02-db2bcd0f94d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should unsubscribe global subscription for user 'test'",
                  "fullTitle": "UPS-RS subscribe workitem with user Subscribe global subscription Should unsubscribe global subscription for user 'test'",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let request = createRequest({\n    method: \"DELETE\",\n    url: `/dicom-web/workitems/${SUBSCRIPTION_FIXED_UIDS.GlobalUID}/subscribers/RACCOON`,\n    user: TEST_USERS[0],\n    params: {\n        workItem: SUBSCRIPTION_FIXED_UIDS.GlobalUID,\n        subscriberAeTitle: \"RACCOON\"\n    }\n});\nlet response = createResponse();\nawait UnsubscribeWorkitemController(request, response);\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "226becb0-6bf6-4f09-913f-acd458fb7bf3",
                  "parentUUID": "a57ddf48-ad21-4c47-ac02-db2bcd0f94d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 404 when unsubscribing global subscription for user 'oTest'",
                  "fullTitle": "UPS-RS subscribe workitem with user Subscribe global subscription Should raise 404 when unsubscribing global subscription for user 'oTest'",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let request = createRequest({\n    method: \"DELETE\",\n    url: `/dicom-web/workitems/${SUBSCRIPTION_FIXED_UIDS.GlobalUID}/subscribers/RACCOON`,\n    user: TEST_USERS[2],\n    params: {\n        workItem: SUBSCRIPTION_FIXED_UIDS.GlobalUID,\n        subscriberAeTitle: \"RACCOON\"\n    }\n});\nlet response = createResponse();\n\nawait UnsubscribeWorkitemController(request, response);\nexpect(response.statusCode).to.equal(404);",
                  "err": {},
                  "uuid": "4ac69227-c573-4080-80ac-c047b5ad6590",
                  "parentUUID": "a57ddf48-ad21-4c47-ac02-db2bcd0f94d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2ddaa76-f8d1-459d-a59c-2b14536d38c1",
                "61cb2490-0bc9-4d38-8bac-606880d61117",
                "226becb0-6bf6-4f09-913f-acd458fb7bf3",
                "4ac69227-c573-4080-80ac-c047b5ad6590"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "504baa1a-8ad8-42af-9943-dd6e7c8bca81",
              "title": "workitem subscription",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\withUser\\subscribeWorkitemWithUser.test.js",
              "file": "\\test\\api\\dicom-web\\UPS-RS\\withUser\\subscribeWorkitemWithUser.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should subscribe workitem subscription with user 'test'",
                  "fullTitle": "UPS-RS subscribe workitem with user workitem subscription Should subscribe workitem subscription with user 'test'",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let request = createRequest({\n    method: \"POST\",\n    url: `/dicom-web/workitems/${workitemUID}/subscribers/RACCOON`,\n    user: TEST_USERS[0],\n    params: {\n        workItem: workitemUID,\n        subscriberAeTitle: \"RACCOON\"\n    }\n});\nlet response = createResponse();\nawait SubscribeWorkitemController(request, response);\nexpect(response.statusCode).to.equal(201);",
                  "err": {},
                  "uuid": "d507e403-1f0c-41f2-8c41-4334d073b72e",
                  "parentUUID": "504baa1a-8ad8-42af-9943-dd6e7c8bca81",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d507e403-1f0c-41f2-8c41-4334d073b72e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "f9480984-0e63-4b80-aad2-de2810ee7d96",
          "title": "UPS-RS update workitem with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\UPS-RS\\withUser\\updateWorkitemWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\UPS-RS\\withUser\\updateWorkitemWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"UPS-RS update workitem with user\"",
              "fullTitle": "UPS-RS update workitem with user \"before all\" hook in \"UPS-RS update workitem with user\"",
              "timedOut": false,
              "duration": 35,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet createWorkitemRequest = createRequest({\n    method: \"POST\",\n    url: `/dicom-web/workitems?workitem=${workitemUID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    query: {\n        workitem: workitemUID\n    },\n    body: structuredClone(testWorkitem),\n    user: TEST_USERS[0]\n});\nlet createWorkitemResponse = createResponse();\nawait CreateWorkItemController(createWorkitemRequest, createWorkitemResponse);\ncreatedWorkitemLocation = createWorkitemResponse.getHeaders()[\"content-location\"];\nlet createWorkitemForUser2Request = createRequest({\n    method: \"POST\",\n    url: `/dicom-web/workitems?workItem=${workitemUID}`,\n    query: {\n        workitem: workitemUID\n    },\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: structuredClone(testWorkitem),\n    user: TEST_USERS[2]\n});\nlet createWorkitemForUser2Response = createResponse();\nawait CreateWorkItemController(createWorkitemForUser2Request, createWorkitemForUser2Response);",
              "err": {},
              "uuid": "2d661f95-d361-420f-b7ee-21a1a71d8e16",
              "parentUUID": "f9480984-0e63-4b80-aad2-de2810ee7d96",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should update workitem with user 'test' successfully",
              "fullTitle": "UPS-RS update workitem with user Should update workitem with user 'test' successfully",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let fetchWorkitemRequest = createRequest({\n    method: \"GET\",\n    url: createdWorkitemLocation,\n    user: TEST_USERS[0]\n});\nlet fetchWorkitemResponse = createResponse();\nawait GetWorkItemController(fetchWorkitemRequest, fetchWorkitemResponse);\nexpect(fetchWorkitemResponse.statusCode).to.equal(200);\nlet data = fetchWorkitemResponse._getJSONData();\nlet createdWorkitem = data[0];\nlet updatedWorkitem = {\n    ...createdWorkitem,\n    \"00741002\": {\n        \"vr\": \"SQ\",\n        \"Value\": [\n            {\n                \"00741007\": {\n                    \"vr\": \"SQ\",\n                    \"Value\": [\n                        {\n                            \"0040A040\": {\n                                \"vr\": \"CS\",\n                                \"Value\": [\n                                    \"TEXT\"\n                                ]\n                            },\n                            \"0040A160\": {\n                                \"vr\": \"UT\",\n                                \"Value\": [\n                                    \"text value\"\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n};\nlet updateWorkitemRequest = createRequest({\n    method: \"POST\",\n    url: createdWorkitemLocation,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    params: {\n        workItem: workitemUID\n    },\n    body: [updatedWorkitem],\n    user: TEST_USERS[0]\n});\nlet updateWorkitemResponse = createResponse();\nawait UpdateWorkItemController(updateWorkitemRequest, updateWorkitemResponse);\nexpect(updateWorkitemResponse.statusCode).to.equal(200);\nlet fetchUpdatedWorkitemRequest = createRequest({\n    method: \"GET\",\n    url: createdWorkitemLocation,\n    params: {\n        workItem: workitemUID\n    },\n    user: TEST_USERS[0]\n});\nlet fetchUpdatedWorkitemResponse = createResponse();\nawait GetWorkItemController(fetchUpdatedWorkitemRequest, fetchUpdatedWorkitemResponse);\nexpect(fetchUpdatedWorkitemResponse.statusCode).to.equal(200);\nlet updatedWorkitemFromResponse = fetchUpdatedWorkitemResponse._getJSONData();\nexpect(updatedWorkitemFromResponse)\n.have.property(\"0\")\n.have.property(\"00741002\")\n.to.be.deep.equal(updatedWorkitem[\"00741002\"]);",
              "err": {},
              "uuid": "afaf95b4-82b0-4de5-a3e0-0c7f00e00869",
              "parentUUID": "f9480984-0e63-4b80-aad2-de2810ee7d96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not update workitem with user 'oTest'",
              "fullTitle": "UPS-RS update workitem with user Should not update workitem with user 'oTest'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let fetchUpdatedWorkitemRequest = createRequest({\n    method: \"GET\",\n    url: createdWorkitemLocation,\n    user: TEST_USERS[2]\n});\nlet fetchUpdatedWorkitemResponse = createResponse();\nawait GetWorkItemController(fetchUpdatedWorkitemRequest, fetchUpdatedWorkitemResponse);\nexpect(fetchUpdatedWorkitemResponse.statusCode).to.equal(200);\nlet updatedWorkitemFromResponse = fetchUpdatedWorkitemResponse._getJSONData();\nexpect(updatedWorkitemFromResponse)\n.have.property(\"0\")\n.have.property(\"00741002\")\n.not.have.property(\"Value\");",
              "err": {},
              "uuid": "232ce67a-72ae-4abe-9a0b-013d674e3633",
              "parentUUID": "f9480984-0e63-4b80-aad2-de2810ee7d96",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "afaf95b4-82b0-4de5-a3e0-0c7f00e00869",
            "232ce67a-72ae-4abe-9a0b-013d674e3633"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "9687806b-c66b-426a-8534-a7f5fa9d49c9",
          "title": "retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudyBulkdata.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudyBulkdata.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata'\"",
              "fullTitle": "retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' \"before all\" hook in \"retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata'\"",
              "timedOut": false,
              "duration": 1708,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "babe351c-326b-443c-b8ec-b702da84737c",
              "parentUUID": "9687806b-c66b-426a-8534-a7f5fa9d49c9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata'\"",
              "fullTitle": "retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' \"after all\" hook in \"retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata'\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "7f381c28-2a62-4fca-939b-67b9540b0dbb",
              "parentUUID": "9687806b-c66b-426a-8534-a7f5fa9d49c9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study bulkdata",
              "fullTitle": "retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' Should retrieve study bulkdata",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/bulkdata`\n});\nexpect(response.statusCode).to.equal(200);\n\nlet data = response.rawPayload;\nlet buffer = multipartDecode(data);\nexpect(buffer).to.be.an(\"array\");",
              "err": {},
              "uuid": "3bf7b3dc-40f1-4482-9a33-604ca47beba2",
              "parentUUID": "9687806b-c66b-426a-8534-a7f5fa9d49c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3bf7b3dc-40f1-4482-9a33-604ca47beba2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 33,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "aefa271b-c163-4c6a-9fcc-836d7b742532",
          "title": "retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudySeriesBulkdata.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudySeriesBulkdata.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata'\"",
              "fullTitle": "retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' \"before all\" hook in \"retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata'\"",
              "timedOut": false,
              "duration": 2533,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "dc6acb43-2c19-49bf-b9cc-0606f6d15fb5",
              "parentUUID": "aefa271b-c163-4c6a-9fcc-836d7b742532",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata'\"",
              "fullTitle": "retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' \"after all\" hook in \"retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata'\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "473a7ff2-5863-4aa1-8e9c-5bbaa326a930",
              "parentUUID": "aefa271b-c163-4c6a-9fcc-836d7b742532",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series bulkdata",
              "fullTitle": "retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' Should retrieve study-series bulkdata",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/bulkdata`\n});\nexpect(response.statusCode).to.equal(200);\n\nlet data = response.rawPayload;\nlet buffer = multipartDecode(data);\nexpect(buffer).to.be.an(\"array\");",
              "err": {},
              "uuid": "1729e9cf-677a-4fcf-9ec8-513b7163de0d",
              "parentUUID": "aefa271b-c163-4c6a-9fcc-836d7b742532",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1729e9cf-677a-4fcf-9ec8-513b7163de0d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "303448c8-6d5c-4fd3-a95b-4b5dc9b0f648",
          "title": "retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudySeriesInstancesBulkdata.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudySeriesInstancesBulkdata.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata'\"",
              "fullTitle": "retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' \"before all\" hook in \"retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata'\"",
              "timedOut": false,
              "duration": 1752,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "b3c3b857-8c97-4772-b236-9b73ffb91a1e",
              "parentUUID": "303448c8-6d5c-4fd3-a95b-4b5dc9b0f648",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata'\"",
              "fullTitle": "retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' \"after all\" hook in \"retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata'\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "8e8de0f4-12f7-495c-b5ba-6f9ba474c0e9",
              "parentUUID": "303448c8-6d5c-4fd3-a95b-4b5dc9b0f648",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instances bulkdata",
              "fullTitle": "retrieve study-series-instances bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' Should retrieve study-series-instances bulkdata",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/bulkdata`\n});\nexpect(response.statusCode).to.equal(200);\n\nlet data = response.rawPayload;\nlet buffer = multipartDecode(data);\nexpect(buffer).to.be.an(\"array\");",
              "err": {},
              "uuid": "0d546f67-a547-4b24-8c95-6dbfc5b13cea",
              "parentUUID": "303448c8-6d5c-4fd3-a95b-4b5dc9b0f648",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0d546f67-a547-4b24-8c95-6dbfc5b13cea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "9ee8052e-b3d5-44dd-b569-da589632dd45",
          "title": "retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudySeriesInstancesSpecifiedBulkdata.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\bulkdata\\retrieveStudySeriesInstancesSpecifiedBulkdata.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath'\"",
              "fullTitle": "retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath' \"before all\" hook in \"retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath'\"",
              "timedOut": false,
              "duration": 1768,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "dbc87d94-fcf4-4ba2-94c3-0b54a5747a2a",
              "parentUUID": "9ee8052e-b3d5-44dd-b569-da589632dd45",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath'\"",
              "fullTitle": "retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath' \"after all\" hook in \"retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath'\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "41597b44-4250-4129-ae14-cbd5a3975cc7",
              "parentUUID": "9ee8052e-b3d5-44dd-b569-da589632dd45",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instances bulkdata",
              "fullTitle": "retrieve study-series-instances specified bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata/:binaryValuePath' Should retrieve study-series-instances bulkdata",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/bulkdata/${binaryValuePath}`\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nlet buffer = multipartDecode(data);\nexpect(buffer).to.be.an(\"array\").have.lengthOf(1);",
              "err": {},
              "uuid": "846a1a43-9520-45ce-9093-4239526e0136",
              "parentUUID": "9ee8052e-b3d5-44dd-b569-da589632dd45",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "846a1a43-9520-45ce-9093-4239526e0136"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "976588fc-90d4-49b6-b478-a30922d90447",
          "title": "retrieveInstanceMd5",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\md5\\retrieveInstanceMd5.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\md5\\retrieveInstanceMd5.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieveInstanceMd5\"",
              "fullTitle": "retrieveInstanceMd5 \"before all\" hook in \"retrieveInstanceMd5\"",
              "timedOut": false,
              "duration": 67,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../../../testData/dicomFiles/1-01-mod-vo\")\n);",
              "err": {},
              "uuid": "747e72bf-3081-4740-8e34-26115efc8a1e",
              "parentUUID": "976588fc-90d4-49b6-b478-a30922d90447",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return md5 for instance",
              "fullTitle": "retrieveInstanceMd5 should return md5 for instance",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/md5`\n});\nexpect(res.statusCode).to.equal(200);\nconst { md5 } = await res.json();\nexpect(md5).to.be.a(\"string\");\nexpect(md5.length).to.equal(32);\nexpect(md5).to.equal(INSTANCE_MD5);",
              "err": {},
              "uuid": "4dbebe73-5fb5-4da0-a6c2-1f8978b47eaf",
              "parentUUID": "976588fc-90d4-49b6-b478-a30922d90447",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return md5 for instance when instance does not have md5 yet",
              "fullTitle": "retrieveInstanceMd5 should return md5 for instance when instance does not have md5 yet",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (process.env.TEST_DB_TYPE === \"sql\") {\n    await dbInstance.model(\"Instance\").update({ md5: \"\" }, { where: { x00080018: INSTANCE_UID } });\n} else if (process.env.TEST_DB_TYPE === \"mongodb\") {\n    await dbInstance.model(\"dicom\").updateOne({ instanceUID: INSTANCE_UID }, { $set: { md5: null } });\n}\nconst res = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/md5`\n});\nexpect(res.statusCode).to.equal(200);\nconst { md5 } = await res.json();\nexpect(md5).to.be.a(\"string\");\nexpect(md5.length).to.equal(32);\nexpect(md5).to.equal(INSTANCE_MD5);",
              "err": {},
              "uuid": "4d5abd93-ef48-4b9f-a9b7-5986cc0119f6",
              "parentUUID": "976588fc-90d4-49b6-b478-a30922d90447",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4dbebe73-5fb5-4da0-a6c2-1f8978b47eaf",
            "4d5abd93-ef48-4b9f-a9b7-5986cc0119f6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "3753d021-dc85-4008-b8e1-8c2e8820c4b4",
          "title": "retrieveInstanceMd5 with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\md5\\retrieveInstanceMd5WithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\md5\\retrieveInstanceMd5WithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieveInstanceMd5 with user\"",
              "fullTitle": "retrieveInstanceMd5 with user \"before all\" hook in \"retrieveInstanceMd5 with user\"",
              "timedOut": false,
              "duration": 101,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet testDicomFile = resolve(__dirname, \"../../../../testData/dicomFiles/1-01-mod-vo\");\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nawait storeInstanceWithUserForTest(testDicomFile, TEST_USERS[0]);",
              "err": {},
              "uuid": "ab6771bb-74da-494d-9e44-9622146b4172",
              "parentUUID": "3753d021-dc85-4008-b8e1-8c2e8820c4b4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return md5 for instance by user 'test'",
              "fullTitle": "retrieveInstanceMd5 with user should return md5 for instance by user 'test'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/md5`,\n    method: \"GET\",\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new RetrieveMd5Controller(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\nconst { md5 } = await response._getJSONData();\nexpect(md5).to.be.a(\"string\");\nexpect(md5.length).to.equal(32);\nexpect(md5).to.equal(INSTANCE_MD5);",
              "err": {},
              "uuid": "711cb6f5-4a50-4e45-b46f-05efbbdbf34d",
              "parentUUID": "3753d021-dc85-4008-b8e1-8c2e8820c4b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 by user 'oTest'",
              "fullTitle": "retrieveInstanceMd5 with user should return 404 by user 'oTest'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/md5`,\n    method: \"GET\",\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    },\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nlet controller = new RetrieveMd5Controller(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "505eec61-7c52-4d2f-a541-a0cba6f6b77a",
              "parentUUID": "3753d021-dc85-4008-b8e1-8c2e8820c4b4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "711cb6f5-4a50-4e45-b46f-05efbbdbf34d",
            "505eec61-7c52-4d2f-a541-a0cba6f6b77a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "3b89481c-d867-4e4b-9a04-948a52bc9e27",
          "title": "retrieve study metadata",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\metadata\\retrieveStudyMetadata.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\metadata\\retrieveStudyMetadata.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study metadata\"",
              "fullTitle": "retrieve study metadata \"before all\" hook in \"retrieve study metadata\"",
              "timedOut": false,
              "duration": 1655,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "f6b2f4cc-21e0-488d-aa8c-6013a9126d0c",
              "parentUUID": "3b89481c-d867-4e4b-9a04-948a52bc9e27",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve study with 14 instances' metadata",
              "fullTitle": "retrieve study metadata Should retrieve study with 14 instances' metadata",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/metadata`,\n    headers: {\n        \"accept\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(14);",
              "err": {},
              "uuid": "d33ee6cb-744e-4f20-b7bc-8eeaacbcc4ee",
              "parentUUID": "3b89481c-d867-4e4b-9a04-948a52bc9e27",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study not exist",
              "fullTitle": "retrieve study metadata Should raise 404 when study not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}1268/metadata`\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "e2ec4e1c-fbde-4038-b5e0-98dbb2afe873",
              "parentUUID": "3b89481c-d867-4e4b-9a04-948a52bc9e27",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d33ee6cb-744e-4f20-b7bc-8eeaacbcc4ee",
            "e2ec4e1c-fbde-4038-b5e0-98dbb2afe873"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "0d293f98-d745-4438-9533-31cbbfbefd41",
          "title": "retrieve study-series metadata",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\metadata\\retrieveStudySeriesInstancesMetadata.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\metadata\\retrieveStudySeriesInstancesMetadata.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series metadata\"",
              "fullTitle": "retrieve study-series metadata \"before all\" hook in \"retrieve study-series metadata\"",
              "timedOut": false,
              "duration": 1623,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "0877ac81-1e05-415c-b503-da4bb27fe8ec",
              "parentUUID": "0d293f98-d745-4438-9533-31cbbfbefd41",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve study-series-instances with 1 instance's metadata",
              "fullTitle": "retrieve study-series metadata Should retrieve study-series-instances with 1 instance's metadata",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/metadata`,\n    headers: {\n        \"accept\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(1);",
              "err": {},
              "uuid": "40555afe-c8d0-40b2-8bee-7bffd213b3fe",
              "parentUUID": "0d293f98-d745-4438-9533-31cbbfbefd41",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study-series not exist",
              "fullTitle": "retrieve study-series metadata Should raise 404 when study-series not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}1268/metadata`\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "8d31c087-489b-46b9-b343-4814c4a072c0",
              "parentUUID": "0d293f98-d745-4438-9533-31cbbfbefd41",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "40555afe-c8d0-40b2-8bee-7bffd213b3fe",
            "8d31c087-489b-46b9-b343-4814c4a072c0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "0e8c88a8-aac0-48d0-87f3-91f03bdfa9f0",
          "title": "retrieve study-series metadata",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\metadata\\retrieveStudySeriesMetadata.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\metadata\\retrieveStudySeriesMetadata.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series metadata\"",
              "fullTitle": "retrieve study-series metadata \"before all\" hook in \"retrieve study-series metadata\"",
              "timedOut": false,
              "duration": 2131,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "801356f7-9388-4fc9-83b7-5c04f42e7815",
              "parentUUID": "0e8c88a8-aac0-48d0-87f3-91f03bdfa9f0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve study-series with 5 instances' metadata",
              "fullTitle": "retrieve study-series metadata Should retrieve study-series with 5 instances' metadata",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/metadata`,\n    headers: {\n        \"accept\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.be.an(\"array\").have.lengthOf(5);",
              "err": {},
              "uuid": "bbe9a7de-cb33-4ef5-9601-fa836d4b101d",
              "parentUUID": "0e8c88a8-aac0-48d0-87f3-91f03bdfa9f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study-series not exist",
              "fullTitle": "retrieve study-series metadata Should raise 404 when study-series not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}126888/metadata`\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "ad4b91e8-2c71-4568-bee1-471917a6496a",
              "parentUUID": "0e8c88a8-aac0-48d0-87f3-91f03bdfa9f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bbe9a7de-cb33-4ef5-9601-fa836d4b101d",
            "ad4b91e8-2c71-4568-bee1-471917a6496a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "19653f15-e75a-4ba8-b8b0-74845d616773",
          "title": "retrieve rendered study '/dicom-web/studies/:studyUID/rendered'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudy.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudy.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/rendered'\"",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/rendered' \"before all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/rendered'\"",
              "timedOut": false,
              "duration": 1710,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "4329b346-7d0a-4a2c-93db-656bf0fbfd15",
              "parentUUID": "19653f15-e75a-4ba8-b8b0-74845d616773",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/rendered'\"",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/rendered' \"after all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/rendered'\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "4087c6b6-e487-451e-9509-4ea0bdca310d",
              "parentUUID": "19653f15-e75a-4ba8-b8b0-74845d616773",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study with 15 rendered images",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/rendered' Should retrieve study with 15 rendered images",
              "timedOut": false,
              "duration": 636,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/rendered`\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(15);",
              "err": {},
              "uuid": "b1f988be-195b-4c3b-971a-6be82ff2b6d6",
              "parentUUID": "19653f15-e75a-4ba8-b8b0-74845d616773",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study not exist",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/rendered' Should raise 404 when study not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}1268/rendered`\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "76e20a58-fba1-47f1-be8e-5b2c55c3be31",
              "parentUUID": "19653f15-e75a-4ba8-b8b0-74845d616773",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 206 when study only have partial images",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/rendered' Should raise 206 when study only have partial images",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let studyImagePathFactory = new StudyImagePathFactory({ studyUID: studyUIDs[2]});\nlet imagePaths = await studyImagePathFactory.getImagePaths({ absolute: true });\nlet firstImagePath = imagePaths[0];\nawait unlink(firstImagePath.instancePath);\nlet response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${studyUIDs[2]}/rendered`\n});\nexpect(response.statusCode).to.equal(206);",
              "err": {},
              "uuid": "439e95b0-3a79-43da-819b-d06acf2a1e12",
              "parentUUID": "19653f15-e75a-4ba8-b8b0-74845d616773",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 410 when study gone",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/rendered' Should raise 410 when study gone",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let studyImagePathFactory = new StudyImagePathFactory({ studyUID: STUDY_UID});\nlet imagePaths = await studyImagePathFactory.getImagePaths({ absolute: true });\nlet firstImagePath = imagePaths[0];\nawait unlink(firstImagePath.instancePath);\nlet response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/rendered`\n});\nexpect(response.statusCode).to.equal(410);",
              "err": {},
              "uuid": "f7e0db8d-1c99-4c78-b9e0-a6c94aec1d09",
              "parentUUID": "19653f15-e75a-4ba8-b8b0-74845d616773",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1f988be-195b-4c3b-971a-6be82ff2b6d6",
            "76e20a58-fba1-47f1-be8e-5b2c55c3be31",
            "439e95b0-3a79-43da-819b-d06acf2a1e12",
            "f7e0db8d-1c99-4c78-b9e0-a6c94aec1d09"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 756,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "d0e0e6c9-015d-4de0-af6d-b474add781f9",
          "title": "retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeries.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeries.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'\"",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered' \"before all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'\"",
              "timedOut": false,
              "duration": 1745,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "3b28442a-81a9-40b4-85c7-5fe0ce6195d9",
              "parentUUID": "d0e0e6c9-015d-4de0-af6d-b474add781f9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'\"",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered' \"after all\" hook in \"retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "3106aeb8-bd7c-46b7-a7c5-64dbe709e10d",
              "parentUUID": "d0e0e6c9-015d-4de0-af6d-b474add781f9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series with 15 rendered images",
              "fullTitle": "retrieve rendered study '/dicom-web/studies/:studyUID/series/:seriesUID/rendered' Should retrieve study-series with 15 rendered images",
              "timedOut": false,
              "duration": 607,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/rendered`\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(15);",
              "err": {},
              "uuid": "04214d57-b525-4d76-98f1-91a56686d1b2",
              "parentUUID": "d0e0e6c9-015d-4de0-af6d-b474add781f9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "04214d57-b525-4d76-98f1-91a56686d1b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 607,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "a795dfb7-2fb7-4271-97f2-e39306356963",
          "title": "retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeriesInstances.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeriesInstances.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'\"",
              "fullTitle": "retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered' \"before all\" hook in \"retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'\"",
              "timedOut": false,
              "duration": 1714,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "3083cdec-d4fb-4aef-b6d4-c4bc8570a24f",
              "parentUUID": "a795dfb7-2fb7-4271-97f2-e39306356963",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'\"",
              "fullTitle": "retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered' \"after all\" hook in \"retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "b8e078c3-c81e-4154-a702-6346b7842fd7",
              "parentUUID": "a795dfb7-2fb7-4271-97f2-e39306356963",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instances with 15 rendered images",
              "fullTitle": "retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered' Should retrieve study-series-instances with 15 rendered images",
              "timedOut": false,
              "duration": 599,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/rendered`,\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(15);",
              "err": {},
              "uuid": "d05a39bc-0bb8-4f52-8597-f3b763f9f3a2",
              "parentUUID": "a795dfb7-2fb7-4271-97f2-e39306356963",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when using invalid accept header",
              "fullTitle": "retrieve rendered study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered' Should raise 400 (Bad Request) when using invalid accept header",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/rendered`,\n    headers: {\n        \"accept\": \"text/html\"\n    }\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "faf56b8f-349e-43fb-a3b7-1f4727d14874",
              "parentUUID": "a795dfb7-2fb7-4271-97f2-e39306356963",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d05a39bc-0bb8-4f52-8597-f3b763f9f3a2",
            "faf56b8f-349e-43fb-a3b7-1f4727d14874"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 600,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "369684da-5a67-46be-b470-6f18abd8ed34",
          "title": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeriesInstancesFrames.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeriesInstancesFrames.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'\"",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' \"before all\" hook in \"retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'\"",
              "timedOut": false,
              "duration": 1752,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "8612dc2f-1ba1-446a-940e-a0aa30c6c361",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'\"",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' \"after all\" hook in \"retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "56735de5-9aca-47ea-9575-bc2d57553e9d",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve 1 frame",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve 1 frame",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "6c1dfbb3-5a2f-46a8-9558-6798610f8a9c",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve 3 frames",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve 3 frames",
              "timedOut": false,
              "duration": 167,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1,2,3/rendered`\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(3);",
              "err": {},
              "uuid": "16c21da0-203a-470a-b7d0-a358a99cebfe",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with quality=30",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with quality=30",
              "timedOut": false,
              "duration": 165,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "b0534d13-2931-4d3a-bb81-a8c31a21db97",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with iccprofile=no",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with iccprofile=no",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "d50ab6c8-fe14-4bdb-856b-b94a914a2d9a",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with iccprofile=yes",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with iccprofile=yes",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "5b48aa74-73c8-4f73-bb39-09d29217b218",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with iccprofile=srgb",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with iccprofile=srgb",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "b1265b79-c71b-48f2-bb4f-e78dee0707be",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with iccprofile=adobergb",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with iccprofile=adobergb",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "ebdb6bfe-3c91-4e01-b8c5-58d926bfb1dc",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with iccprofile=rommrgb",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with iccprofile=rommrgb",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "380af6f4-7873-4f1c-b750-ca7f5f9357c5",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with viewport=100,100",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with viewport=100,100",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "cec9d329-b8b1-46a0-85e1-cdb4c079fc4f",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with viewport=100,100,0,0,10,10",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with viewport=100,100,0,0,10,10",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "1f0dde67-2074-42b3-8226-27e144dc135d",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve frame with viewport=100,100,10,10,-50,-50",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve frame with viewport=100,100,10,10,-50,-50",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "2bbb8d43-99c6-4ace-944d-be7df25c0b1a",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise BadRequest (400) error when retrieving frame with bad quality=-1",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should raise BadRequest (400) error when retrieving frame with bad quality=-1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "34063389-c9b7-472c-a2d4-06c2f8eb4687",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise BadRequest (400) error when retrieving frame with bad iccprofile=foobar",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should raise BadRequest (400) error when retrieving frame with bad iccprofile=foobar",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "13b7aea7-b7d9-4972-877c-3076d00568e2",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise BadRequest (400) error when retrieving frame with bad viewport=1,1,,1",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should raise BadRequest (400) error when retrieving frame with bad viewport=1,1,,1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "0a6cc918-0b62-49e9-85ac-2ecad1839537",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise BadRequest (400) error when retrieving frame with bad viewport=1,1,1,",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should raise BadRequest (400) error when retrieving frame with bad viewport=1,1,1,",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered?${param}=${value}`\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "f93fe533-189f-4b5a-864c-d8fafc7493f1",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw error when retrieve frame without iccprofile and apply the icc profile",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should throw error when retrieve frame without iccprofile and apply the icc profile",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${NO_ICC_PROFILE_STUDY_UID}/series/${NO_ICC_PROFILE_SERIES_UID}/instances/${NO_ICC_PROFILE_INSTANCE_UID}/frames/1/rendered?iccprofile=yes`\n});\nexpect(response.statusCode).to.equal(500);",
              "err": {},
              "uuid": "39782dcc-9cb1-411a-8f29-7104067c5d0c",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study not exist",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should raise 404 when study not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}2486/frames/1/rendered`\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "5b58cc5b-a9e9-4882-921b-8278c53a7855",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 when frame is out of range",
              "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should raise 400 when frame is out of range",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/2486/rendered`\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "3e661627-98ab-4445-994a-2beacbcfb6b7",
              "parentUUID": "369684da-5a67-46be-b470-6f18abd8ed34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "dbe26863-99e0-4211-abcb-53af4ca50207",
              "title": "retrieve rendered frame without pixel data",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeriesInstancesFrames.test.js",
              "file": "\\test\\api\\dicom-web\\WADO-RS\\rendered\\retrieveRenderedStudySeriesInstancesFrames.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"retrieve rendered frame without pixel data\"",
                  "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' retrieve rendered frame without pixel data \"before all\" hook in \"retrieve rendered frame without pixel data\"",
                  "timedOut": false,
                  "duration": 40,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await storeInstanceForTest(\n    resolve(\n        __dirname,\n        `../../../../testData/forStore/ANN/instance_6.dcm`\n    )\n);",
                  "err": {},
                  "uuid": "5d146d8b-67f6-4c1d-9280-bc2be9eaf75f",
                  "parentUUID": "dbe26863-99e0-4211-abcb-53af4ca50207",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should raise 400 when frame have no pixel data",
                  "fullTitle": "retrieve rendered frames of study-series-instances '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' retrieve rendered frame without pixel data Should raise 400 when frame have no pixel data",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${ANN_STUDY_UID}/series/${ANN_SERIES_UID}/instances/${ANN_INSTANCE_UID}/frames/1/rendered`\n});\nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "7d5cc086-73cf-4652-be3e-1876a56bf80a",
                  "parentUUID": "dbe26863-99e0-4211-abcb-53af4ca50207",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d5cc086-73cf-4652-be3e-1876a56bf80a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "6c1dfbb3-5a2f-46a8-9558-6798610f8a9c",
            "16c21da0-203a-470a-b7d0-a358a99cebfe",
            "b0534d13-2931-4d3a-bb81-a8c31a21db97",
            "d50ab6c8-fe14-4bdb-856b-b94a914a2d9a",
            "5b48aa74-73c8-4f73-bb39-09d29217b218",
            "b1265b79-c71b-48f2-bb4f-e78dee0707be",
            "ebdb6bfe-3c91-4e01-b8c5-58d926bfb1dc",
            "380af6f4-7873-4f1c-b750-ca7f5f9357c5",
            "cec9d329-b8b1-46a0-85e1-cdb4c079fc4f",
            "1f0dde67-2074-42b3-8226-27e144dc135d",
            "2bbb8d43-99c6-4ace-944d-be7df25c0b1a",
            "34063389-c9b7-472c-a2d4-06c2f8eb4687",
            "13b7aea7-b7d9-4972-877c-3076d00568e2",
            "0a6cc918-0b62-49e9-85ac-2ecad1839537",
            "f93fe533-189f-4b5a-864c-d8fafc7493f1",
            "39782dcc-9cb1-411a-8f29-7104067c5d0c",
            "5b58cc5b-a9e9-4882-921b-8278c53a7855",
            "3e661627-98ab-4445-994a-2beacbcfb6b7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "817eb8b5-85be-421b-8c89-2cd25c1fad53",
          "title": "retrieve study-series-instances-frames",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\retrieveInstanceFrame.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\retrieveInstanceFrame.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances-frames\"",
              "fullTitle": "retrieve study-series-instances-frames \"before all\" hook in \"retrieve study-series-instances-frames\"",
              "timedOut": false,
              "duration": 1656,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "3c165a04-6c27-497e-a235-6241bca97dab",
              "parentUUID": "817eb8b5-85be-421b-8c89-2cd25c1fad53",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve instance's frame 1",
              "fullTitle": "retrieve study-series-instances-frames Should retrieve instance's frame 1",
              "timedOut": false,
              "duration": 469,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1`,\n    headers: {\n        accept: \"*/*\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(1);",
              "err": {},
              "uuid": "d818b3df-ccb6-4987-bab4-751a80bed3e2",
              "parentUUID": "817eb8b5-85be-421b-8c89-2cd25c1fad53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d818b3df-ccb6-4987-bab4-751a80bed3e2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 469,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "f6b0529c-8e28-4168-b739-f097b8d2004d",
          "title": "retrieve study",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\retrieveStudy.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\retrieveStudy.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study\"",
              "fullTitle": "retrieve study \"before all\" hook in \"retrieve study\"",
              "timedOut": false,
              "duration": 1807,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "47a1f0d6-b914-4bd6-8173-5cddeba99138",
              "parentUUID": "f6b0529c-8e28-4168-b739-f097b8d2004d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study\"",
              "fullTitle": "retrieve study \"after all\" hook in \"retrieve study\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "unlink(zipFullPath);",
              "err": {},
              "uuid": "656dedda-79da-4138-a887-757079fe75fd",
              "parentUUID": "f6b0529c-8e28-4168-b739-f097b8d2004d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study with 14 instances",
              "fullTitle": "retrieve study Should retrieve study with 14 instances",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(14);",
              "err": {},
              "uuid": "e494e022-fa1c-44e9-ae50-74221ac196ea",
              "parentUUID": "f6b0529c-8e28-4168-b739-f097b8d2004d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study with 14 instances with ZIP",
              "fullTitle": "retrieve study Should retrieve study with 14 instances with ZIP",
              "timedOut": false,
              "duration": 122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}`,\n    headers: {\n        \"accept\": \"application/zip\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nawait writeFile(zipFullPath, data);\nlet fileListInZip = await SevenZip.list(zipFullPath);\nexpect(fileListInZip).to.be.an(\"array\");\nexpect(fileListInZip.length).to.equal(14);",
              "err": {},
              "uuid": "1e9902a6-2c26-49b5-bc5e-f437ad65839b",
              "parentUUID": "f6b0529c-8e28-4168-b739-f097b8d2004d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study not exist with zip route",
              "fullTitle": "retrieve study Should raise 404 when study not exist with zip route",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}1268`,\n    headers: {\n        \"accept\": \"application/zip\"\n    }\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "59b0f1ac-db62-4154-b2c6-6ece89c6ea62",
              "parentUUID": "f6b0529c-8e28-4168-b739-f097b8d2004d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study with 14 instances with accept '*'",
              "fullTitle": "retrieve study Should retrieve study with 14 instances with accept '*'",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}`,\n    headers: {\n        \"accept\": \"*\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(14);",
              "err": {},
              "uuid": "a77d4dfd-d71e-4417-a28c-bbe7332cccb9",
              "parentUUID": "f6b0529c-8e28-4168-b739-f097b8d2004d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study with 11 instances with accept 'multipart/related; type=\"image/jpeg'",
              "fullTitle": "retrieve study Should retrieve study with 11 instances with accept 'multipart/related; type=\"image/jpeg'",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${JPEG_STUDY_UID}`,\n    headers: {\n        \"accept\": `multipart/related; type=\"image/jpeg\"`\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(11);",
              "err": {},
              "uuid": "0f4cdd0b-144b-46ac-8c21-48794e1209e5",
              "parentUUID": "f6b0529c-8e28-4168-b739-f097b8d2004d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study with 11 instances with accept 'multipart/related; type=\"image/jp2\"",
              "fullTitle": "retrieve study Should retrieve study with 11 instances with accept 'multipart/related; type=\"image/jp2\"",
              "timedOut": false,
              "duration": 137,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${JPEG_STUDY_UID}`,\n    headers: {\n        \"accept\": `multipart/related; type=\"image/jp2\"`\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(11);",
              "err": {},
              "uuid": "a10f024e-6d57-407e-9b6b-4abef8903669",
              "parentUUID": "f6b0529c-8e28-4168-b739-f097b8d2004d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise not supported type",
              "fullTitle": "retrieve study Should raise not supported type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"not-application/dicom\\\"\"\n    }\n});\nexpect(response.statusCode).to.equal(406);",
              "err": {},
              "uuid": "9f7ed1d0-c2c5-45c1-9829-f4fffb966cb0",
              "parentUUID": "f6b0529c-8e28-4168-b739-f097b8d2004d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e494e022-fa1c-44e9-ae50-74221ac196ea",
            "1e9902a6-2c26-49b5-bc5e-f437ad65839b",
            "59b0f1ac-db62-4154-b2c6-6ece89c6ea62",
            "a77d4dfd-d71e-4417-a28c-bbe7332cccb9",
            "0f4cdd0b-144b-46ac-8c21-48794e1209e5",
            "a10f024e-6d57-407e-9b6b-4abef8903669",
            "9f7ed1d0-c2c5-45c1-9829-f4fffb966cb0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 420,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "941344b8-6cfd-4c11-aa41-e81694d4b988",
          "title": "retrieve study-series",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\retrieveStudySeries.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\retrieveStudySeries.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series\"",
              "fullTitle": "retrieve study-series \"before all\" hook in \"retrieve study-series\"",
              "timedOut": false,
              "duration": 1677,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "2766b03b-edd4-4df2-ad9b-e699f69351fd",
              "parentUUID": "941344b8-6cfd-4c11-aa41-e81694d4b988",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series\"",
              "fullTitle": "retrieve study-series \"after all\" hook in \"retrieve study-series\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "unlink(zipFullPath);",
              "err": {},
              "uuid": "1f0297ba-1e06-4ddb-b0a0-60cd46ac112a",
              "parentUUID": "941344b8-6cfd-4c11-aa41-e81694d4b988",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series with 5 instances",
              "fullTitle": "retrieve study-series Should retrieve study-series with 5 instances",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(5);",
              "err": {},
              "uuid": "05d74f9d-7395-4ddf-94ec-57e3c18896b8",
              "parentUUID": "941344b8-6cfd-4c11-aa41-e81694d4b988",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study-series with 5 instances with ZIP",
              "fullTitle": "retrieve study-series Should retrieve study-series with 5 instances with ZIP",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}`,\n    headers: {\n        \"accept\": \"application/zip\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nawait writeFile(zipFullPath, data);\nlet fileListInZip = await SevenZip.list(zipFullPath);\nexpect(fileListInZip).to.be.an(\"array\");\nexpect(fileListInZip.length).to.equal(5);",
              "err": {},
              "uuid": "d8e2903f-929e-44fd-9708-924dfdf56076",
              "parentUUID": "941344b8-6cfd-4c11-aa41-e81694d4b988",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05d74f9d-7395-4ddf-94ec-57e3c18896b8",
            "d8e2903f-929e-44fd-9708-924dfdf56076"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 101,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "31f012be-6a5f-4bef-bcca-8597b4c824a1",
          "title": "retrieve study-series-instances",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\retrieveStudySeriesInstances.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\retrieveStudySeriesInstances.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances\"",
              "fullTitle": "retrieve study-series-instances \"before all\" hook in \"retrieve study-series-instances\"",
              "timedOut": false,
              "duration": 1880,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "4f3229e4-a011-41fc-a6b0-160b89bb7912",
              "parentUUID": "31f012be-6a5f-4bef-bcca-8597b4c824a1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series-instances\"",
              "fullTitle": "retrieve study-series-instances \"after all\" hook in \"retrieve study-series-instances\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "unlink(zipFullPath);",
              "err": {},
              "uuid": "9fbf199c-07ed-4dc5-a0ac-a39342f12735",
              "parentUUID": "31f012be-6a5f-4bef-bcca-8597b4c824a1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instances with 1 instance",
              "fullTitle": "retrieve study-series-instances Should retrieve study-series-instances with 1 instance",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nconst instanceBuffers = multipartDecode(data);\nexpect(instanceBuffers.length).to.equal(1);",
              "err": {},
              "uuid": "180c8ebd-0e2e-4695-850d-8684a0b1774f",
              "parentUUID": "31f012be-6a5f-4bef-bcca-8597b4c824a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study-series-instances with 1 instance with ZIP",
              "fullTitle": "retrieve study-series-instances Should retrieve study-series-instances with 1 instance with ZIP",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}`,\n    headers: {\n        \"accept\": \"application/zip\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nawait writeFile(zipFullPath, data);\nlet fileListInZip = await SevenZip.list(zipFullPath);\nexpect(fileListInZip).to.be.an(\"array\");\nexpect(fileListInZip.length).to.equal(1);",
              "err": {},
              "uuid": "b5f04b79-6ac0-4146-9479-bed683b5606a",
              "parentUUID": "31f012be-6a5f-4bef-bcca-8597b4c824a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "180c8ebd-0e2e-4695-850d-8684a0b1774f",
            "b5f04b79-6ac0-4146-9479-bed683b5606a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 82,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "f6351694-84cd-4548-95ce-ef3fbb6e3ad6",
          "title": "retrieve study with transfer syntax",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\retrieveStudyWithTransferSyntax.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\retrieveStudyWithTransferSyntax.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study with transfer syntax\"",
              "fullTitle": "retrieve study with transfer syntax \"before all\" hook in \"retrieve study with transfer syntax\"",
              "timedOut": false,
              "duration": 2131,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "97d19470-4314-4879-8ca4-e601a2b0070a",
              "parentUUID": "f6351694-84cd-4548-95ce-ef3fbb6e3ad6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study with transfer syntax\"",
              "fullTitle": "retrieve study with transfer syntax \"after all\" hook in \"retrieve study with transfer syntax\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "unlink(zipFullPath);",
              "err": {},
              "uuid": "83880b19-bdb9-4000-b57a-0016bd31ead5",
              "parentUUID": "f6351694-84cd-4548-95ce-ef3fbb6e3ad6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study with 1 instance with ZIP and transcode with transfer syntax",
              "fullTitle": "retrieve study with transfer syntax Should retrieve study with 1 instance with ZIP and transcode with transfer syntax",
              "timedOut": false,
              "duration": 139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID_FOR_TRANSFER_SYNTAX}`,\n    headers: {\n        \"accept\": \"application/zip; transfer-syntax=1.2.840.10008.1.2.4.50\" // JPEG Baseline\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet data = response.rawPayload;\nawait writeFile(zipFullPath, data);\nlet fileListInZip = await SevenZip.list(zipFullPath);\nexpect(fileListInZip).to.be.an(\"array\");\nexpect(fileListInZip.length).to.equal(1);",
              "err": {},
              "uuid": "02dcbad8-036f-4055-900f-058dc936685f",
              "parentUUID": "f6351694-84cd-4548-95ce-ef3fbb6e3ad6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02dcbad8-036f-4055-900f-058dc936685f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 139,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "8ebdbe15-379a-4cfe-ba8d-5dc11f6772fa",
          "title": "retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudySeriesInstancesFrameThumbnail.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudySeriesInstancesFrameThumbnail.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail'\"",
              "fullTitle": "retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail' \"before all\" hook in \"retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail'\"",
              "timedOut": false,
              "duration": 1802,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "f353b046-7cec-4910-a0e3-b02d329be61e",
              "parentUUID": "8ebdbe15-379a-4cfe-ba8d-5dc11f6772fa",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail'\"",
              "fullTitle": "retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail' \"after all\" hook in \"retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail'\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "ed613d30-b8fb-4fe2-8fea-5ac90d53cec5",
              "parentUUID": "8ebdbe15-379a-4cfe-ba8d-5dc11f6772fa",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instances-frame thumbnail",
              "fullTitle": "retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail' Should retrieve study-series-instances-frame thumbnail",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/thumbnail`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "e535d33c-8767-49be-9eb8-99e6a5e93267",
              "parentUUID": "8ebdbe15-379a-4cfe-ba8d-5dc11f6772fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 when using bad frame number",
              "fullTitle": "retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail' Should raise 400 when using bad frame number",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/2486/thumbnail`\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "cb17440e-56c8-43f8-9610-673fc0ba0b89",
              "parentUUID": "8ebdbe15-379a-4cfe-ba8d-5dc11f6772fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when image not exist",
              "fullTitle": "retrieve study-series-instances-frame thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/thumbnail' Should raise 404 when image not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}2486/frames/1/thumbnail`\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "a5ab9f60-bca8-45b5-9466-0b871e9e0245",
              "parentUUID": "8ebdbe15-379a-4cfe-ba8d-5dc11f6772fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e535d33c-8767-49be-9eb8-99e6a5e93267",
            "cb17440e-56c8-43f8-9610-673fc0ba0b89",
            "a5ab9f60-bca8-45b5-9466-0b871e9e0245"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "6f64b53f-1596-4b34-8b8c-17e4de4ac7dd",
          "title": "retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudySeriesInstancesThumbnail.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudySeriesInstancesThumbnail.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'\"",
              "fullTitle": "retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail' \"before all\" hook in \"retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'\"",
              "timedOut": false,
              "duration": 1808,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "1fc9264c-c932-4e2e-ba0c-6ac1e72c160c",
              "parentUUID": "6f64b53f-1596-4b34-8b8c-17e4de4ac7dd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'\"",
              "fullTitle": "retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail' \"after all\" hook in \"retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "f35f0246-0cd3-4dee-b0f3-2877fed64451",
              "parentUUID": "6f64b53f-1596-4b34-8b8c-17e4de4ac7dd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instances thumbnail",
              "fullTitle": "retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail' Should retrieve study-series-instances thumbnail",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/thumbnail`,\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "e6d8119b-89de-4402-918e-a33d8087a432",
              "parentUUID": "6f64b53f-1596-4b34-8b8c-17e4de4ac7dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study-series-instances not exist",
              "fullTitle": "retrieve study-series-instances thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail' Should raise 404 when study-series-instances not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}2486/thumbnail`,\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "f8bd15ca-e195-4150-926e-5b8186065c37",
              "parentUUID": "6f64b53f-1596-4b34-8b8c-17e4de4ac7dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e6d8119b-89de-4402-918e-a33d8087a432",
            "f8bd15ca-e195-4150-926e-5b8186065c37"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "0579a85a-b513-486d-88cf-5a6396211b1c",
          "title": "retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudySeriesThumbnail.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudySeriesThumbnail.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'\"",
              "fullTitle": "retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail' \"before all\" hook in \"retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'\"",
              "timedOut": false,
              "duration": 1659,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "89ba9ce7-ebc9-4fc0-8dea-31db5fbfcf65",
              "parentUUID": "0579a85a-b513-486d-88cf-5a6396211b1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'\"",
              "fullTitle": "retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail' \"after all\" hook in \"retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "285f75d0-f506-4696-88b0-4f8a013d8e77",
              "parentUUID": "0579a85a-b513-486d-88cf-5a6396211b1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series thumbnail",
              "fullTitle": "retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail' Should retrieve study-series thumbnail",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/thumbnail`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "df4520f1-037e-4d11-893b-059de3d56995",
              "parentUUID": "0579a85a-b513-486d-88cf-5a6396211b1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study-series not exist",
              "fullTitle": "retrieve study-series thumbnail '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail' Should raise 404 when study-series not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}2486/thumbnail`\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "934ccf13-d442-4443-ad4c-990ec0b19607",
              "parentUUID": "0579a85a-b513-486d-88cf-5a6396211b1c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df4520f1-037e-4d11-893b-059de3d56995",
            "934ccf13-d442-4443-ad4c-990ec0b19607"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "58c473b6-4b89-499b-a306-10612ccba600",
          "title": "retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudyThumbnail.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\thumbnail\\retrieveStudyThumbnail.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail'\"",
              "fullTitle": "retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail' \"before all\" hook in \"retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail'\"",
              "timedOut": false,
              "duration": 1876,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "5ecbeba1-a5e2-44c1-b0a8-6f9331a5735e",
              "parentUUID": "58c473b6-4b89-499b-a306-10612ccba600",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail'\"",
              "fullTitle": "retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail' \"after all\" hook in \"retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail'\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "e1bd29af-d70a-4b73-8d2b-9c1780ebaad6",
              "parentUUID": "58c473b6-4b89-499b-a306-10612ccba600",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study thumbnail",
              "fullTitle": "retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail' Should retrieve study thumbnail",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/thumbnail`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "af786b0d-0787-4643-ad50-71bbccfefbfd",
              "parentUUID": "58c473b6-4b89-499b-a306-10612ccba600",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 when study not exist",
              "fullTitle": "retrieve study thumbnail '/dicom-web/studies/:studyUID/thumbnail' Should raise 404 when study not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}1268/thumbnail`\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "1711ef6f-0e4a-46be-ab71-328ea6f4231b",
              "parentUUID": "58c473b6-4b89-499b-a306-10612ccba600",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "af786b0d-0787-4643-ad50-71bbccfefbfd",
            "1711ef6f-0e4a-46be-ab71-328ea6f4231b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "d69797bf-14a3-4e76-bd8b-5a0de9596940",
          "title": "retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\bulkdata\\retrieveStudyBulkdataWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\bulkdata\\retrieveStudyBulkdataWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' with user\"",
              "fullTitle": "retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' with user \"before all\" hook in \"retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' with user\"",
              "timedOut": false,
              "duration": 1792,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nconst testDicomFile = resolve(__dirname, \"../../../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\");\nawait storeInstanceWithUserForTest(testDicomFile, TEST_USERS[0]);",
              "err": {},
              "uuid": "daa4baf3-5e85-4c6a-ad79-a1b18db8b76b",
              "parentUUID": "d69797bf-14a3-4e76-bd8b-5a0de9596940",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' with user\"",
              "fullTitle": "retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' with user \"after all\" hook in \"retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' with user\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "8bf0cae2-830c-4575-b0ae-23bcdf8a1dcc",
              "parentUUID": "d69797bf-14a3-4e76-bd8b-5a0de9596940",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study bulkdata with user 'test'",
              "fullTitle": "retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' with user Should retrieve study bulkdata with user 'test'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/bulkdata`,\n    user: TEST_USERS[0],\n    headers: {\n        \"host\": \"localhost:8080\"\n    },\n    params: {\n        studyUID: STUDY_UID\n    },\n    bulkDataFactoryType: StudyBulkDataFactory,\n    imagePathFactoryType: StudyImagePathFactory\n});\nlet response = createResponse();\nlet controller = new BaseBulkDataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\nlet data = response._getChunks();\nexpect(data).is.an(\"array\");\nexpect(data.length).to.greaterThan(1);",
              "err": {},
              "uuid": "f138fdf2-aeda-45d2-88a3-c4f57c20ca14",
              "parentUUID": "d69797bf-14a3-4e76-bd8b-5a0de9596940",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not retrieve study bulkdata with user 'oTest'",
              "fullTitle": "retrieve study bulkdata '/dicom-web/studies/:studyUID/bulkdata' with user Should not retrieve study bulkdata with user 'oTest'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/bulkdata`,\n    user: TEST_USERS[2],\n    headers: {\n        \"host\": \"localhost:8080\"\n    },\n    params: {\n        studyUID: STUDY_UID\n    },\n    bulkDataFactoryType: StudyBulkDataFactory,\n    imagePathFactoryType: StudyImagePathFactory\n});\nlet response = createResponse();\nlet controller = new BaseBulkDataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "f795cda6-ac49-449a-b765-c861fabf7a3c",
              "parentUUID": "d69797bf-14a3-4e76-bd8b-5a0de9596940",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f138fdf2-aeda-45d2-88a3-c4f57c20ca14",
            "f795cda6-ac49-449a-b765-c861fabf7a3c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "f1ff8db6-786d-4482-b21b-cbd9f4f8260d",
          "title": "retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\bulkdata\\retrieveStudySeriesBulkdataWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\bulkdata\\retrieveStudySeriesBulkdataWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' with user\"",
              "fullTitle": "retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' with user \"before all\" hook in \"retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' with user\"",
              "timedOut": false,
              "duration": 1772,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nconst testDicomFile = resolve(__dirname, \"../../../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\");\nawait storeInstanceWithUserForTest(testDicomFile, TEST_USERS[0]);",
              "err": {},
              "uuid": "cd3c9156-7b5f-48ee-a51b-5d5a25b95047",
              "parentUUID": "f1ff8db6-786d-4482-b21b-cbd9f4f8260d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' with user\"",
              "fullTitle": "retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' with user \"after all\" hook in \"retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' with user\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "63a348f6-33a1-48b7-8f85-ba5cfa1d46da",
              "parentUUID": "f1ff8db6-786d-4482-b21b-cbd9f4f8260d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series bulkdata with user 'test'",
              "fullTitle": "retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' with user Should retrieve study-series bulkdata with user 'test'",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/bulkdata`,\n    user: TEST_USERS[0],\n    headers: {\n        \"host\": \"localhost:8080\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    },\n    bulkDataFactoryType: SeriesBulkDataFactory,\n    imagePathFactoryType: SeriesImagePathFactory\n});\nlet response = createResponse();\nlet controller = new BaseBulkDataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\nlet data = response._getChunks();\nexpect(data).is.an(\"array\");\nexpect(data.length).to.greaterThan(1);",
              "err": {},
              "uuid": "6a05c7e4-8d7c-43c8-959c-a9fba82aacd9",
              "parentUUID": "f1ff8db6-786d-4482-b21b-cbd9f4f8260d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not retrieve study-series bulkdata with user 'oTest'",
              "fullTitle": "retrieve study-series bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/bulkdata' with user Should not retrieve study-series bulkdata with user 'oTest'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/bulkdata`,\n    user: TEST_USERS[2],\n    headers: {\n        \"host\": \"localhost:8080\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    },\n    bulkDataFactoryType: SeriesBulkDataFactory,\n    imagePathFactoryType: SeriesImagePathFactory\n});\nlet response = createResponse();\nlet controller = new BaseBulkDataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "dd498084-9632-44ac-8c2e-6a89d6d86d4b",
              "parentUUID": "f1ff8db6-786d-4482-b21b-cbd9f4f8260d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6a05c7e4-8d7c-43c8-959c-a9fba82aacd9",
            "dd498084-9632-44ac-8c2e-6a89d6d86d4b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "4e66d542-86d6-4512-9b30-4e7686a81028",
          "title": "retrieve study-series-instance bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\bulkdata\\retrieveStudySeriesInstanceBulkdataWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\bulkdata\\retrieveStudySeriesInstanceBulkdataWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instance bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' with user\"",
              "fullTitle": "retrieve study-series-instance bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' with user \"before all\" hook in \"retrieve study-series-instance bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' with user\"",
              "timedOut": false,
              "duration": 2601,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nconst testDicomFile = resolve(__dirname, \"../../../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\");\nawait storeInstanceWithUserForTest(testDicomFile, TEST_USERS[0]);",
              "err": {},
              "uuid": "d054c65e-4d9f-41e8-826d-5bcc745d3ebd",
              "parentUUID": "4e66d542-86d6-4512-9b30-4e7686a81028",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series-instance bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' with user\"",
              "fullTitle": "retrieve study-series-instance bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' with user \"after all\" hook in \"retrieve study-series-instance bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' with user\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "5d010ad1-d685-4dee-b4a0-c269a9a74f1f",
              "parentUUID": "4e66d542-86d6-4512-9b30-4e7686a81028",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series bulkdata with user 'test'",
              "fullTitle": "retrieve study-series-instance bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' with user Should retrieve study-series bulkdata with user 'test'",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/bulkdata`,\n    user: TEST_USERS[0],\n    headers: {\n        \"host\": \"localhost:8080\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    },\n    bulkDataFactoryType: InstanceBulkDataFactory,\n    imagePathFactoryType: InstanceImagePathFactory\n});\nlet response = createResponse();\nlet controller = new BaseBulkDataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\nlet data = response._getChunks();\nexpect(data).is.an(\"array\");\nexpect(data.length).to.greaterThan(1);",
              "err": {},
              "uuid": "8358a4a1-9e80-42eb-9ad3-8277af28716c",
              "parentUUID": "4e66d542-86d6-4512-9b30-4e7686a81028",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not retrieve study-series-instance bulkdata with user 'oTest'",
              "fullTitle": "retrieve study-series-instance bulkdata '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/bulkdata' with user Should not retrieve study-series-instance bulkdata with user 'oTest'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/bulkdata`,\n    user: TEST_USERS[2],\n    headers: {\n        \"host\": \"localhost:8080\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    },\n    bulkDataFactoryType: InstanceBulkDataFactory,\n    imagePathFactoryType: InstanceImagePathFactory\n});\nlet response = createResponse();\nlet controller = new BaseBulkDataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "c14b21b6-b0db-48e7-84ec-0cc406a1c954",
              "parentUUID": "4e66d542-86d6-4512-9b30-4e7686a81028",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8358a4a1-9e80-42eb-9ad3-8277af28716c",
            "c14b21b6-b0db-48e7-84ec-0cc406a1c954"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "ebc23069-39f2-4bb6-9842-f6afd7896873",
          "title": "User: Series A, B, C: Delete A, Delete B, Recover A, Delete B Again",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\delete\\deleteAndUndoDeleteSeqWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\delete\\deleteAndUndoDeleteSeqWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User: Series A, B, C: Delete A, Delete B, Recover A, Delete B Again\"",
              "fullTitle": "User: Series A, B, C: Delete A, Delete B, Recover A, Delete B Again \"before all\" hook in \"User: Series A, B, C: Delete A, Delete B, Recover A, Delete B Again\"",
              "timedOut": false,
              "duration": 1316,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../../test/testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n    await storeInstanceWithUserForTest(file, TEST_USERS[2]);\n}",
              "err": {},
              "uuid": "445cbef7-bb83-4284-a273-235ce559f251",
              "parentUUID": "ebc23069-39f2-4bb6-9842-f6afd7896873",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Delete Series A",
              "fullTitle": "User: Series A, B, C: Delete A, Delete B, Recover A, Delete B Again Delete Series A",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await TestDeleteUtils.ByUser.deleteWithReasonBySeriesInstanceUid(STUDY_UID, SERIES_INSTANCE_UIDS[0], TEST_USERS[0]);\nlet queryRequest = createRequest({\n    url: `/dicom-web/series`,\n    method: \"GET\",\n    dicomLevel: \"series\",\n    user: TEST_USERS[0]\n});\nlet queryResponse = createResponse();\nlet controller = new BaseQueryController(queryRequest, queryResponse);\nawait controller.doPipeline();\nexpect(queryResponse.statusCode).to.equal(200);\nlet series = queryResponse._getJSONData();\nexpect(series.length).to.equal(2);",
              "err": {},
              "uuid": "66c4861f-3f1c-4761-a645-fa1a85e6061e",
              "parentUUID": "ebc23069-39f2-4bb6-9842-f6afd7896873",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete Series B",
              "fullTitle": "User: Series A, B, C: Delete A, Delete B, Recover A, Delete B Again Delete Series B",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await TestDeleteUtils.ByUser.deleteWithReasonBySeriesInstanceUid(STUDY_UID, SERIES_INSTANCE_UIDS[1], TEST_USERS[0]);\nlet queryRequest = createRequest({\n    url: `/dicom-web/series`,\n    method: \"GET\",\n    dicomLevel: \"series\",\n    user: TEST_USERS[0]\n});\nlet queryResponse = createResponse();\nlet controller = new BaseQueryController(queryRequest, queryResponse);\nawait controller.doPipeline();\nexpect(queryResponse.statusCode).to.equal(200);\nlet series = queryResponse._getJSONData();\nexpect(series.length).to.equal(1);",
              "err": {},
              "uuid": "3042861a-ec31-4838-ac0a-6eb27d110d0e",
              "parentUUID": "ebc23069-39f2-4bb6-9842-f6afd7896873",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Recover Series A",
              "fullTitle": "User: Series A, B, C: Delete A, Delete B, Recover A, Delete B Again Recover Series A",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await TestDeleteUtils.ByUser.undoDeleteBySeriesInstanceUid(STUDY_UID, SERIES_INSTANCE_UIDS[0], {}, TEST_USERS[0]);\nlet queryRequest = createRequest({\n    url: `/dicom-web/series`,\n    method: \"GET\",\n    dicomLevel: \"series\",\n    user: TEST_USERS[0]\n});\nlet queryResponse = createResponse();\nlet controller = new BaseQueryController(queryRequest, queryResponse);\nawait controller.doPipeline();\nexpect(queryResponse.statusCode).to.equal(200);\nlet series = queryResponse._getJSONData();\nexpect(series.length).to.equal(2);",
              "err": {},
              "uuid": "29089332-7dc7-452f-8bf2-61cfa76967fb",
              "parentUUID": "ebc23069-39f2-4bb6-9842-f6afd7896873",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete Series B Again",
              "fullTitle": "User: Series A, B, C: Delete A, Delete B, Recover A, Delete B Again Delete Series B Again",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await TestDeleteUtils.ByUser.deleteBySeriesInstanceUid(STUDY_UID, SERIES_INSTANCE_UIDS[1], {}, TEST_USERS[0]);\nlet queryRequest = createRequest({\n    url: `/dicom-web/series`,\n    method: \"GET\",\n    dicomLevel: \"series\",\n    user: TEST_USERS[0],\n    query: {\n        deleteStatus: 2\n    }\n});\nlet queryResponse = createResponse();\nlet controller = new BaseQueryController(queryRequest, queryResponse);\nawait controller.doPipeline();\nexpect(queryResponse.statusCode).to.equal(200);\nlet series = queryResponse._getJSONData();\nexpect(series.length).to.equal(1);",
              "err": {},
              "uuid": "78ab0568-b93e-4c64-84e0-e33ebeb9f2a0",
              "parentUUID": "ebc23069-39f2-4bb6-9842-f6afd7896873",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "66c4861f-3f1c-4761-a645-fa1a85e6061e",
            "3042861a-ec31-4838-ac0a-6eb27d110d0e",
            "29089332-7dc7-452f-8bf2-61cfa76967fb",
            "78ab0568-b93e-4c64-84e0-e33ebeb9f2a0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 73,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "5374e6d5-3e6b-4731-a585-5caf376f97d9",
          "title": "Delete study-series-instance by user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\delete\\deleteStudySeriesInstanceWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\delete\\deleteStudySeriesInstanceWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete study-series-instance by user\"",
              "fullTitle": "Delete study-series-instance by user \"before all\" hook in \"Delete study-series-instance by user\"",
              "timedOut": false,
              "duration": 1277,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../../test/testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n    await storeInstanceWithUserForTest(file, TEST_USERS[2]);\n}\n// delete test study-series-instance with reason\nlet request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/delete-with-reason`,\n    method: \"POST\",\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    },\n    body: {\n        reason: \"test\"\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"instance\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new DeleteWithReasonController(request, response);\nawait controller.doPipeline();",
              "err": {},
              "uuid": "f43f7fb4-29bc-4d43-9f74-85640ab2a2a6",
              "parentUUID": "5374e6d5-3e6b-4731-a585-5caf376f97d9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete study-series-instance by user 'test'",
              "fullTitle": "Delete study-series-instance by user should delete study-series-instance by user 'test'",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}`,\n    method: \"DELETE\",\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"instance\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new BaseDeleteController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\nlet queryRequest = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances`,\n    method: \"GET\",\n    query: {\n        SOPInstanceUID: INSTANCE_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"instance\",\n    user: TEST_USERS[0]\n});\nlet queryResponse = createResponse();\nlet queryController = new BaseQueryController(queryRequest, queryResponse);\nawait queryController.doPipeline();\nexpect(queryResponse.statusCode).to.equal(204);",
              "err": {},
              "uuid": "fd562b86-0a44-4bf4-b294-185c1720f86d",
              "parentUUID": "5374e6d5-3e6b-4731-a585-5caf376f97d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have study when search with user 'test' and use params deleteStatus",
              "fullTitle": "Delete study-series-instance by user should have study when search with user 'test' and use params deleteStatus",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances`,\n    method: \"GET\",\n    query: {\n        SOPInstanceUID: INSTANCE_UID,\n        deleteStatus: 2\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"instance\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "db0d39e8-f98a-4a5c-8e2b-565395c85e20",
              "parentUUID": "5374e6d5-3e6b-4731-a585-5caf376f97d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have study when search with user 'oTest'",
              "fullTitle": "Delete study-series-instance by user should have study when search with user 'oTest'",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances`,\n    method: \"GET\",\n    query: {\n        SOPInstanceUID: INSTANCE_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"instance\",\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "3f640c58-30a3-4556-ab11-6b59b0067208",
              "parentUUID": "5374e6d5-3e6b-4731-a585-5caf376f97d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd562b86-0a44-4bf4-b294-185c1720f86d",
            "db0d39e8-f98a-4a5c-8e2b-565395c85e20",
            "3f640c58-30a3-4556-ab11-6b59b0067208"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "1d7e2f2d-16ee-4285-a3c3-3e200b927248",
          "title": "Delete study-series by user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\delete\\deleteStudySeriesWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\delete\\deleteStudySeriesWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete study-series by user\"",
              "fullTitle": "Delete study-series by user \"before all\" hook in \"Delete study-series by user\"",
              "timedOut": false,
              "duration": 1309,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../../test/testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n    await storeInstanceWithUserForTest(file, TEST_USERS[2]);\n}\n// delete test study with reason\nlet request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/delete-with-reason`,\n    method: \"POST\",\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    },\n    body: {\n        reason: \"test\"\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"series\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new DeleteWithReasonController(request, response);\nawait controller.doPipeline();",
              "err": {},
              "uuid": "6d123530-8b2c-4edd-a7b7-6861a8112c92",
              "parentUUID": "1d7e2f2d-16ee-4285-a3c3-3e200b927248",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete study-series by user 'test'",
              "fullTitle": "Delete study-series by user should delete study-series by user 'test'",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}`,\n    method: \"DELETE\",\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"series\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new BaseDeleteController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\nlet queryRequest = createRequest({\n    url: `/dicom-web/studies`,\n    method: \"GET\",\n    query: {\n        SeriesInstanceUID: SERIES_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"series\",\n    user: TEST_USERS[0]\n});\nlet queryResponse = createResponse();\nlet queryController = new BaseQueryController(queryRequest, queryResponse);\nawait queryController.doPipeline();\nexpect(queryResponse.statusCode).to.equal(204);",
              "err": {},
              "uuid": "8851ddb3-c82c-4bcc-b56e-50bc94613a65",
              "parentUUID": "1d7e2f2d-16ee-4285-a3c3-3e200b927248",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have study when search with user 'test' and use params deleteStatus",
              "fullTitle": "Delete study-series by user should have study when search with user 'test' and use params deleteStatus",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies`,\n    method: \"GET\",\n    query: {\n        SeriesInstanceUID: SERIES_UID,\n        deleteStatus: 2\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"series\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "974c68ce-8ee8-43e2-a01f-be30f497d96b",
              "parentUUID": "1d7e2f2d-16ee-4285-a3c3-3e200b927248",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have study when search with user 'oTest'",
              "fullTitle": "Delete study-series by user should have study when search with user 'oTest'",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}`,\n    method: \"GET\",\n    query: {\n        SeriesInstanceUID: SERIES_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"series\",\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "ac9929bd-cf47-498f-8051-ef8ce8856bb7",
              "parentUUID": "1d7e2f2d-16ee-4285-a3c3-3e200b927248",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8851ddb3-c82c-4bcc-b56e-50bc94613a65",
            "974c68ce-8ee8-43e2-a01f-be30f497d96b",
            "ac9929bd-cf47-498f-8051-ef8ce8856bb7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "f58f1f68-4a72-463e-b62c-cf1149ecff67",
          "title": "Delete study by user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\delete\\deleteStudyWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\delete\\deleteStudyWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete study by user\"",
              "fullTitle": "Delete study by user \"before all\" hook in \"Delete study by user\"",
              "timedOut": false,
              "duration": 1431,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../../test/testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n    await storeInstanceWithUserForTest(file, TEST_USERS[2]);\n}\n// delete test study with reason\nlet request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/delete-with-reason`,\n    method: \"POST\",\n    params: {\n        studyUID: STUDY_UID\n    },\n    body: {\n        reason: \"test\"\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"study\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new DeleteWithReasonController(request, response);\nawait controller.doPipeline();",
              "err": {},
              "uuid": "417950b4-206e-4d17-a3cf-6b7d7f63e3a6",
              "parentUUID": "f58f1f68-4a72-463e-b62c-cf1149ecff67",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete study by user 'test'",
              "fullTitle": "Delete study by user should delete study by user 'test'",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}`,\n    method: \"DELETE\",\n    params: {\n        studyUID: STUDY_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"study\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new BaseDeleteController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\nlet queryRequest = createRequest({\n    url: `/dicom-web/studies`,\n    method: \"GET\",\n    query: {\n        StudyInstanceUID: STUDY_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"study\",\n    user: TEST_USERS[0]\n});\nlet queryResponse = createResponse();\nlet queryController = new BaseQueryController(queryRequest, queryResponse);\nawait queryController.doPipeline();\nexpect(queryResponse.statusCode).to.equal(204);",
              "err": {},
              "uuid": "e5a774a2-2612-4a3d-b8e4-803d17898545",
              "parentUUID": "f58f1f68-4a72-463e-b62c-cf1149ecff67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have study when search with user 'test' and use params deleteStatus",
              "fullTitle": "Delete study by user should have study when search with user 'test' and use params deleteStatus",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies`,\n    method: \"GET\",\n    query: {\n        StudyInstanceUID: STUDY_UID,\n        deleteStatus: 2\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"study\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "679268ef-7929-423f-b526-4508c29a48d6",
              "parentUUID": "f58f1f68-4a72-463e-b62c-cf1149ecff67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have study when search with user 'oTest'",
              "fullTitle": "Delete study by user should have study when search with user 'oTest'",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies`,\n    method: \"GET\",\n    query: {\n        StudyInstanceUID: STUDY_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"study\",\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "bf7844f8-2f67-4cbd-a586-a1fa7a22eb4e",
              "parentUUID": "f58f1f68-4a72-463e-b62c-cf1149ecff67",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e5a774a2-2612-4a3d-b8e4-803d17898545",
            "679268ef-7929-423f-b526-4508c29a48d6",
            "bf7844f8-2f67-4cbd-a586-a1fa7a22eb4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "d4a7f47c-6bc7-46ed-babd-fb8e0ec7139c",
          "title": "Delete study-series-instance with reason by user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\deleteWithReason\\deleteStudySeriesInstanceWithReansonAndUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\deleteWithReason\\deleteStudySeriesInstanceWithReansonAndUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete study-series-instance with reason by user\"",
              "fullTitle": "Delete study-series-instance with reason by user \"before all\" hook in \"Delete study-series-instance with reason by user\"",
              "timedOut": false,
              "duration": 1402,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../../test/testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n    await storeInstanceWithUserForTest(file, TEST_USERS[2]);\n}",
              "err": {},
              "uuid": "e27baa32-be40-4e4d-8656-57854ee0854d",
              "parentUUID": "d4a7f47c-6bc7-46ed-babd-fb8e0ec7139c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete study-series-instance with reason by user 'test'",
              "fullTitle": "Delete study-series-instance with reason by user should delete study-series-instance with reason by user 'test'",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/delete-with-reason`,\n    method: \"POST\",\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    },\n    body: {\n        reason: \"test\"\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"instance\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new DeleteWithReasonController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\nlet queryRequest = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances`,\n    method: \"GET\",\n    query: {\n        SOPInstanceUID: INSTANCE_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"instance\",\n    user: TEST_USERS[0]\n});\nlet queryResponse = createResponse();\nlet queryController = new BaseQueryController(queryRequest, queryResponse);\nawait queryController.doPipeline();\nexpect(queryResponse.statusCode).to.equal(204);",
              "err": {},
              "uuid": "2b5c43fe-23a0-4879-95dd-8010118f9b92",
              "parentUUID": "d4a7f47c-6bc7-46ed-babd-fb8e0ec7139c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have study-series-instance when search with user 'oTest'",
              "fullTitle": "Delete study-series-instance with reason by user should have study-series-instance when search with user 'oTest'",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances`,\n    method: \"GET\",\n    query: {\n        SOPInstanceUID: INSTANCE_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"instance\",\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "afad15e4-5653-4d8a-a7bc-a52fbcda113c",
              "parentUUID": "d4a7f47c-6bc7-46ed-babd-fb8e0ec7139c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b5c43fe-23a0-4879-95dd-8010118f9b92",
            "afad15e4-5653-4d8a-a7bc-a52fbcda113c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "89c0c003-9675-4b66-b5cb-8e620ff5b874",
          "title": "Delete study-series with reason by user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\deleteWithReason\\deleteStudySeriesWithReansonAndUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\deleteWithReason\\deleteStudySeriesWithReansonAndUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete study-series with reason by user\"",
              "fullTitle": "Delete study-series with reason by user \"before all\" hook in \"Delete study-series with reason by user\"",
              "timedOut": false,
              "duration": 1325,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../../test/testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n    await storeInstanceWithUserForTest(file, TEST_USERS[2]);\n}",
              "err": {},
              "uuid": "235023ba-a2d9-44f5-8c55-77dc1f601d79",
              "parentUUID": "89c0c003-9675-4b66-b5cb-8e620ff5b874",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete study-series with reason by user 'test'",
              "fullTitle": "Delete study-series with reason by user should delete study-series with reason by user 'test'",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/delete-with-reason`,\n    method: \"POST\",\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    },\n    body: {\n        reason: \"test\"\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"series\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new DeleteWithReasonController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\nlet queryRequest = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series`,\n    method: \"GET\",\n    query: {\n        SeriesInstanceUID: SERIES_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"series\",\n    user: TEST_USERS[0]\n});\nlet queryResponse = createResponse();\nlet queryController = new BaseQueryController(queryRequest, queryResponse);\nawait queryController.doPipeline();\nexpect(queryResponse.statusCode).to.equal(204);",
              "err": {},
              "uuid": "51f4ce86-3a09-4734-84f8-5f8e818b2ce9",
              "parentUUID": "89c0c003-9675-4b66-b5cb-8e620ff5b874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have study-series when search with user 'oTest'",
              "fullTitle": "Delete study-series with reason by user should have study-series when search with user 'oTest'",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/series`,\n    method: \"GET\",\n    query: {\n        SeriesInstanceUID: SERIES_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"series\",\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "9e1d913d-60e8-41bf-866b-1b96142b4992",
              "parentUUID": "89c0c003-9675-4b66-b5cb-8e620ff5b874",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "51f4ce86-3a09-4734-84f8-5f8e818b2ce9",
            "9e1d913d-60e8-41bf-866b-1b96142b4992"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "fb52cf38-71c1-4634-b448-0ca68672e4c2",
          "title": "Delete Study with reason by user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\deleteWithReason\\deleteStudyWithReansonAndUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\deleteWithReason\\deleteStudyWithReansonAndUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete Study with reason by user\"",
              "fullTitle": "Delete Study with reason by user \"before all\" hook in \"Delete Study with reason by user\"",
              "timedOut": false,
              "duration": 1351,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../../test/testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n    await storeInstanceWithUserForTest(file, TEST_USERS[2]);\n}",
              "err": {},
              "uuid": "f59aa811-233f-4c64-9554-31327d0e26c6",
              "parentUUID": "fb52cf38-71c1-4634-b448-0ca68672e4c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete study with reason by user 'test'",
              "fullTitle": "Delete Study with reason by user should delete study with reason by user 'test'",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/delete-with-reason`,\n    method: \"POST\",\n    params: {\n        studyUID: STUDY_UID\n    },\n    body: {\n        reason: \"test\"\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"study\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new DeleteWithReasonController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\nlet queryRequest = createRequest({\n    url: `/dicom-web/studies`,\n    method: \"GET\",\n    query: {\n        StudyInstanceUID: STUDY_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"study\",\n    user: TEST_USERS[0]\n});\nlet queryResponse = createResponse();\nlet queryController = new BaseQueryController(queryRequest, queryResponse);\nawait queryController.doPipeline();\nexpect(queryResponse.statusCode).to.equal(204);",
              "err": {},
              "uuid": "407f5bd7-99e2-47f6-97cc-188f1a652536",
              "parentUUID": "fb52cf38-71c1-4634-b448-0ca68672e4c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have study when search with user 'oTest'",
              "fullTitle": "Delete Study with reason by user should have study when search with user 'oTest'",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/studies`,\n    method: \"GET\",\n    query: {\n        StudyInstanceUID: STUDY_UID\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"study\",\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nlet controller = new BaseQueryController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "8072360b-f703-4b7e-a0ec-1040ca3f9be7",
              "parentUUID": "fb52cf38-71c1-4634-b448-0ca68672e4c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "407f5bd7-99e2-47f6-97cc-188f1a652536",
            "8072360b-f703-4b7e-a0ec-1040ca3f9be7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "a1531163-760a-4e77-965b-6f1d2eb0f4aa",
          "title": "WADO-RS get delete reason with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\deleteWithReason\\getDeleteReasonWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\deleteWithReason\\getDeleteReasonWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"WADO-RS get delete reason with user\"",
              "fullTitle": "WADO-RS get delete reason with user \"before all\" hook in \"WADO-RS get delete reason with user\"",
              "timedOut": false,
              "duration": 1390,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor(let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../../test/testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n    await storeInstanceWithUserForTest(file, TEST_USERS[2]);\n}\nlet request = createRequest({\n    url: `/dicom-web/studies/${STUDY_UID}/delete-with-reason`,\n    method: \"POST\",\n    params: {\n        studyUID: STUDY_UID\n    },\n    body: {\n        reason: \"test\"\n    },\n    headers: {\n        host: \"localhost:8080\"\n    },\n    dicomLevel: \"study\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nlet controller = new DeleteWithReasonController(request, response);\nawait controller.doPipeline();",
              "err": {},
              "uuid": "b2de1bf3-510d-4ea1-a576-d421978cccca",
              "parentUUID": "a1531163-760a-4e77-965b-6f1d2eb0f4aa",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get delete reason with user 'test'",
              "fullTitle": "WADO-RS get delete reason with user should get delete reason with user 'test'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/delete-reason/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    params: {\n        uid: STUDY_UID\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait GetDeleteReasonController(request, response);\nexpect(response.statusCode).to.equal(200);\nexpect(response._getJSONData()).to.have.property(\"reason\").to.equal(\"test\");",
              "err": {},
              "uuid": "54bc3486-b2e2-455f-ab71-52f5cbc855f6",
              "parentUUID": "a1531163-760a-4e77-965b-6f1d2eb0f4aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not get delete reason with user 'oTest'",
              "fullTitle": "WADO-RS get delete reason with user should not get delete reason with user 'oTest'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    url: `/dicom-web/delete-reason/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    params: {\n        uid: STUDY_UID\n    },\n    user: TEST_USERS[1]\n});\nlet response = createResponse();\nawait GetDeleteReasonController(request, response);\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "2ab16790-b3be-4e20-9a7f-643c0b116069",
              "parentUUID": "a1531163-760a-4e77-965b-6f1d2eb0f4aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "54bc3486-b2e2-455f-ab71-52f5cbc855f6",
            "2ab16790-b3be-4e20-9a7f-643c0b116069"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "57ffb3c3-86aa-4f3d-80f6-e9f1e0a0d15e",
          "title": "retrieve study metadata with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\metadata\\retrieveStudyMetadataWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\metadata\\retrieveStudyMetadataWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study metadata with user\"",
              "fullTitle": "retrieve study metadata with user \"before all\" hook in \"retrieve study metadata with user\"",
              "timedOut": false,
              "duration": 724,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../../test/testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "050ca985-c6ca-4d0d-84dc-60018e0da764",
              "parentUUID": "57ffb3c3-86aa-4f3d-80f6-e9f1e0a0d15e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve study with 11 instances' metadata with user 'test'",
              "fullTitle": "retrieve study metadata with user Should retrieve study with 11 instances' metadata with user 'test'",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/metadata`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID\n    }\n});\nrequest.imagePathFactory = StudyImagePathFactory;\nrequest.user = TEST_USERS[0];\nlet response = createResponse();\nlet controller = new BaseRetrieveMetadataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\n\nlet data = response._getJSONData();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(11);",
              "err": {},
              "uuid": "80e6d8fb-1cb6-4148-9bac-de68f59c9685",
              "parentUUID": "57ffb3c3-86aa-4f3d-80f6-e9f1e0a0d15e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study with 11 instances' metadata with user 'test2'",
              "fullTitle": "retrieve study metadata with user Should retrieve study with 11 instances' metadata with user 'test2'",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/metadata`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID\n    }\n});\nrequest.imagePathFactory = StudyImagePathFactory;\nrequest.user = TEST_USERS[1];\nlet response = createResponse();\nlet controller = new BaseRetrieveMetadataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\n\nlet data = response._getJSONData();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(11);",
              "err": {},
              "uuid": "de7fc871-5fae-4017-899d-c384057ad302",
              "parentUUID": "57ffb3c3-86aa-4f3d-80f6-e9f1e0a0d15e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest'",
              "fullTitle": "retrieve study metadata with user Should return 404 with user 'oTest'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/metadata`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID\n    }\n});\nrequest.imagePathFactory = StudyImagePathFactory;\nrequest.user = TEST_USERS[2];\nlet response = createResponse();\nlet controller = new BaseRetrieveMetadataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "74153c5a-9890-4e0f-9d3a-aea7214c0b2b",
              "parentUUID": "57ffb3c3-86aa-4f3d-80f6-e9f1e0a0d15e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "80e6d8fb-1cb6-4148-9bac-de68f59c9685",
            "de7fc871-5fae-4017-899d-c384057ad302",
            "74153c5a-9890-4e0f-9d3a-aea7214c0b2b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "28414b4a-88af-4293-8b53-074528075d3d",
          "title": "retrieve study-series-instance metadata with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\metadata\\retrieveStudySeriesInstanceMetadataWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\metadata\\retrieveStudySeriesInstanceMetadataWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instance metadata with user\"",
              "fullTitle": "retrieve study-series-instance metadata with user \"before all\" hook in \"retrieve study-series-instance metadata with user\"",
              "timedOut": false,
              "duration": 695,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../../test/testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "07e0287e-6745-44ee-a8e6-4f48e8e26f87",
              "parentUUID": "28414b4a-88af-4293-8b53-074528075d3d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve study-series-instance metadata with user 'test'",
              "fullTitle": "retrieve study-series-instance metadata with user Should retrieve study-series-instance metadata with user 'test'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/metadata`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    }\n});\nrequest.imagePathFactory = InstanceImagePathFactory;\nrequest.user = TEST_USERS[0];\nlet response = createResponse();\nlet controller = new BaseRetrieveMetadataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\n\nlet data = response._getJSONData();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(1);",
              "err": {},
              "uuid": "3c5e53e4-5732-462c-9389-d2e1868a1472",
              "parentUUID": "28414b4a-88af-4293-8b53-074528075d3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study-series-instance metadata with user 'test2'",
              "fullTitle": "retrieve study-series-instance metadata with user Should retrieve study-series-instance metadata with user 'test2'",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/metadata`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    }\n});\nrequest.imagePathFactory = InstanceImagePathFactory;\nrequest.user = TEST_USERS[1];\nlet response = createResponse();\nlet controller = new BaseRetrieveMetadataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\n\nlet data = response._getJSONData();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(1);",
              "err": {},
              "uuid": "2de1df9a-1da1-4466-8ada-3a214785f2e7",
              "parentUUID": "28414b4a-88af-4293-8b53-074528075d3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest'",
              "fullTitle": "retrieve study-series-instance metadata with user Should return 404 with user 'oTest'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/metadata`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    }\n});\nrequest.imagePathFactory = InstanceImagePathFactory;\nrequest.user = TEST_USERS[2];\nlet response = createResponse();\nlet controller = new BaseRetrieveMetadataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "58e757cf-1be9-48bf-a10d-b75ae78052f3",
              "parentUUID": "28414b4a-88af-4293-8b53-074528075d3d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3c5e53e4-5732-462c-9389-d2e1868a1472",
            "2de1df9a-1da1-4466-8ada-3a214785f2e7",
            "58e757cf-1be9-48bf-a10d-b75ae78052f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "6b4cf91e-5160-4021-a714-3c87663bda01",
          "title": "retrieve study-series metadata with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\metadata\\retrieveStudySeriesMetadataWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\metadata\\retrieveStudySeriesMetadataWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series metadata with user\"",
              "fullTitle": "retrieve study-series metadata with user \"before all\" hook in \"retrieve study-series metadata with user\"",
              "timedOut": false,
              "duration": 644,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../../test/testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "5ab524e3-7f03-4a6c-8ebf-c6fd3e6f1395",
              "parentUUID": "6b4cf91e-5160-4021-a714-3c87663bda01",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve study-series with 5 instances' metadata with user 'test'",
              "fullTitle": "retrieve study-series metadata with user Should retrieve study-series with 5 instances' metadata with user 'test'",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/metadata`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    }\n});\nrequest.imagePathFactory = SeriesImagePathFactory;\nrequest.user = TEST_USERS[0];\nlet response = createResponse();\nlet controller = new BaseRetrieveMetadataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\n\nlet data = response._getJSONData();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(5);",
              "err": {},
              "uuid": "4e8585e7-cd63-448a-8ce6-3daa83714215",
              "parentUUID": "6b4cf91e-5160-4021-a714-3c87663bda01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study-series with 5 instances' metadata with user 'test2'",
              "fullTitle": "retrieve study-series metadata with user Should retrieve study-series with 5 instances' metadata with user 'test2'",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/metadata`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    }\n});\nrequest.imagePathFactory = SeriesImagePathFactory;\nrequest.user = TEST_USERS[1];\nlet response = createResponse();\nlet controller = new BaseRetrieveMetadataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\n\nlet data = response._getJSONData();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(5);",
              "err": {},
              "uuid": "0e555097-720b-41c4-b775-0e82af8a061f",
              "parentUUID": "6b4cf91e-5160-4021-a714-3c87663bda01",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest'",
              "fullTitle": "retrieve study-series metadata with user Should return 404 with user 'oTest'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/metadata`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    }\n});\nrequest.imagePathFactory = SeriesImagePathFactory;\nrequest.user = TEST_USERS[2];\nlet response = createResponse();\nlet controller = new BaseRetrieveMetadataController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "adabe1dc-e478-46e8-96c8-ca97c5717ef8",
              "parentUUID": "6b4cf91e-5160-4021-a714-3c87663bda01",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e8585e7-cd63-448a-8ce6-3daa83714215",
            "0e555097-720b-41c4-b775-0e82af8a061f",
            "adabe1dc-e478-46e8-96c8-ca97c5717ef8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "dea4bc2c-5274-494c-86c8-7e0eb88608db",
          "title": "retrieve rendered frames of study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\rendered\\retrieveRenderedStudySeriesInstancesFramesWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\rendered\\retrieveRenderedStudySeriesInstancesFramesWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve rendered frames of study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'\"",
              "fullTitle": "retrieve rendered frames of study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' \"before all\" hook in \"retrieve rendered frames of study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'\"",
              "timedOut": false,
              "duration": 116,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nawait storeInstanceWithUserForTest(\n    resolve(__dirname, \"../../../../../../test/testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\"),\n    TEST_USERS[0]\n);",
              "err": {},
              "uuid": "1b2c9411-a712-4d2f-b385-464f6fc347ec",
              "parentUUID": "dea4bc2c-5274-494c-86c8-7e0eb88608db",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve rendered frames of study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'\"",
              "fullTitle": "retrieve rendered frames of study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' \"after all\" hook in \"retrieve rendered frames of study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered'\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "4c10fd47-1ada-4459-ae7c-e37fb0ca9401",
              "parentUUID": "dea4bc2c-5274-494c-86c8-7e0eb88608db",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instance's frame 1 with 1 rendered image",
              "fullTitle": "retrieve rendered frames of study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should retrieve study-series-instance's frame 1 with 1 rendered image",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered`,\n    user: TEST_USERS[0],\n    headers: {\n        accept: \"*/*\",\n        host: \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID,\n        frameNumber: [1]\n    },\n    imagePathFactory: InstanceImagePathFactory,\n    framesWriter: InstanceFramesListWriter\n});\nlet response = createResponse();\nlet controller = new BaseRetrieveRenderedController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\nlet data = response._getChunks();\nexpect(data.length).to.equal(1);",
              "err": {},
              "uuid": "b896f32b-541a-45e9-bb66-f1819cb8a78d",
              "parentUUID": "dea4bc2c-5274-494c-86c8-7e0eb88608db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest'",
              "fullTitle": "retrieve rendered frames of study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/frames/:frameNumber/rendered' Should return 404 with user 'oTest'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1/rendered`,\n    user: TEST_USERS[2],\n    headers: {\n        accept: \"*/*\",\n        host: \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID,\n        frameNumber: [1]\n    },\n    imagePathFactory: InstanceImagePathFactory,\n    framesWriter: InstanceFramesListWriter\n});\nlet response = createResponse();\nlet controller = new BaseRetrieveRenderedController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "b48ab31e-1499-49b9-85bf-b7cb55437d6a",
              "parentUUID": "dea4bc2c-5274-494c-86c8-7e0eb88608db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b896f32b-541a-45e9-bb66-f1819cb8a78d",
            "b48ab31e-1499-49b9-85bf-b7cb55437d6a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 53,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "31d91d97-7b72-4e18-b0cc-e6bd93a9f604",
          "title": "retrieve rendered study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\rendered\\retrieveRenderedStudySeriesInstanceWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\rendered\\retrieveRenderedStudySeriesInstanceWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve rendered study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'\"",
              "fullTitle": "retrieve rendered study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered' \"before all\" hook in \"retrieve rendered study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'\"",
              "timedOut": false,
              "duration": 115,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nawait storeInstanceWithUserForTest(\n    resolve(__dirname, \"../../../../../../test/testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\"),\n    TEST_USERS[0]\n);",
              "err": {},
              "uuid": "bacaac66-be77-43b6-838b-15237cdc5106",
              "parentUUID": "31d91d97-7b72-4e18-b0cc-e6bd93a9f604",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve rendered study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'\"",
              "fullTitle": "retrieve rendered study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered' \"after all\" hook in \"retrieve rendered study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered'\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "dfd6ddcd-840b-4f5d-a7c6-f22331149076",
              "parentUUID": "31d91d97-7b72-4e18-b0cc-e6bd93a9f604",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instance with 15 rendered images",
              "fullTitle": "retrieve rendered study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered' Should retrieve study-series-instance with 15 rendered images",
              "timedOut": false,
              "duration": 637,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/rendered`,\n    user: TEST_USERS[0],\n    headers: {\n        accept: \"*/*\",\n        host: \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    },\n    imagePathFactory: InstanceImagePathFactory,\n    framesWriter: InstanceFramesWriter\n});\nlet response = createResponse();\nlet controller = new BaseRetrieveRenderedController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\nlet data = response._getChunks();\nexpect(data.length).to.equal(15);",
              "err": {},
              "uuid": "02e310cd-c43d-4017-a12e-c96f29612dbf",
              "parentUUID": "31d91d97-7b72-4e18-b0cc-e6bd93a9f604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest'",
              "fullTitle": "retrieve rendered study-series-instance with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/rendered' Should return 404 with user 'oTest'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/rendered`,\n    user: TEST_USERS[2],\n    headers: {\n        accept: \"*/*\",\n        host: \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    },\n    imagePathFactory: InstanceImagePathFactory,\n    framesWriter: InstanceFramesWriter\n});\nlet response = createResponse();\nlet controller = new BaseRetrieveRenderedController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "68f4880e-f6ba-4e4f-ad51-077cc4ccc92a",
              "parentUUID": "31d91d97-7b72-4e18-b0cc-e6bd93a9f604",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02e310cd-c43d-4017-a12e-c96f29612dbf",
            "68f4880e-f6ba-4e4f-ad51-077cc4ccc92a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 639,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "f4585af7-dd63-4995-adb3-9fd68a3771d9",
          "title": "retrieve rendered study-series with user '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\rendered\\retrieveRenderedStudySeriesWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\rendered\\retrieveRenderedStudySeriesWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve rendered study-series with user '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'\"",
              "fullTitle": "retrieve rendered study-series with user '/dicom-web/studies/:studyUID/series/:seriesUID/rendered' \"before all\" hook in \"retrieve rendered study-series with user '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'\"",
              "timedOut": false,
              "duration": 120,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nawait storeInstanceWithUserForTest(\n    resolve(__dirname, \"../../../../../../test/testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\"),\n    TEST_USERS[0]\n);",
              "err": {},
              "uuid": "a8bb785e-063b-4473-bf8c-31e63af9cdb6",
              "parentUUID": "f4585af7-dd63-4995-adb3-9fd68a3771d9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve rendered study-series with user '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'\"",
              "fullTitle": "retrieve rendered study-series with user '/dicom-web/studies/:studyUID/series/:seriesUID/rendered' \"after all\" hook in \"retrieve rendered study-series with user '/dicom-web/studies/:studyUID/series/:seriesUID/rendered'\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "86468177-e081-450d-94b5-f19137f759d5",
              "parentUUID": "f4585af7-dd63-4995-adb3-9fd68a3771d9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series with 15 rendered images",
              "fullTitle": "retrieve rendered study-series with user '/dicom-web/studies/:studyUID/series/:seriesUID/rendered' Should retrieve study-series with 15 rendered images",
              "timedOut": false,
              "duration": 665,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/rendered`,\n    user: TEST_USERS[0],\n    headers: {\n        accept: \"*/*\",\n        host: \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    },\n    imagePathFactory: SeriesImagePathFactory,\n    framesWriter: SeriesFramesWriter\n});\nlet response = createResponse();\nlet controller = new BaseRetrieveRenderedController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\nlet data = response._getChunks();\nexpect(data.length).to.equal(15);",
              "err": {},
              "uuid": "bc6beee3-6672-43cf-a6af-4f2140ef7c37",
              "parentUUID": "f4585af7-dd63-4995-adb3-9fd68a3771d9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest'",
              "fullTitle": "retrieve rendered study-series with user '/dicom-web/studies/:studyUID/series/:seriesUID/rendered' Should return 404 with user 'oTest'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/rendered`,\n    user: TEST_USERS[2],\n    headers: {\n        accept: \"*/*\",\n        host: \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    },\n    imagePathFactory: SeriesImagePathFactory,\n    framesWriter: SeriesFramesWriter\n});\nlet response = createResponse();\nlet controller = new BaseRetrieveRenderedController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "1d414952-9170-418b-bfd2-397fb54f6d8f",
              "parentUUID": "f4585af7-dd63-4995-adb3-9fd68a3771d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bc6beee3-6672-43cf-a6af-4f2140ef7c37",
            "1d414952-9170-418b-bfd2-397fb54f6d8f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 667,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "1f332107-7631-4813-92a0-3d9f0884dd08",
          "title": "retrieve rendered study with user '/dicom-web/studies/:studyUID/rendered'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\rendered\\retrieveRenderedStudyWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\rendered\\retrieveRenderedStudyWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve rendered study with user '/dicom-web/studies/:studyUID/rendered'\"",
              "fullTitle": "retrieve rendered study with user '/dicom-web/studies/:studyUID/rendered' \"before all\" hook in \"retrieve rendered study with user '/dicom-web/studies/:studyUID/rendered'\"",
              "timedOut": false,
              "duration": 159,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nawait storeInstanceWithUserForTest(\n    resolve(__dirname, \"../../../../../../test/testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\"),\n    TEST_USERS[0]\n);",
              "err": {},
              "uuid": "8be3cfe0-ca82-45a1-b3e3-0b5ecabb3160",
              "parentUUID": "1f332107-7631-4813-92a0-3d9f0884dd08",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve rendered study with user '/dicom-web/studies/:studyUID/rendered'\"",
              "fullTitle": "retrieve rendered study with user '/dicom-web/studies/:studyUID/rendered' \"after all\" hook in \"retrieve rendered study with user '/dicom-web/studies/:studyUID/rendered'\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "ccd81dcc-bd8c-4958-82c1-43a00008cb71",
              "parentUUID": "1f332107-7631-4813-92a0-3d9f0884dd08",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study with 15 rendered images",
              "fullTitle": "retrieve rendered study with user '/dicom-web/studies/:studyUID/rendered' Should retrieve study with 15 rendered images",
              "timedOut": false,
              "duration": 610,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/rendered`,\n    user: TEST_USERS[0],\n    headers: {\n        accept: \"*/*\",\n        host: \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID\n    },\n    imagePathFactory: StudyImagePathFactory,\n    framesWriter: StudyFramesWriter\n});\nlet response = createResponse();\nlet controller = new BaseRetrieveRenderedController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\nlet data = response._getChunks();\nexpect(data.length).to.equal(15);",
              "err": {},
              "uuid": "0c72204b-2112-43c5-a6ac-1b1a6f5d78a0",
              "parentUUID": "1f332107-7631-4813-92a0-3d9f0884dd08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest'",
              "fullTitle": "retrieve rendered study with user '/dicom-web/studies/:studyUID/rendered' Should return 404 with user 'oTest'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/rendered`,\n    user: TEST_USERS[2],\n    headers: {\n        accept: \"*/*\",\n        host: \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID\n    },\n    imagePathFactory: StudyImagePathFactory,\n    framesWriter: StudyFramesWriter\n});\nlet response = createResponse();\nlet controller = new BaseRetrieveRenderedController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "3bba269a-0a0b-495b-b2ea-bbc854ba8094",
              "parentUUID": "1f332107-7631-4813-92a0-3d9f0884dd08",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0c72204b-2112-43c5-a6ac-1b1a6f5d78a0",
            "3bba269a-0a0b-495b-b2ea-bbc854ba8094"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 611,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "e4cefc5c-f32e-4172-bf64-84c876a05c9c",
          "title": "retrieve study-series-instances-frames with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\retrieveInstanceFramesWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\retrieveInstanceFramesWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances-frames with user\"",
              "fullTitle": "retrieve study-series-instances-frames with user \"before all\" hook in \"retrieve study-series-instances-frames with user\"",
              "timedOut": false,
              "duration": 115,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nconst testDicomFile = resolve(__dirname, \"../../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\");\nfor (const user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nawait storeInstanceWithUserForTest(testDicomFile, TEST_USERS[0]);",
              "err": {},
              "uuid": "15f59b4b-6721-44dd-8bd6-d50ef6e8b72e",
              "parentUUID": "e4cefc5c-f32e-4172-bf64-84c876a05c9c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve instance's frame 1 with user 'test'",
              "fullTitle": "retrieve study-series-instances-frames with user Should retrieve instance's frame 1 with user 'test'",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1`,\n    headers: {\n        accept: \"*/*\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID,\n        frameNumber: \"1\"\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse(request);\nawait RetrieveInstanceFramesController(request, response);\nexpect(response.statusCode).to.equal(200);\nlet data = response._getChunks();\nexpect(data.length).to.equal(1);",
              "err": {},
              "uuid": "d4f0fc0e-df83-4d9f-af6f-271ed74764d6",
              "parentUUID": "e4cefc5c-f32e-4172-bf64-84c876a05c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve instance's frame 1 with user 'oTest'",
              "fullTitle": "retrieve study-series-instances-frames with user Should retrieve instance's frame 1 with user 'oTest'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/frames/1`,\n    headers: {\n        accept: \"*/*\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID,\n        frameNumber: \"1\"\n    },\n    user: TEST_USERS[2]\n});\nlet response = createResponse(request);\nawait RetrieveInstanceFramesController(request, response);\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "2c746888-0056-46ce-a72d-3fa762f6dede",
              "parentUUID": "e4cefc5c-f32e-4172-bf64-84c876a05c9c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d4f0fc0e-df83-4d9f-af6f-271ed74764d6",
            "2c746888-0056-46ce-a72d-3fa762f6dede"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 33,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "7a8dac2e-bdd9-4fd2-b4a7-5de392c1af92",
          "title": "retrieve study-series-instance with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\retrieveStudySeriesInstanceWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\retrieveStudySeriesInstanceWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instance with user\"",
              "fullTitle": "retrieve study-series-instance with user \"before all\" hook in \"retrieve study-series-instance with user\"",
              "timedOut": false,
              "duration": 695,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../test/testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "eb1a46a2-9d8b-4d1f-81f0-65c150df7be9",
              "parentUUID": "7a8dac2e-bdd9-4fd2-b4a7-5de392c1af92",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve study-series-instance with user 'test'",
              "fullTitle": "retrieve study-series-instance with user Should retrieve study-series-instance with user 'test'",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    }\n});\nrequest.zipResponseHandlerType = InstanceZipResponseHandler;\nrequest.multipartResponseHandlerType = InstanceMultipartRelatedResponseHandler;\nrequest.user = TEST_USERS[0];\nlet response = createResponse();\nlet controller = new BaseRetrieveController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\n\nlet data = response._getChunks();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(1);",
              "err": {},
              "uuid": "3d99a8af-cd16-47f3-bae9-348d3b31c91d",
              "parentUUID": "7a8dac2e-bdd9-4fd2-b4a7-5de392c1af92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study-series-instance with user 'test2'",
              "fullTitle": "retrieve study-series-instance with user Should retrieve study-series-instance with user 'test2'",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    }\n});\nrequest.zipResponseHandlerType = InstanceZipResponseHandler;\nrequest.multipartResponseHandlerType = InstanceMultipartRelatedResponseHandler;\nrequest.user = TEST_USERS[1];\nlet response = createResponse();\nlet controller = new BaseRetrieveController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\n\nlet data = response._getChunks();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(1);",
              "err": {},
              "uuid": "43bddfb7-ffb6-4e64-960a-7e04a0412484",
              "parentUUID": "7a8dac2e-bdd9-4fd2-b4a7-5de392c1af92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest'",
              "fullTitle": "retrieve study-series-instance with user Should return 404 with user 'oTest'",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    }\n});\nrequest.zipResponseHandlerType = InstanceZipResponseHandler;\nrequest.multipartResponseHandlerType = InstanceMultipartRelatedResponseHandler;\nrequest.user = TEST_USERS[2];\nlet response = createResponse();\nlet controller = new BaseRetrieveController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "8b16984b-1fbb-47da-9abb-82e7cff8108b",
              "parentUUID": "7a8dac2e-bdd9-4fd2-b4a7-5de392c1af92",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3d99a8af-cd16-47f3-bae9-348d3b31c91d",
            "43bddfb7-ffb6-4e64-960a-7e04a0412484",
            "8b16984b-1fbb-47da-9abb-82e7cff8108b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 38,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "072397fa-7b7b-40ef-8867-3639a17a80f7",
          "title": "retrieve study-series with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\retrieveStudySeriesWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\retrieveStudySeriesWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series with user\"",
              "fullTitle": "retrieve study-series with user \"before all\" hook in \"retrieve study-series with user\"",
              "timedOut": false,
              "duration": 638,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../test/testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "a7589571-30f6-4965-91d1-2156c8f54fa2",
              "parentUUID": "072397fa-7b7b-40ef-8867-3639a17a80f7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve study-series with 5 instances with user 'test'",
              "fullTitle": "retrieve study-series with user Should retrieve study-series with 5 instances with user 'test'",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    }\n});\nrequest.zipResponseHandlerType = SeriesZipResponseHandler;\nrequest.multipartResponseHandlerType = SeriesMultipartRelatedResponseHandler;\nrequest.user = TEST_USERS[0];\nlet response = createResponse();\nlet controller = new BaseRetrieveController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\n\nlet data = response._getChunks();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(5);",
              "err": {},
              "uuid": "8c0c2166-105f-417a-afb4-cd1b583241d0",
              "parentUUID": "072397fa-7b7b-40ef-8867-3639a17a80f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study-series with 5 instances with user 'test2'",
              "fullTitle": "retrieve study-series with user Should retrieve study-series with 5 instances with user 'test2'",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    }\n});\nrequest.zipResponseHandlerType = SeriesZipResponseHandler;\nrequest.multipartResponseHandlerType = SeriesMultipartRelatedResponseHandler;\nrequest.user = TEST_USERS[1];\nlet response = createResponse();\nlet controller = new BaseRetrieveController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\n\nlet data = response._getChunks();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(5);",
              "err": {},
              "uuid": "588e044a-6d4d-4cde-a473-d733f3381a01",
              "parentUUID": "072397fa-7b7b-40ef-8867-3639a17a80f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest'",
              "fullTitle": "retrieve study-series with user Should return 404 with user 'oTest'",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    }\n});\nrequest.zipResponseHandlerType = SeriesZipResponseHandler;\nrequest.multipartResponseHandlerType = SeriesMultipartRelatedResponseHandler;\nrequest.user = TEST_USERS[2];\nlet response = createResponse();\nlet controller = new BaseRetrieveController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "80ff89b3-7c87-404e-9c4b-bfa8abe517f8",
              "parentUUID": "072397fa-7b7b-40ef-8867-3639a17a80f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8c0c2166-105f-417a-afb4-cd1b583241d0",
            "588e044a-6d4d-4cde-a473-d733f3381a01",
            "80ff89b3-7c87-404e-9c4b-bfa8abe517f8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 44,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "0cabcb63-36db-4c53-8313-7c6d43268f87",
          "title": "retrieve study with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\retrieveStudyWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\retrieveStudyWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study with user\"",
              "fullTitle": "retrieve study with user \"before all\" hook in \"retrieve study with user\"",
              "timedOut": false,
              "duration": 636,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../test/testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "6e4bc4f8-6fe7-4d20-9b8a-001a089c9098",
              "parentUUID": "0cabcb63-36db-4c53-8313-7c6d43268f87",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve study with 11 instances with user 'test'",
              "fullTitle": "retrieve study with user Should retrieve study with 11 instances with user 'test'",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID\n    }\n});\nrequest.zipResponseHandlerType = StudyZipResponseHandler;\nrequest.multipartResponseHandlerType = StudyMultipartRelatedResponseHandler;\nrequest.user = TEST_USERS[0];\nlet response = createResponse();\nlet controller = new BaseRetrieveController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\n\nlet data = response._getChunks();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(11);",
              "err": {},
              "uuid": "6f3938e0-0d63-49fa-9967-6826665d8c7d",
              "parentUUID": "0cabcb63-36db-4c53-8313-7c6d43268f87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve study with 11 instances with user 'test2'",
              "fullTitle": "retrieve study with user Should retrieve study with 11 instances with user 'test2'",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID\n    }\n});\nrequest.zipResponseHandlerType = StudyZipResponseHandler;\nrequest.multipartResponseHandlerType = StudyMultipartRelatedResponseHandler;\nrequest.user = TEST_USERS[1];\nlet response = createResponse();\nlet controller = new BaseRetrieveController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);\n\nlet data = response._getChunks();\nexpect(data).to.be.an(\"array\");\nexpect(data.length).to.equal(11);",
              "err": {},
              "uuid": "aa43cf5e-cbed-4d88-8031-55ea648d305d",
              "parentUUID": "0cabcb63-36db-4c53-8313-7c6d43268f87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest'",
              "fullTitle": "retrieve study with user Should return 404 with user 'oTest'",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}`,\n    headers: {\n        \"accept\": \"multipart/related; type=\\\"application/dicom\\\"\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID\n    }\n});\nrequest.zipResponseHandlerType = StudyZipResponseHandler;\nrequest.multipartResponseHandlerType = StudyMultipartRelatedResponseHandler;\nrequest.user = TEST_USERS[2];\nlet response = createResponse();\nlet controller = new BaseRetrieveController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "90ea9717-f39a-4f97-87e2-9988edfb5bfb",
              "parentUUID": "0cabcb63-36db-4c53-8313-7c6d43268f87",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6f3938e0-0d63-49fa-9967-6826665d8c7d",
            "aa43cf5e-cbed-4d88-8031-55ea648d305d",
            "90ea9717-f39a-4f97-87e2-9988edfb5bfb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 51,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "a95b86d6-9a22-4853-96c6-9ebb13de4c18",
          "title": "retrieve study-series-instance thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\thumbnail\\retrieveStudySeriesInstanceThumbnailWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\thumbnail\\retrieveStudySeriesInstanceThumbnailWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instance thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'\"",
              "fullTitle": "retrieve study-series-instance thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail' \"before all\" hook in \"retrieve study-series-instance thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'\"",
              "timedOut": false,
              "duration": 2474,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "8af06f63-39d4-4127-a042-6a296b8f6a43",
              "parentUUID": "a95b86d6-9a22-4853-96c6-9ebb13de4c18",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series-instance thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'\"",
              "fullTitle": "retrieve study-series-instance thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail' \"after all\" hook in \"retrieve study-series-instance thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail'\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "bda011eb-2503-437d-a909-a4fd7f88a935",
              "parentUUID": "a95b86d6-9a22-4853-96c6-9ebb13de4c18",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series-instance thumbnail with user 'test'",
              "fullTitle": "retrieve study-series-instance thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail' Should retrieve study-series-instance thumbnail with user 'test'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/instances/${INSTANCE_UID}/thumbnail`,\n    user: TEST_USERS[0],\n    headers: {\n        \"accept\": \"*/*\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    },\n    factory: InstanceThumbnailFactory\n});\nlet response = createResponse();\nlet controller = new BaseThumbnailController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "c7d93384-e19d-4bec-8a50-6d2440a21752",
              "parentUUID": "a95b86d6-9a22-4853-96c6-9ebb13de4c18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest'",
              "fullTitle": "retrieve study-series-instance thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/instances/:instanceUID/thumbnail' Should return 404 with user 'oTest'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}2486/instances/${INSTANCE_UID}2486/thumbnail`,\n    user: TEST_USERS[2],\n    headers: {\n        \"accept\": \"*/*\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID,\n        instanceUID: INSTANCE_UID\n    },\n    factory: InstanceThumbnailFactory\n});\nlet response = createResponse();\nlet controller = new BaseThumbnailController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "bd322506-884e-4397-b6dc-1e5b60bcb854",
              "parentUUID": "a95b86d6-9a22-4853-96c6-9ebb13de4c18",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c7d93384-e19d-4bec-8a50-6d2440a21752",
            "bd322506-884e-4397-b6dc-1e5b60bcb854"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "b0223ea9-7bfe-457c-9913-f76b1d6b7eda",
          "title": "retrieve study-series thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\thumbnail\\retrieveStudySeriesThumbnailWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\thumbnail\\retrieveStudySeriesThumbnailWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'\"",
              "fullTitle": "retrieve study-series thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail' \"before all\" hook in \"retrieve study-series thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'\"",
              "timedOut": false,
              "duration": 2360,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "a5f36c7e-a5ce-4a51-b002-18ee2536bcd5",
              "parentUUID": "b0223ea9-7bfe-457c-9913-f76b1d6b7eda",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'\"",
              "fullTitle": "retrieve study-series thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail' \"after all\" hook in \"retrieve study-series thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail'\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "50b5669c-8520-4c7e-8776-481edd2ba4d8",
              "parentUUID": "b0223ea9-7bfe-457c-9913-f76b1d6b7eda",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study-series thumbnail with user 'test'",
              "fullTitle": "retrieve study-series thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail' Should retrieve study-series thumbnail with user 'test'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}/thumbnail`,\n    user: TEST_USERS[0],\n    headers: {\n        \"accept\": \"*/*\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    },\n    factory: SeriesThumbnailFactory\n});\nlet response = createResponse();\nlet controller = new BaseThumbnailController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "e135074b-1c05-48aa-bbbc-33a0850c3725",
              "parentUUID": "b0223ea9-7bfe-457c-9913-f76b1d6b7eda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest'",
              "fullTitle": "retrieve study-series thumbnail with user '/dicom-web/studies/:studyUID/series/:seriesUID/thumbnail' Should return 404 with user 'oTest'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/series/${SERIES_UID}2486/thumbnail`,\n    user: TEST_USERS[2],\n    headers: {\n        \"accept\": \"*/*\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID,\n        seriesUID: SERIES_UID\n    },\n    factory: SeriesThumbnailFactory\n});\nlet response = createResponse();\nlet controller = new BaseThumbnailController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "46d0aae3-eceb-4ad6-b16d-e88140d74019",
              "parentUUID": "b0223ea9-7bfe-457c-9913-f76b1d6b7eda",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e135074b-1c05-48aa-bbbc-33a0850c3725",
            "46d0aae3-eceb-4ad6-b16d-e88140d74019"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "e41c8ff6-2951-44e9-b9bb-31e697096e24",
          "title": "retrieve study thumbnail with user '/dicom-web/studies/:studyUID/thumbnail'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-RS\\withUser\\thumbnail\\retrieveStudyThumbnailWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-RS\\withUser\\thumbnail\\retrieveStudyThumbnailWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study thumbnail with user '/dicom-web/studies/:studyUID/thumbnail'\"",
              "fullTitle": "retrieve study thumbnail with user '/dicom-web/studies/:studyUID/thumbnail' \"before all\" hook in \"retrieve study thumbnail with user '/dicom-web/studies/:studyUID/thumbnail'\"",
              "timedOut": false,
              "duration": 2535,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../../../testData/dicomFiles/C3N-00953\"),\n    absolute: true\n});\nfor (let file of testDicomFiles) {\n    await storeInstanceWithUserForTest(file, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "dc589a9b-385a-474a-b53e-3842c7358120",
              "parentUUID": "e41c8ff6-2951-44e9-b9bb-31e697096e24",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study thumbnail with user '/dicom-web/studies/:studyUID/thumbnail'\"",
              "fullTitle": "retrieve study thumbnail with user '/dicom-web/studies/:studyUID/thumbnail' \"after all\" hook in \"retrieve study thumbnail with user '/dicom-web/studies/:studyUID/thumbnail'\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "7e196606-68bc-4514-acb6-b81bb5511d2e",
              "parentUUID": "e41c8ff6-2951-44e9-b9bb-31e697096e24",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve study thumbnail with user 'test'",
              "fullTitle": "retrieve study thumbnail with user '/dicom-web/studies/:studyUID/thumbnail' Should retrieve study thumbnail with user 'test'",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/thumbnail`,\n    user: TEST_USERS[0],\n    headers: {\n        \"accept\": \"*/*\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID\n    },\n    factory: StudyThumbnailFactory\n});\nlet response = createResponse();\nlet controller = new BaseThumbnailController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "928f3337-62e1-4b05-a05c-145b709d8749",
              "parentUUID": "e41c8ff6-2951-44e9-b9bb-31e697096e24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest'",
              "fullTitle": "retrieve study thumbnail with user '/dicom-web/studies/:studyUID/thumbnail' Should return 404 with user 'oTest'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/dicom-web/studies/${STUDY_UID}/thumbnail`,\n    user: TEST_USERS[2],\n    headers: {\n        \"accept\": \"*/*\",\n        \"host\": \"localhost:3000\"\n    },\n    params: {\n        studyUID: STUDY_UID\n    },\n    factory: StudyThumbnailFactory\n});\nlet response = createResponse();\nlet controller = new BaseThumbnailController(request, response);\nawait controller.doPipeline();\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "342c2ec8-a4aa-42c9-a75e-2bd0ebed4629",
              "parentUUID": "e41c8ff6-2951-44e9-b9bb-31e697096e24",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "928f3337-62e1-4b05-a05c-145b709d8749",
            "342c2ec8-a4aa-42c9-a75e-2bd0ebed4629"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "cb1d6434-6519-4b74-b2cf-649bd7316cf0",
          "title": "retrieve study-series-instances using WADO-URI",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-URI\\retrieveInstanceWadoUri.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-URI\\retrieveInstanceWadoUri.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances using WADO-URI\"",
              "fullTitle": "retrieve study-series-instances using WADO-URI \"before all\" hook in \"retrieve study-series-instances using WADO-URI\"",
              "timedOut": false,
              "duration": 3726,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "3af5c04c-e785-4bc9-a098-220fce43bd50",
              "parentUUID": "cb1d6434-6519-4b74-b2cf-649bd7316cf0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"retrieve study-series-instances using WADO-URI\"",
              "fullTitle": "retrieve study-series-instances using WADO-URI \"after all\" hook in \"retrieve study-series-instances using WADO-URI\"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "5bdfbd26-e081-4016-8412-657392f7cee9",
              "parentUUID": "cb1d6434-6519-4b74-b2cf-649bd7316cf0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should retrieve DICOM instance",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&contentType=application/dicom`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "76bcec73-8fcc-4d07-a194-0237a79ca10b",
              "parentUUID": "cb1d6434-6519-4b74-b2cf-649bd7316cf0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance in JPEG",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance in JPEG",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&contentType=image/jpeg`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "8b435b6a-a136-4517-841f-505f97a6953c",
              "parentUUID": "cb1d6434-6519-4b74-b2cf-649bd7316cf0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance with frameNumber=1",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance with frameNumber=1",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "f6200790-97a2-41cf-96f2-5f041b9242ad",
              "parentUUID": "cb1d6434-6519-4b74-b2cf-649bd7316cf0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance with imageQuality=50",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance with imageQuality=50",
              "timedOut": false,
              "duration": 94,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "336ac2bc-e31a-4d7b-bcfd-1c8735df083f",
              "parentUUID": "cb1d6434-6519-4b74-b2cf-649bd7316cf0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance with region=0.1,0.1,1,1",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance with region=0.1,0.1,1,1",
              "timedOut": false,
              "duration": 93,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "97781c5b-3ed6-4667-9b10-bac79d2b0731",
              "parentUUID": "cb1d6434-6519-4b74-b2cf-649bd7316cf0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance with rows=500",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance with rows=500",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "7033f666-0a78-4f8f-9df8-cf91e5a32cc1",
              "parentUUID": "cb1d6434-6519-4b74-b2cf-649bd7316cf0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance with columns=500",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance with columns=500",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "93838258-ef0c-4817-971e-35015bd396c8",
              "parentUUID": "cb1d6434-6519-4b74-b2cf-649bd7316cf0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance with iccprofile=yes",
              "fullTitle": "retrieve study-series-instances using WADO-URI Should retrieve DICOM instance with iccprofile=yes",
              "timedOut": false,
              "duration": 104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&${param}=${value}`\n});\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "8135bfe6-03a2-4326-98b7-bd543ad0917f",
              "parentUUID": "cb1d6434-6519-4b74-b2cf-649bd7316cf0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5e617c4c-6715-4618-a05c-1ca687d01438",
              "title": "windowing",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-URI\\retrieveInstanceWadoUri.test.js",
              "file": "\\test\\api\\dicom-web\\WADO-URI\\retrieveInstanceWadoUri.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should retrieve instance with param windowing",
                  "fullTitle": "retrieve study-series-instances using WADO-URI windowing Should retrieve instance with param windowing",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&windowCenter=100&windowWidth=200`\n});\nexpect(response.statusCode).to.equal(200);",
                  "err": {},
                  "uuid": "d8a62ed3-aa35-4bde-8533-f0fe063f972c",
                  "parentUUID": "5e617c4c-6715-4618-a05c-1ca687d01438",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 400 when missing windowCenter",
                  "fullTitle": "retrieve study-series-instances using WADO-URI windowing Should raise 400 when missing windowCenter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&windowWidth=200`\n});\nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "3ea60236-d069-405d-996e-e0bd6eb26b05",
                  "parentUUID": "5e617c4c-6715-4618-a05c-1ca687d01438",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 400 when missing windowWidth",
                  "fullTitle": "retrieve study-series-instances using WADO-URI windowing Should raise 400 when missing windowWidth",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&windowCenter=200`\n});\nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "0e6b2400-5523-470e-857f-3800dbc366d1",
                  "parentUUID": "5e617c4c-6715-4618-a05c-1ca687d01438",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8a62ed3-aa35-4bde-8533-f0fe063f972c",
                "3ea60236-d069-405d-996e-e0bd6eb26b05",
                "0e6b2400-5523-470e-857f-3800dbc366d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 57,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            },
            {
              "uuid": "12a9af70-714b-4fd3-8a2b-a1029a412d85",
              "title": "param 'region' error cases",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-URI\\retrieveInstanceWadoUri.test.js",
              "file": "\\test\\api\\dicom-web\\WADO-URI\\retrieveInstanceWadoUri.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should raise 400 (Bad Request) when region is not have complete values",
                  "fullTitle": "retrieve study-series-instances using WADO-URI param 'region' error cases Should raise 400 (Bad Request) when region is not have complete values",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&region=0.1,0.1,1`\n});\n    \nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "2838e210-cd4c-4622-8459-ce9a6b6e7cac",
                  "parentUUID": "12a9af70-714b-4fd3-8a2b-a1029a412d85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 400 (Bad Request) when region is not between 0 and 1",
                  "fullTitle": "retrieve study-series-instances using WADO-URI param 'region' error cases Should raise 400 (Bad Request) when region is not between 0 and 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&region=0.1,0.1,1,100`\n});\n    \nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "5bcc4bc7-7aff-43c2-9e43-8ebded7bd86b",
                  "parentUUID": "12a9af70-714b-4fd3-8a2b-a1029a412d85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 400 (Bad Request) when xMin > xMax",
                  "fullTitle": "retrieve study-series-instances using WADO-URI param 'region' error cases Should raise 400 (Bad Request) when xMin > xMax",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&region=1,0.1,0.5,1`\n});\n    \nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "3b21635e-8b3a-449b-93d1-d44fd7eb93b6",
                  "parentUUID": "12a9af70-714b-4fd3-8a2b-a1029a412d85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Should raise 400 (Bad Request) when yMin > yMax",
                  "fullTitle": "retrieve study-series-instances using WADO-URI param 'region' error cases Should raise 400 (Bad Request) when yMin > yMax",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/wado?requestType=WADO&contentType=image/jpeg&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&region=0.1,1,1,0.5`\n});\n    \nexpect(response.statusCode).to.equal(400);",
                  "err": {},
                  "uuid": "f611a1d9-0118-4501-90ee-df334ce6621c",
                  "parentUUID": "12a9af70-714b-4fd3-8a2b-a1029a412d85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2838e210-cd4c-4622-8459-ce9a6b6e7cac",
                "5bcc4bc7-7aff-43c2-9e43-8ebded7bd86b",
                "3b21635e-8b3a-449b-93d1-d44fd7eb93b6",
                "f611a1d9-0118-4501-90ee-df334ce6621c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "76bcec73-8fcc-4d07-a194-0237a79ca10b",
            "8b435b6a-a136-4517-841f-505f97a6953c",
            "f6200790-97a2-41cf-96f2-5f041b9242ad",
            "336ac2bc-e31a-4d7b-bcfd-1c8735df083f",
            "97781c5b-3ed6-4667-9b10-bac79d2b0731",
            "7033f666-0a78-4f8f-9df8-cf91e5a32cc1",
            "93838258-ef0c-4817-971e-35015bd396c8",
            "8135bfe6-03a2-4326-98b7-bd543ad0917f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 653,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "767e710a-c7ef-4001-853c-33a914d5d60a",
          "title": "retrieve study-series-instances using WADO-URI with user",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\dicom-web\\WADO-URI\\withUser\\retrieveInstanceWadoUriWithUser.test.js",
          "file": "\\test\\api\\dicom-web\\WADO-URI\\withUser\\retrieveInstanceWadoUriWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"retrieve study-series-instances using WADO-URI with user\"",
              "fullTitle": "retrieve study-series-instances using WADO-URI with user \"before all\" hook in \"retrieve study-series-instances using WADO-URI with user\"",
              "timedOut": false,
              "duration": 131,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nconst testDicomFile = resolve(__dirname, \"../../../../testData/dicomFiles/jpeg2000/example-jpeg-2000.dcm\");\nawait storeInstanceWithUserForTest(testDicomFile, TEST_USERS[0]);",
              "err": {},
              "uuid": "90fbb85c-45ba-4349-80da-6c22afe90303",
              "parentUUID": "767e710a-c7ef-4001-853c-33a914d5d60a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should retrieve DICOM instance with user 'test'",
              "fullTitle": "retrieve study-series-instances using WADO-URI with user Should retrieve DICOM instance with user 'test'",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/wado?requestType=WADO&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&contentType=application/dicom`,\n    headers: {\n        \"host\": \"localhost:8080\"\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait RetrieveSingleInstanceController(request, response);\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "b7683cd7-d976-4287-9d77-310b06cb2614",
              "parentUUID": "767e710a-c7ef-4001-853c-33a914d5d60a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not retrieve DICOM instance with user 'oTest'",
              "fullTitle": "retrieve study-series-instances using WADO-URI with user Should not retrieve DICOM instance with user 'oTest'",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/wado?requestType=WADO&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&contentType=application/dicom`,\n    headers: {\n        \"host\": \"localhost:8080\"\n    },\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nawait RetrieveSingleInstanceController(request, response);\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "af968021-48cd-4ba8-8b62-b61e82285819",
              "parentUUID": "767e710a-c7ef-4001-853c-33a914d5d60a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should retrieve DICOM instance's JPEG with user 'test'",
              "fullTitle": "retrieve study-series-instances using WADO-URI with user Should retrieve DICOM instance's JPEG with user 'test'",
              "timedOut": false,
              "duration": 58,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/wado?requestType=WADO&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&contentType=image/jpeg`,\n    headers: {\n        \"host\": \"localhost:8080\"\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait RetrieveSingleInstanceController(request, response);\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "0909dafa-e4d6-4ef4-9966-8e7e573573b2",
              "parentUUID": "767e710a-c7ef-4001-853c-33a914d5d60a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not retrieve DICOM instance's JPEG with user 'oTest'",
              "fullTitle": "retrieve study-series-instances using WADO-URI with user Should not retrieve DICOM instance's JPEG with user 'oTest'",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/wado?requestType=WADO&studyUID=${STUDY_UID}&seriesUID=${SERIES_UID}&objectUID=${INSTANCE_UID}&contentType=image/jpeg`,\n    headers: {\n        \"host\": \"localhost:8080\"\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait RetrieveSingleInstanceController(request, response);\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "d535bb4c-28eb-4c43-a554-2357dea7d911",
              "parentUUID": "767e710a-c7ef-4001-853c-33a914d5d60a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7683cd7-d976-4287-9d77-310b06cb2614",
            "af968021-48cd-4ba8-8b62-b61e82285819",
            "0909dafa-e4d6-4ef4-9966-8e7e573573b2",
            "d535bb4c-28eb-4c43-a554-2357dea7d911"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 121,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "642b4ba1-11f4-4556-b09a-fb64357b70c7",
          "title": "Convert DICOM to FHIR '/fhir-convert'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\fhir-convert\\convertDicomToFhir.test.js",
          "file": "\\test\\api\\fhir-convert\\convertDicomToFhir.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Convert DICOM to FHIR '/fhir-convert'\"",
              "fullTitle": "Convert DICOM to FHIR '/fhir-convert' \"before all\" hook in \"Convert DICOM to FHIR '/fhir-convert'\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "85150d6b-7f7c-4b61-9c7a-e16ec053450d",
              "parentUUID": "642b4ba1-11f4-4556-b09a-fb64357b70c7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should convert DICOM to FHIR",
              "fullTitle": "Convert DICOM to FHIR '/fhir-convert' Should convert DICOM to FHIR",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const myForm = formAutoContent({\n    file: createReadStream(\n        resolve(__dirname, \"../../testData/forStore/1-01-mod-vo-updated\")\n    )\n});\nlet response = await inject(app, {\n    method: \"POST\",\n    url: \"/fhir-convert\",\n    ...myForm\n});\nexpect(response.statusCode).to.equal(200);\nlet data = await response.json();\nexpect(data).to.have.property(\"patient\");\nexpect(data.patient).to.have.property(\"resourceType\").to.be.equal(\"Patient\");\nexpect(data).to.have.property(\"imagingStudy\");\nexpect(data.imagingStudy).to.have.property(\"resourceType\").to.be.equal(\"ImagingStudy\");\nexpect(data).to.have.property(\"endpoint\");\nexpect(data.endpoint).to.have.property(\"resourceType\").to.be.equal(\"Endpoint\");",
              "err": {},
              "uuid": "5194566e-72b4-4123-bef7-4e2f6c9669c2",
              "parentUUID": "642b4ba1-11f4-4556-b09a-fb64357b70c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when missing DICOM file",
              "fullTitle": "Convert DICOM to FHIR '/fhir-convert' Should raise 400 (Bad Request) when missing DICOM file",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: \"/fhir-convert\"\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "19f8dc96-0cb1-42d1-9965-bdccdd50b8cb",
              "parentUUID": "642b4ba1-11f4-4556-b09a-fb64357b70c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5194566e-72b4-4123-bef7-4e2f6c9669c2",
            "19f8dc96-0cb1-42d1-9965-bdccdd50b8cb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "47a82f1c-3ea6-489c-9ede-bf611db7a641",
          "title": "Label create label for image '/label/:uid'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\label\\createLabel.test.js",
          "file": "\\test\\api\\label\\createLabel.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Label create label for image '/label/:uid'\"",
              "fullTitle": "Label create label for image '/label/:uid' \"before all\" hook in \"Label create label for image '/label/:uid'\"",
              "timedOut": false,
              "duration": 1857,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "7de6083a-8b3c-47d2-99dd-dbe4e293610b",
              "parentUUID": "47a82f1c-3ea6-489c-9ede-bf611db7a641",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create label",
              "fullTitle": "Label create label for image '/label/:uid' Should create label",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(201);\nlet createdLabel = await response.json();\nexpect(createdLabel).have.property(\"uid\").to.be.equal(STUDY_UID);\nexpect(createdLabel)\n.have.property(\"label\");\nexpect(createdLabel.label)\n.have.property(\"name\")\n.to.be.equal(\"test\");\nexpect(createdLabel.label)\n.have.property(\"color\")\n.to.be.equal(\"blue\");",
              "err": {},
              "uuid": "07dae378-0a95-403e-baa3-6b7cbb370f23",
              "parentUUID": "47a82f1c-3ea6-489c-9ede-bf611db7a641",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when image not found",
              "fullTitle": "Label create label for image '/label/:uid' Should raise 404 (Not Found) when image not found",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/label/${STUDY_UID}2486`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "c69fcc24-39e9-4624-acb5-5b8b37a2a5e5",
              "parentUUID": "47a82f1c-3ea6-489c-9ede-bf611db7a641",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when label already exists",
              "fullTitle": "Label create label for image '/label/:uid' Should raise 400 (Bad Request) when label already exists",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(400);",
              "err": {},
              "uuid": "58da2d96-1bda-482b-a778-0a8868af420c",
              "parentUUID": "47a82f1c-3ea6-489c-9ede-bf611db7a641",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "07dae378-0a95-403e-baa3-6b7cbb370f23",
            "c69fcc24-39e9-4624-acb5-5b8b37a2a5e5",
            "58da2d96-1bda-482b-a778-0a8868af420c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "b660d58d-d711-486d-a954-f9a55c069f08",
          "title": "Label delete label for image '/label/:uid'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\label\\deleteLabel.test.js",
          "file": "\\test\\api\\label\\deleteLabel.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Label delete label for image '/label/:uid'\"",
              "fullTitle": "Label delete label for image '/label/:uid' \"before all\" hook in \"Label delete label for image '/label/:uid'\"",
              "timedOut": false,
              "duration": 1895,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(201);\nlet createdLabel = await response.json();\nlabelID = createdLabel.label.id;",
              "err": {},
              "uuid": "d2f1a18e-ce8f-454e-ba43-d182d9e5cedf",
              "parentUUID": "b660d58d-d711-486d-a954-f9a55c069f08",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should delete label",
              "fullTitle": "Label delete label for image '/label/:uid' Should delete label",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/label/${STUDY_UID}/${labelID}`\n});\nexpect(response.statusCode).to.equal(200);\nlet deleteResult = await response.json();\nexpect(deleteResult).to.have.property(\"deleteStatus\").to.be.equal(true);",
              "err": {},
              "uuid": "ea59adde-e63d-445a-b91e-151cd137b1a6",
              "parentUUID": "b660d58d-d711-486d-a954-f9a55c069f08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when label or image not found",
              "fullTitle": "Label delete label for image '/label/:uid' Should raise 404 (Not Found) when label or image not found",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/label/${STUDY_UID}/2486`\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "e95a1296-68e8-4226-bec2-4fe89da9d1e7",
              "parentUUID": "b660d58d-d711-486d-a954-f9a55c069f08",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ea59adde-e63d-445a-b91e-151cd137b1a6",
            "e95a1296-68e8-4226-bec2-4fe89da9d1e7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "028132af-1c90-4398-b3ec-07acde123713",
          "title": "Label get label for image '/label/:uid'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\label\\getLabel.test.js",
          "file": "\\test\\api\\label\\getLabel.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Label get label for image '/label/:uid'\"",
              "fullTitle": "Label get label for image '/label/:uid' \"before all\" hook in \"Label get label for image '/label/:uid'\"",
              "timedOut": false,
              "duration": 1728,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});",
              "err": {},
              "uuid": "7003d08a-388d-4086-9818-912b2c09ea29",
              "parentUUID": "028132af-1c90-4398-b3ec-07acde123713",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should get label by specified uid",
              "fullTitle": "Label get label for image '/label/:uid' Should get label by specified uid",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/label/${STUDY_UID}`,\n    headers: {\n        \"Accept\": \"application/json\"\n    }\n});\nexpect(response.statusCode).to.equal(200);\nlet labels = await response.json();\nexpect(labels).to.be.an(\"array\");\nexpect(labels).have.lengthOf(1);\nlet label = labels[0];\nexpect(label).have.property(\"uid\").to.be.equal(STUDY_UID);\nexpect(label)\n.have.property(\"label\");\nexpect(label.label)\n.have.property(\"name\")\n.to.be.equal(\"test\");\nexpect(label.label)\n.have.property(\"color\")\n.to.be.equal(\"blue\");",
              "err": {},
              "uuid": "09f5f3bd-0ded-45d3-add8-0b0102d64bea",
              "parentUUID": "028132af-1c90-4398-b3ec-07acde123713",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "09f5f3bd-0ded-45d3-add8-0b0102d64bea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "6a607f68-0af7-44bc-95ec-d5ea5d8640b5",
          "title": "Label update label for image '/label/:uid'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\label\\updateLabel.test.js",
          "file": "\\test\\api\\label\\updateLabel.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Label update label for image '/label/:uid'\"",
              "fullTitle": "Label update label for image '/label/:uid' \"before all\" hook in \"Label update label for image '/label/:uid'\"",
              "timedOut": false,
              "duration": 1728,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nlet response = await inject(app, {\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(201);\nlet createdLabel = await response.json();\nlabelID = createdLabel.label.id;",
              "err": {},
              "uuid": "225bf7a1-79c7-4bbc-83f0-2905b72a58db",
              "parentUUID": "6a607f68-0af7-44bc-95ec-d5ea5d8640b5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should update label",
              "fullTitle": "Label update label for image '/label/:uid' Should update label",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/label/${STUDY_UID}/${labelID}`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test-updated\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(200);\nlet updatedLabel = await response.json();\nexpect(updatedLabel).have.property(\"uid\").to.be.equal(STUDY_UID);\nexpect(updatedLabel)\n.have.property(\"label\");\nexpect(updatedLabel.label)\n.have.property(\"name\")\n.to.be.equal(\"test-updated\");\nexpect(updatedLabel.label)\n.have.property(\"color\")\n.to.be.equal(\"blue\");",
              "err": {},
              "uuid": "1ad93104-3917-4810-97ab-1b2fd1d65c0c",
              "parentUUID": "6a607f68-0af7-44bc-95ec-d5ea5d8640b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when label or image not found",
              "fullTitle": "Label update label for image '/label/:uid' Should raise 404 (Not Found) when label or image not found",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"PUT\",\n    url: `/label/${STUDY_UID}/2486`,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: JSON.stringify({\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    })\n});\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "ad622984-1de3-4e6e-8354-cbea59ab1d3b",
              "parentUUID": "6a607f68-0af7-44bc-95ec-d5ea5d8640b5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1ad93104-3917-4810-97ab-1b2fd1d65c0c",
            "ad622984-1de3-4e6e-8354-cbea59ab1d3b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "2a99087f-f1f8-4a0e-bdd5-8b2b6cba1e4c",
          "title": "Label create label for image with user '/label/:uid'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\label\\withUser\\createLabelWithUser.test.js",
          "file": "\\test\\api\\label\\withUser\\createLabelWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Label create label for image with user '/label/:uid'\"",
              "fullTitle": "Label create label for image with user '/label/:uid' \"before all\" hook in \"Label create label for image with user '/label/:uid'\"",
              "timedOut": false,
              "duration": 1831,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\n\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../testData/dicomFiles\"),\n    absolute: true\n});\nfor (let dicomFile of testDicomFiles) {\n    await storeInstanceWithUserForTest(dicomFile, TEST_USERS[0]);\n}",
              "err": {},
              "uuid": "321eafbc-046a-4cde-ae09-f1a91bdffb34",
              "parentUUID": "2a99087f-f1f8-4a0e-bdd5-8b2b6cba1e4c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create label with user 'test'",
              "fullTitle": "Label create label for image with user '/label/:uid' Should create label with user 'test'",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    params: {\n        uid: STUDY_UID\n    },\n    body: {\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CreateLabelController(request, response);\nexpect(response.statusCode).to.equal(201);\n\nlet createdLabel = response._getJSONData();\nexpect(createdLabel).to.have.property(\"uid\").to.equal(STUDY_UID);\nexpect(createdLabel).to.have.property(\"label\");\nexpect(createdLabel.label).to.have.property(\"name\").to.equal(\"test\");\nexpect(createdLabel.label).to.have.property(\"color\").to.equal(\"blue\");",
              "err": {},
              "uuid": "d89d022f-dc6e-464e-809c-47ff0eb916dd",
              "parentUUID": "2a99087f-f1f8-4a0e-bdd5-8b2b6cba1e4c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d89d022f-dc6e-464e-809c-47ff0eb916dd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "87bb6d36-fa83-434a-8e26-4e365bae9cde",
          "title": "Label delete label for image with user'/label/:uid'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\label\\withUser\\deleteLabelWithUser.test.js",
          "file": "\\test\\api\\label\\withUser\\deleteLabelWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Label delete label for image with user'/label/:uid'\"",
              "fullTitle": "Label delete label for image with user'/label/:uid' \"before all\" hook in \"Label delete label for image with user'/label/:uid'\"",
              "timedOut": false,
              "duration": 1758,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../testData/dicomFiles\"),\n    absolute: true\n});\nfor (let dicomFile of testDicomFiles) {\n    await storeInstanceWithUserForTest(dicomFile, TEST_USERS[0]);\n}\nlet request = createRequest({\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    params: {\n        uid: STUDY_UID\n    },\n    body: {\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CreateLabelController(request, response);\nlet createdLabel = response._getJSONData();\nlabelID = createdLabel.label.id;",
              "err": {},
              "uuid": "31ec07d9-474a-4041-9828-efa8f24b4c82",
              "parentUUID": "87bb6d36-fa83-434a-8e26-4e365bae9cde",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should delete label with user 'test'",
              "fullTitle": "Label delete label for image with user'/label/:uid' Should delete label with user 'test'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"DELETE\",\n    url: `/label/${STUDY_UID}/${labelID}`,\n    params: {\n        uid: STUDY_UID,\n        labelID: labelID\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait DeleteLabelController(request, response);\nexpect(response.statusCode).to.equal(200);\nlet deleteResult = response._getJSONData();\nexpect(deleteResult).to.have.property(\"deleteStatus\").to.be.equal(true);",
              "err": {},
              "uuid": "a5940a40-c28b-463e-992f-5d463c590add",
              "parentUUID": "87bb6d36-fa83-434a-8e26-4e365bae9cde",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest' when study uid not found",
              "fullTitle": "Label delete label for image with user'/label/:uid' Should return 404 with user 'oTest' when study uid not found",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"DELETE\",\n    url: `/label/${STUDY_UID}/${labelID}`,\n    params: {\n        uid: STUDY_UID,\n        labelID: labelID\n    },\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nawait DeleteLabelController(request, response);\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "cf80c4a6-e08c-4108-9173-108018487f12",
              "parentUUID": "87bb6d36-fa83-434a-8e26-4e365bae9cde",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a5940a40-c28b-463e-992f-5d463c590add",
            "cf80c4a6-e08c-4108-9173-108018487f12"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "3b8abc3e-77cc-4582-bf08-f7919d5da541",
          "title": "Label get label for image with user'/label/:uid'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\label\\withUser\\getLabelWithUser.test.js",
          "file": "\\test\\api\\label\\withUser\\getLabelWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Label get label for image with user'/label/:uid'\"",
              "fullTitle": "Label get label for image with user'/label/:uid' \"before all\" hook in \"Label get label for image with user'/label/:uid'\"",
              "timedOut": false,
              "duration": 1690,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../testData/dicomFiles\"),\n    absolute: true\n});\nfor (let dicomFile of testDicomFiles) {\n    await storeInstanceWithUserForTest(dicomFile, TEST_USERS[0]);\n}\nlet request = createRequest({\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    params: {\n        uid: STUDY_UID\n    },\n    body: {\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CreateLabelController(request, response);",
              "err": {},
              "uuid": "f94d3e11-a603-442a-a923-89f6f24b0504",
              "parentUUID": "3b8abc3e-77cc-4582-bf08-f7919d5da541",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should get label with user 'test'",
              "fullTitle": "Label get label for image with user'/label/:uid' Should get label with user 'test'",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/label/${STUDY_UID}`,\n    params: {\n        uid: STUDY_UID\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait GetLabelController(request, response);\nexpect(response.statusCode).to.equal(200);",
              "err": {},
              "uuid": "e19f50a9-f5a9-4d3e-aef9-c5576194ee09",
              "parentUUID": "3b8abc3e-77cc-4582-bf08-f7919d5da541",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest' when study uid not found",
              "fullTitle": "Label get label for image with user'/label/:uid' Should return 404 with user 'oTest' when study uid not found",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: `/label/${STUDY_UID}`,\n    params: {\n        uid: STUDY_UID\n    },\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nawait GetLabelController(request, response);\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "8e09bab5-3337-46a5-9d3c-6945498af6d8",
              "parentUUID": "3b8abc3e-77cc-4582-bf08-f7919d5da541",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e19f50a9-f5a9-4d3e-aef9-c5576194ee09",
            "8e09bab5-3337-46a5-9d3c-6945498af6d8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "80ea3413-7cf0-4ad5-97ec-b98725086dd7",
          "title": "Label update label for image with user'/label/:uid'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\label\\withUser\\updateLabelWithUser.test.js",
          "file": "\\test\\api\\label\\withUser\\updateLabelWithUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Label update label for image with user'/label/:uid'\"",
              "fullTitle": "Label update label for image with user'/label/:uid' \"before all\" hook in \"Label update label for image with user'/label/:uid'\"",
              "timedOut": false,
              "duration": 1749,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet testDicomFiles = glob.sync(\"**/*.dcm\", {\n    cwd: resolve(__dirname, \"../../../testData/dicomFiles\"),\n    absolute: true\n});\nfor (let dicomFile of testDicomFiles) {\n    await storeInstanceWithUserForTest(dicomFile, TEST_USERS[0]);\n}\nlet request = createRequest({\n    method: \"POST\",\n    url: `/label/${STUDY_UID}`,\n    params: {\n        uid: STUDY_UID\n    },\n    body: {\n        label: {\n            name: \"test\",\n            color: \"blue\"\n        }\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CreateLabelController(request, response);\nlet createdLabel = response._getJSONData();\nlabelID = createdLabel.label.id;",
              "err": {},
              "uuid": "d2038ed7-3773-49c6-bed3-0f31bc6dfa98",
              "parentUUID": "80ea3413-7cf0-4ad5-97ec-b98725086dd7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should update label with user 'test'",
              "fullTitle": "Label update label for image with user'/label/:uid' Should update label with user 'test'",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"PUT\",\n    url: `/label/${STUDY_UID}/${labelID}`,\n    params: {\n        uid: STUDY_UID,\n        labelID: labelID\n    },\n    body: {\n        label: {\n            name: \"test-updated\",\n            color: \"blue\"\n        }\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait UpdateLabelController(request, response);\nexpect(response.statusCode).to.equal(200);\nlet updatedLabel = response._getJSONData();\nexpect(updatedLabel).have.property(\"uid\").to.be.equal(STUDY_UID);\nexpect(updatedLabel).have.property(\"label\");\nexpect(updatedLabel.label).have.property(\"name\").to.be.equal(\"test-updated\");\nexpect(updatedLabel.label).have.property(\"color\").to.be.equal(\"blue\");",
              "err": {},
              "uuid": "2b062de4-2987-43cf-9102-43d91d7e56e0",
              "parentUUID": "80ea3413-7cf0-4ad5-97ec-b98725086dd7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 404 with user 'oTest' when study uid not found",
              "fullTitle": "Label update label for image with user'/label/:uid' Should return 404 with user 'oTest' when study uid not found",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"PUT\",\n    url: `/label/${STUDY_UID}/${labelID}`,\n    params: {\n        uid: STUDY_UID,\n        labelID: labelID\n    },\n    user: TEST_USERS[2]\n});\nlet response = createResponse();\nawait UpdateLabelController(request, response);\nexpect(response.statusCode).to.equal(404);",
              "err": {},
              "uuid": "b038c622-1236-4006-80bb-390c43e5e2a2",
              "parentUUID": "80ea3413-7cf0-4ad5-97ec-b98725086dd7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b062de4-2987-43cf-9102-43d91d7e56e0",
            "b038c622-1236-4006-80bb-390c43e5e2a2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "3f5d74e2-6354-4601-9381-434e9b581675",
          "title": "basicAuth Middleware",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\middleware\\basicAuth.test.js",
          "file": "\\test\\api\\middleware\\basicAuth.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"basicAuth Middleware\"",
              "fullTitle": "basicAuth Middleware \"before each\" hook in \"basicAuth Middleware\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req = {\n    headers: {}\n};\nres = {};\nnext = () => {};",
              "err": {},
              "uuid": "b79567b0-1567-4888-bea5-73af1f90a475",
              "parentUUID": "3f5d74e2-6354-4601-9381-434e9b581675",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should call next when there is no authorization header",
              "fullTitle": "basicAuth Middleware Should call next when there is no authorization header",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let nextCalled = false;\nnext = () => { nextCalled = true; };\nbasicAuth(req, res, next);\nexpect(nextCalled).to.be.true;\nexpect(req.user).to.be.undefined;",
              "err": {},
              "uuid": "07fc5b7b-8277-40bf-85d6-d10d0a30f5ca",
              "parentUUID": "3f5d74e2-6354-4601-9381-434e9b581675",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should set req.user when providing correct system admin credentials",
              "fullTitle": "basicAuth Middleware Should set req.user when providing correct system admin credentials",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const credentials = Buffer.from('admin:password123').toString('base64');\nreq.headers.authorization = `Basic ${credentials}`;\n\nlet nextCalled = false;\nnext = () => { nextCalled = true; };\nbasicAuth(req, res, next);\n\nexpect(nextCalled).to.be.true;\nexpect(req.user).to.deep.equal({\n    username: 'admin',\n    role: 'system-admin'\n});",
              "err": {},
              "uuid": "d5bbc98c-bb61-4d0d-9ad8-9890ebced358",
              "parentUUID": "3f5d74e2-6354-4601-9381-434e9b581675",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not set req.user when providing incorrect credentials",
              "fullTitle": "basicAuth Middleware Should not set req.user when providing incorrect credentials",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const credentials = Buffer.from('wrong:credentials').toString('base64');\nreq.headers.authorization = `Basic ${credentials}`;\n\nlet nextCalled = false;\nnext = () => { nextCalled = true; };\nbasicAuth(req, res, next);\n\nexpect(nextCalled).to.be.true;\nexpect(req.user).to.be.undefined;",
              "err": {},
              "uuid": "2e7148ff-7cd9-4a82-94b5-1a05e9f9f524",
              "parentUUID": "3f5d74e2-6354-4601-9381-434e9b581675",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not set req.user when Basic Auth format is incorrect",
              "fullTitle": "basicAuth Middleware Should not set req.user when Basic Auth format is incorrect",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "req.headers.authorization = 'InvalidFormat';\n\nlet nextCalled = false;\nnext = () => { nextCalled = true; };\nbasicAuth(req, res, next);\n\nexpect(nextCalled).to.be.true;\nexpect(req.user).to.be.undefined;",
              "err": {},
              "uuid": "9f288d2f-e997-4176-93dd-7a5d8d8c3159",
              "parentUUID": "3f5d74e2-6354-4601-9381-434e9b581675",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "07fc5b7b-8277-40bf-85d6-d10d0a30f5ca",
            "d5bbc98c-bb61-4d0d-9ad8-9890ebced358",
            "2e7148ff-7cd9-4a82-94b5-1a05e9f9f524",
            "9f288d2f-e997-4176-93dd-7a5d8d8c3159"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "4d5618bb-db49-4094-9add-132609891dbb",
          "title": "Create user config",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\user-config\\createUserConfig.test.js",
          "file": "\\test\\api\\user-config\\createUserConfig.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Create user config\"",
              "fullTitle": "Create user config \"before all\" hook in \"Create user config\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}",
              "err": {},
              "uuid": "a52a5f26-bb51-4478-ba4e-96b3014804c9",
              "parentUUID": "4d5618bb-db49-4094-9add-132609891dbb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should create user config successfully",
              "fullTitle": "Create user config Should create user config successfully",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"POST\",\n    url: \"/user-config\",\n    body: {\n        enabledModalityWorkList: true\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CreateUserConfigController(request, response);\nexpect(response.statusCode).to.be.equal(201);\nlet result = response._getJSONData();\n\nexpect(result).to\n.have.property(\"config\")\n.have.property(\"enabledModalityWorkList\")\n.to.be.equal(true);",
              "err": {},
              "uuid": "1173bbbe-5ef6-4b71-902a-7503857ec3f0",
              "parentUUID": "4d5618bb-db49-4094-9add-132609891dbb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1173bbbe-5ef6-4b71-902a-7503857ec3f0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "f6014279-fa48-49ba-8967-84bd5b416966",
          "title": "Get user config",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\user-config\\getUserConfig.test.js",
          "file": "\\test\\api\\user-config\\getUserConfig.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Get user config\"",
              "fullTitle": "Get user config \"before all\" hook in \"Get user config\"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\n\nlet request = createRequest({\n    method: \"POST\",\n    url: \"/user-config\",\n    body: {\n        enabledModalityWorkList: true\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CreateUserConfigController(request, response);",
              "err": {},
              "uuid": "a04ec5a7-c626-45f3-863c-779f939a37bb",
              "parentUUID": "f6014279-fa48-49ba-8967-84bd5b416966",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should get user config successfully",
              "fullTitle": "Get user config Should get user config successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"GET\",\n    url: \"/user-config\",\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait GetUserConfigController(request, response);\nexpect(response.statusCode).to.be.equal(200);\nlet result = response._getJSONData();\n\nexpect(result).to\n.have.property(\"config\")\n.have.property(\"enabledModalityWorkList\")\n.to.be.equal(true);",
              "err": {},
              "uuid": "6bc54bd8-02c9-4633-9025-33fd554a1b4a",
              "parentUUID": "f6014279-fa48-49ba-8967-84bd5b416966",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6bc54bd8-02c9-4633-9025-33fd554a1b4a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "e6264113-50df-4c61-bfa6-213f0b882c53",
          "title": "Update user config",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\api\\user-config\\updateUserConfig.test.js",
          "file": "\\test\\api\\user-config\\updateUserConfig.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Update user config\"",
              "fullTitle": "Update user config \"before all\" hook in \"Update user config\"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nfor (let user of TEST_USERS) {\n    await TenantUserModel.createTenantUser(user);\n}\nlet request = createRequest({\n    method: \"POST\",\n    url: \"/user-config\",\n    body: {\n        enabledModalityWorkList: true\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait CreateUserConfigController(request, response);",
              "err": {},
              "uuid": "dbba1c40-cbd5-4218-a32a-ffa821d6cbf3",
              "parentUUID": "e6264113-50df-4c61-bfa6-213f0b882c53",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should update user config successfully",
              "fullTitle": "Update user config Should update user config successfully",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = createRequest({\n    method: \"PUT\",\n    url: \"/user-config\",\n    body: {\n        enabledModalityWorkList: false\n    },\n    user: TEST_USERS[0]\n});\nlet response = createResponse();\nawait UpdateUserConfigController(request, response);\nlet result = response._getJSONData();\n\nexpect(result).to\n.have.property(\"config\")\n.have.property(\"enabledModalityWorkList\")\n.to.be.equal(false);",
              "err": {},
              "uuid": "d12d5dee-6c86-4b9b-81ad-a2378b1ec634",
              "parentUUID": "e6264113-50df-4c61-bfa6-213f0b882c53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d12d5dee-6c86-4b9b-81ad-a2378b1ec634"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
          "title": "Delete DICOM Instances by SOPInstanceUID",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\delete.test.js",
          "file": "\\test\\delete.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete DICOM Instances by SOPInstanceUID\"",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID \"before all\" hook in \"Delete DICOM Instances by SOPInstanceUID\"",
              "timedOut": false,
              "duration": 1651,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "bd4c0619-6674-44b7-a00b-2d825297acbd",
              "parentUUID": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should raise error if not using POST 'delete-with-reason' first",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should raise error if not using POST 'delete-with-reason' first",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/${sopInstanceUid}`\n});\nexpect(response.statusCode).to.be.equal(400);",
              "err": {},
              "uuid": "897ce767-b4ef-4ebd-a6d3-23bb17d7ed42",
              "parentUUID": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) using undo delete when instance fine",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should raise 400 (Bad Request) using undo delete when instance fine",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/${sopInstanceUid}/undoDelete`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.be.equal(400);",
              "err": {},
              "uuid": "64583f07-f57a-4a5e-a991-bc79e5b4e1c2",
              "parentUUID": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) if instance not found when using 'delete-with-reason'",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should raise 404 (Not Found) if instance not found when using 'delete-with-reason'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/${sopInstanceUid}2486/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nexpect(response.statusCode).to.be.equal(404);",
              "err": {},
              "uuid": "dfe94351-0f68-4278-8ccc-37715adf696b",
              "parentUUID": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when using delete with param 'deleteStatus' at instance level",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should raise 400 (Bad Request) when using delete with param 'deleteStatus' at instance level",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/${sopInstanceUid}?deleteStatus=1`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nexpect(response.statusCode).to.be.equal(400);",
              "err": {},
              "uuid": "9d1bd696-4f02-4d8b-a787-3e9bf487a3b6",
              "parentUUID": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete instance with reason and expect 4 instances in series",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should delete instance with reason and expect 4 instances in series",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonBySopInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(4);",
              "err": {},
              "uuid": "15e7523d-345b-49d0-b70e-1e43cdda5d97",
              "parentUUID": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when instance already deleted with reason",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should raise 400 (Bad Request) when instance already deleted with reason",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/${sopInstanceUid}/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});\nexpect(response.statusCode).to.be.equal(400);",
              "err": {},
              "uuid": "dc5ca690-6898-4ed3-af24-c81bb23e69f1",
              "parentUUID": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should expect 3 series in study because of delete with instance",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should expect 3 series in study because of delete with instance",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"series\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(3);",
              "err": {},
              "uuid": "8e7ecef2-9776-4fdf-baed-4202c40e6a2f",
              "parentUUID": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should expect 4 studies because of delete with instance",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should expect 4 studies because of delete with instance",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {},\n    params: {},\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"study\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(4);",
              "err": {},
              "uuid": "c47358e4-6422-476e-9d50-98f4c594e648",
              "parentUUID": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 400 (Bad Request) when using undo delete with param 'deleteStatus'",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should raise 400 (Bad Request) when using undo delete with param 'deleteStatus'",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/${sopInstanceUid}/undoDelete?deleteStatus=1`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    }\n});\nexpect(response.statusCode).to.be.equal(400);",
              "err": {},
              "uuid": "8bd4a5a9-6777-4b61-9fbd-b712f3003e2c",
              "parentUUID": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should undo delete instance and expect 5 instances in series",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should undo delete instance and expect 5 instances in series",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await undoDeleteBySopInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(5);",
              "err": {},
              "uuid": "12744f0b-ead0-42fe-9917-76877ea98e0e",
              "parentUUID": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should undo delete instance using study level and expect 5 instances in series",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should undo delete instance using study level and expect 5 instances in series",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonBySopInstanceUid();\nawait undoDeleteByStudyInstanceUid({ deleteStatus: 1 });\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(5);",
              "err": {},
              "uuid": "fea7e78a-2f13-4c80-b23f-33d9f0e28fc8",
              "parentUUID": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should undo delete series using series level and expect 5 instances in series",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should undo delete series using series level and expect 5 instances in series",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonBySopInstanceUid();\nawait undoDeleteBySeriesInstanceUid({ deleteStatus: 1 });\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(5);",
              "err": {},
              "uuid": "a1166fd1-d46d-43b7-91d5-1339f1b95343",
              "parentUUID": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when instance not exists",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUID Should raise 404 (Not Found) when instance not exists",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/1/series/2/instances/3/undoDelete`\n});\nexpect(response.statusCode).to.be.equal(404);",
              "err": {},
              "uuid": "0fb827aa-e458-4465-905c-619a83e942f1",
              "parentUUID": "3b614237-95d5-4b2a-9639-b4b5e67ad3bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "897ce767-b4ef-4ebd-a6d3-23bb17d7ed42",
            "64583f07-f57a-4a5e-a991-bc79e5b4e1c2",
            "dfe94351-0f68-4278-8ccc-37715adf696b",
            "9d1bd696-4f02-4d8b-a787-3e9bf487a3b6",
            "15e7523d-345b-49d0-b70e-1e43cdda5d97",
            "dc5ca690-6898-4ed3-af24-c81bb23e69f1",
            "8e7ecef2-9776-4fdf-baed-4202c40e6a2f",
            "c47358e4-6422-476e-9d50-98f4c594e648",
            "8bd4a5a9-6777-4b61-9fbd-b712f3003e2c",
            "12744f0b-ead0-42fe-9917-76877ea98e0e",
            "fea7e78a-2f13-4c80-b23f-33d9f0e28fc8",
            "a1166fd1-d46d-43b7-91d5-1339f1b95343",
            "0fb827aa-e458-4465-905c-619a83e942f1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 146,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "9130e839-750b-488e-85aa-14e8dc3b9198",
          "title": "Delete DICOM Instance using specified delete status with study level",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\delete.test.js",
          "file": "\\test\\delete.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Delete DICOM Instance using specified delete status with study level\"",
              "fullTitle": "Delete DICOM Instance using specified delete status with study level \"after all\" hook in \"Delete DICOM Instance using specified delete status with study level\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await undoDeleteBySopInstanceUid();\nawait undoDeleteBySopInstanceUid();",
              "err": {},
              "uuid": "8ce74f26-98b5-4b4d-9319-a4d607fed204",
              "parentUUID": "9130e839-750b-488e-85aa-14e8dc3b9198",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should move instance to waiting permanently queue using specified delete status",
              "fullTitle": "Delete DICOM Instance using specified delete status with study level Should move instance to waiting permanently queue using specified delete status",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonBySopInstanceUid();\nawait deleteByStudyInstanceUid({ deleteStatus: 1 });",
              "err": {},
              "uuid": "32d318db-8be2-45a1-9ae6-9326824d0705",
              "parentUUID": "9130e839-750b-488e-85aa-14e8dc3b9198",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 4 instances when query with delete status = 0 (NONE)",
              "fullTitle": "Delete DICOM Instance using specified delete status with study level Should return 4 instances when query with delete status = 0 (NONE)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(4);",
              "err": {},
              "uuid": "326b1331-3372-42b7-bae5-e7608899ad6a",
              "parentUUID": "9130e839-750b-488e-85aa-14e8dc3b9198",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 0 instances when query with delete status = 1 (RECYCLE)",
              "fullTitle": "Delete DICOM Instance using specified delete status with study level Should return 0 instances when query with delete status = 1 (RECYCLE)",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.RECYCLE\n    },\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(0);",
              "err": {},
              "uuid": "7f67a761-9f92-4753-b210-226ac8c1e813",
              "parentUUID": "9130e839-750b-488e-85aa-14e8dc3b9198",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 1 instance when query with delete status = 2 (PERMANENT_QUEUE)",
              "fullTitle": "Delete DICOM Instance using specified delete status with study level Should return 1 instance when query with delete status = 2 (PERMANENT_QUEUE)",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.PERMANENT_QUEUE\n    },\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(1);",
              "err": {},
              "uuid": "8629bcb1-ad99-43a8-8223-150e1c58e2f4",
              "parentUUID": "9130e839-750b-488e-85aa-14e8dc3b9198",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32d318db-8be2-45a1-9ae6-9326824d0705",
            "326b1331-3372-42b7-bae5-e7608899ad6a",
            "7f67a761-9f92-4753-b210-226ac8c1e813",
            "8629bcb1-ad99-43a8-8223-150e1c58e2f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 49,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "7033a32e-9efb-4267-85b3-87284c8bc1d3",
          "title": "Delete DICOM Instances by SeriesInstanceUID",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\delete.test.js",
          "file": "\\test\\delete.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should raise error if not using POST 'delete-with-reason' first",
              "fullTitle": "Delete DICOM Instances by SeriesInstanceUID Should raise error if not using POST 'delete-with-reason' first",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}`\n});\n\nexpect(response.statusCode).to.be.equal(400);",
              "err": {},
              "uuid": "d9d48bf8-6e1e-44c3-abb0-6012d7bbca56",
              "parentUUID": "7033a32e-9efb-4267-85b3-87284c8bc1d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete series with reason and expect 2 series in study",
              "fullTitle": "Delete DICOM Instances by SeriesInstanceUID Should delete series with reason and expect 2 series in study",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonBySeriesInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"series\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(2);",
              "err": {},
              "uuid": "2a1c2202-c7d6-4be6-84b6-e69407e89499",
              "parentUUID": "7033a32e-9efb-4267-85b3-87284c8bc1d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should undo delete series and expect 3 series in study",
              "fullTitle": "Delete DICOM Instances by SeriesInstanceUID Should undo delete series and expect 3 series in study",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await undoDeleteBySeriesInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"series\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(3);",
              "err": {},
              "uuid": "d0007f34-ba00-4c3a-afbf-48bada4976c2",
              "parentUUID": "7033a32e-9efb-4267-85b3-87284c8bc1d3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should undo delete instances and expect 3 series in study",
              "fullTitle": "Delete DICOM Instances by SeriesInstanceUID Should undo delete instances and expect 3 series in study",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonBySeriesInstanceUid();\nawait undoDeleteBySeriesInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"series\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(3);",
              "err": {},
              "uuid": "15ae8497-28ff-46ad-a446-3d842f1eb203",
              "parentUUID": "7033a32e-9efb-4267-85b3-87284c8bc1d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9d48bf8-6e1e-44c3-abb0-6012d7bbca56",
            "2a1c2202-c7d6-4be6-84b6-e69407e89499",
            "d0007f34-ba00-4c3a-afbf-48bada4976c2",
            "15ae8497-28ff-46ad-a446-3d842f1eb203"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "e8372c3d-f108-4f45-98c6-3ff388dc2200",
          "title": "Delete DICOM Instances by SOPInstanceUIDs",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\delete.test.js",
          "file": "\\test\\delete.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should delete all instances to recycle bin and expect 2 series",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUIDs Should delete all instances to recycle bin and expect 2 series",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (let instanceUid of instanceUidsInSeries) {\n    await deleteWithReasonBySopInstanceUid(instanceUid);\n}\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {\n        studyUID: studyInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"series\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(2);",
              "err": {},
              "uuid": "af3427d2-1820-4d41-8ee4-b64d28029db0",
              "parentUUID": "e8372c3d-f108-4f45-98c6-3ff388dc2200",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete all instances to waiting permanently delete using series level deletion",
              "fullTitle": "Delete DICOM Instances by SOPInstanceUIDs Should delete all instances to waiting permanently delete using series level deletion",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteBySeriesInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.PERMANENT_QUEUE\n    },\n    params: {\n        studyUID: studyInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"series\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(1);",
              "err": {},
              "uuid": "2261499d-bfa6-4213-bf74-d99fcd3c7d1b",
              "parentUUID": "e8372c3d-f108-4f45-98c6-3ff388dc2200",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "af3427d2-1820-4d41-8ee4-b64d28029db0",
            "2261499d-bfa6-4213-bf74-d99fcd3c7d1b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 61,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "39efb171-5b43-4bbe-9cd4-e769f84fef64",
          "title": "Delete DICOM Instances by StudyInstanceUID",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\delete.test.js",
          "file": "\\test\\delete.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete DICOM Instances by StudyInstanceUID\"",
              "fullTitle": "Delete DICOM Instances by StudyInstanceUID \"before all\" hook in \"Delete DICOM Instances by StudyInstanceUID\"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// revert delete\nawait undoDeleteBySeriesInstanceUid();\nawait undoDeleteBySeriesInstanceUid();",
              "err": {},
              "uuid": "bb81c5f1-c167-472f-916f-390bc4abed76",
              "parentUUID": "39efb171-5b43-4bbe-9cd4-e769f84fef64",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should raise error if not using POST 'delete-with-reason' first",
              "fullTitle": "Delete DICOM Instances by StudyInstanceUID Should raise error if not using POST 'delete-with-reason' first",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/studies/${studyInstanceUid}`\n});\nexpect(response.statusCode).to.be.equal(400);",
              "err": {},
              "uuid": "9a37a503-9b02-4089-8758-62212b751e39",
              "parentUUID": "39efb171-5b43-4bbe-9cd4-e769f84fef64",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete study with reason and expect 3 studies",
              "fullTitle": "Delete DICOM Instances by StudyInstanceUID Should delete study with reason and expect 3 studies",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonByStudyInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {},\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"study\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(3);",
              "err": {},
              "uuid": "20375ddf-7ba9-437a-8526-3d76465e4d10",
              "parentUUID": "39efb171-5b43-4bbe-9cd4-e769f84fef64",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should undo delete study and expect 4 studies",
              "fullTitle": "Delete DICOM Instances by StudyInstanceUID Should undo delete study and expect 4 studies",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await undoDeleteByStudyInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {},\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"study\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(4);",
              "err": {},
              "uuid": "f4e4e0d7-b14e-48ec-843d-1fd8222c2e8e",
              "parentUUID": "39efb171-5b43-4bbe-9cd4-e769f84fef64",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should undo delete instances and expect 4 studies",
              "fullTitle": "Delete DICOM Instances by StudyInstanceUID Should undo delete instances and expect 4 studies",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonByStudyInstanceUid();\nawait undoDeleteBySopInstanceUid();\nlet qidoRsService = new QidoRsService({\n    query: {},\n    params: {},\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"study\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(4);",
              "err": {},
              "uuid": "141e79fc-683b-4c61-b213-60957e16e971",
              "parentUUID": "39efb171-5b43-4bbe-9cd4-e769f84fef64",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9a37a503-9b02-4089-8758-62212b751e39",
            "20375ddf-7ba9-437a-8526-3d76465e4d10",
            "f4e4e0d7-b14e-48ec-843d-1fd8222c2e8e",
            "141e79fc-683b-4c61-b213-60957e16e971"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 70,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "f942755a-6f24-4dc7-909e-15f9d84146c2",
          "title": "Delete Study to recycle status",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\delete.test.js",
          "file": "\\test\\delete.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Delete Study to recycle status\"",
              "fullTitle": "Delete Study to recycle status \"before all\" hook in \"Delete Study to recycle status\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await undoDeleteByStudyInstanceUid({ deleteStatus: 1 });",
              "err": {},
              "uuid": "56411509-0a9d-4179-821a-2e905fdfdfc9",
              "parentUUID": "f942755a-6f24-4dc7-909e-15f9d84146c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should delete with reason successfully",
              "fullTitle": "Delete Study to recycle status Should delete with reason successfully",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteWithReasonByStudyInstanceUid();",
              "err": {},
              "uuid": "59a54f01-e8f9-4e6f-8ef3-e34c2672631b",
              "parentUUID": "f942755a-6f24-4dc7-909e-15f9d84146c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return 1 study when search with recycle status",
              "fullTitle": "Delete Study to recycle status Should return 1 study when search with recycle status",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.RECYCLE\n    },\n    params: {},\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"study\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(1);",
              "err": {},
              "uuid": "60b19999-2c8d-4292-a6fd-a54b1f4e3b60",
              "parentUUID": "f942755a-6f24-4dc7-909e-15f9d84146c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should automatically move 1 study to waiting delete status after 5 seconds",
              "fullTitle": "Delete Study to recycle status Should automatically move 1 study to waiting delete status after 5 seconds",
              "timedOut": false,
              "duration": 6018,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await sleep(6000);\nlet qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.PERMANENT_QUEUE\n    },\n    params: {},\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"study\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(1);",
              "err": {},
              "uuid": "e8912ced-3b05-4997-8bab-34b2a9933a4e",
              "parentUUID": "f942755a-6f24-4dc7-909e-15f9d84146c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59a54f01-e8f9-4e6f-8ef3-e34c2672631b",
            "60b19999-2c8d-4292-a6fd-a54b1f4e3b60",
            "e8912ced-3b05-4997-8bab-34b2a9933a4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6032,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "cbb94dbd-f08a-4704-9aa4-d7c1500dcb88",
          "title": "Delete Permanently",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\delete.test.js",
          "file": "\\test\\delete.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should have files in disk before delete",
              "fullTitle": "Delete Permanently Should have files in disk before delete",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (let i = 0 ; i < instanceUidsInSeries.length ; i++) {\n    let instancePath = path.join(\n        raccoonConfig.dicomWebConfig.storeRootPath,\n        `files/2010/02/${shortHash(studyInstanceUid)}/${shortHash(seriesInstanceUid)}/${instanceUidsInSeries[i]}.dcm`\n    );\n    expect(fs.existsSync(instancePath)).to.be.true;\n}",
              "err": {},
              "uuid": "aa62fc76-9297-4a36-8c64-b14626d46bf2",
              "parentUUID": "cbb94dbd-f08a-4704-9aa4-d7c1500dcb88",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have 5 instances when query before delete",
              "fullTitle": "Delete Permanently Should have 5 instances when query before delete",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.PERMANENT_QUEUE\n    },\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(5);",
              "err": {},
              "uuid": "7a4f7a5a-c6d7-45f4-b684-4e5f1aeaae15",
              "parentUUID": "cbb94dbd-f08a-4704-9aa4-d7c1500dcb88",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should raise 404 (Not Found) when instance not found",
              "fullTitle": "Delete Permanently Should raise 404 (Not Found) when instance not found",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"DELETE\",\n    url: `/dicom-web/studies/${studyInstanceUid}/series/${seriesInstanceUid}/instances/2486`\n});\nexpect(response.statusCode).to.be.equal(404);",
              "err": {},
              "uuid": "cae0efd6-2fb6-480e-bd64-c9fb88afa5e0",
              "parentUUID": "cbb94dbd-f08a-4704-9aa4-d7c1500dcb88",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete 4 instances permanently (total: 5)",
              "fullTitle": "Delete Permanently Should delete 4 instances permanently (total: 5)",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (let i = 0 ; i < instanceUidsInSeries.length - 1 ; i++) {\n    await deleteBySopInstanceUid(instanceUidsInSeries[i]);\n    let instancePath = path.join(\n        raccoonConfig.dicomWebConfig.storeRootPath,\n        `files/2010/02/${shortHash(studyInstanceUid)}/${shortHash(seriesInstanceUid)}/${instanceUidsInSeries[i]}.dcm`\n    );\n    expect(fs.existsSync(instancePath)).to.be.false;\n}",
              "err": {},
              "uuid": "82d79d16-1a0f-4afe-8108-5dda0d72c468",
              "parentUUID": "cbb94dbd-f08a-4704-9aa4-d7c1500dcb88",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have one instance when query",
              "fullTitle": "Delete Permanently Should have one instance when query",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.PERMANENT_QUEUE\n    },\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(1);",
              "err": {},
              "uuid": "4f2ad1b7-6fbd-488d-80e8-da65576f71f7",
              "parentUUID": "cbb94dbd-f08a-4704-9aa4-d7c1500dcb88",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete 1 instance permanently and remove series because it is empty",
              "fullTitle": "Delete Permanently Should delete 1 instance permanently and remove series because it is empty",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await deleteBySopInstanceUid(instanceUidsInSeries[instanceUidsInSeries.length - 1]);\nlet instancePath = path.join(\n    raccoonConfig.dicomWebConfig.storeRootPath,\n    `files/2010/02/${shortHash(studyInstanceUid)}/${shortHash(seriesInstanceUid)}/${instanceUidsInSeries[instanceUidsInSeries.length - 1]}.dcm`\n);\nlet seriesPath = path.join(\n    raccoonConfig.dicomWebConfig.storeRootPath,\n    `files/2010/02/${shortHash(studyInstanceUid)}/${shortHash(seriesInstanceUid)}`\n);\nexpect(fs.existsSync(instancePath)).to.be.false;\nexpect(fs.existsSync(seriesPath)).to.be.false;",
              "err": {},
              "uuid": "1caff37e-35da-4c79-9b42-5973c373056a",
              "parentUUID": "cbb94dbd-f08a-4704-9aa4-d7c1500dcb88",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return empty when query after delete",
              "fullTitle": "Delete Permanently Should return empty when query after delete",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let qidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.NONE\n    },\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\nlet dicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(0);\nqidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.RECYCLE\n    },\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\ndicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(0);\nqidoRsService = new QidoRsService({\n    query: {\n        deleteStatus: DICOM_INSTANCE_DELETE_STATUS.PERMANENT_QUEUE\n    },\n    params: {\n        studyUID: studyInstanceUid,\n        seriesUID: seriesInstanceUid\n    },\n    headers: {\n        host: \"test-host\"\n    }\n}, {}, \"instance\");\ndicomJson = await qidoRsService.getDicomJson();\nexpect(dicomJson).have.lengthOf(0);",
              "err": {},
              "uuid": "d1fc9b16-58e0-4aea-85ff-a8e91f9f5939",
              "parentUUID": "cbb94dbd-f08a-4704-9aa4-d7c1500dcb88",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa62fc76-9297-4a36-8c64-b14626d46bf2",
            "7a4f7a5a-c6d7-45f4-b684-4e5f1aeaae15",
            "cae0efd6-2fb6-480e-bd64-c9fb88afa5e0",
            "82d79d16-1a0f-4afe-8108-5dda0d72c468",
            "4f2ad1b7-6fbd-488d-80e8-da65576f71f7",
            "1caff37e-35da-4c79-9b42-5973c373056a",
            "d1fc9b16-58e0-4aea-85ff-a8e91f9f5939"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 66,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "060b779e-b2b8-4a9e-b740-d3fea23fd243",
          "title": "Series A, B, C: Delete A, Delete B, Recover A, Delete B Again",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\delete002.test.js",
          "file": "\\test\\delete002.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Series A, B, C: Delete A, Delete B, Recover A, Delete B Again\"",
              "fullTitle": "Series A, B, C: Delete A, Delete B, Recover A, Delete B Again \"before all\" hook in \"Series A, B, C: Delete A, Delete B, Recover A, Delete B Again\"",
              "timedOut": false,
              "duration": 2616,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "562c40fc-7f26-4a50-b8ab-6d61d4fc18a6",
              "parentUUID": "060b779e-b2b8-4a9e-b740-d3fea23fd243",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Delete Series A",
              "fullTitle": "Series A, B, C: Delete A, Delete B, Recover A, Delete B Again Delete Series A",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await TestDeleteUtils.deleteWithReasonBySeriesInstanceUid(app, STUDY_INSTANCE_UID, SERIES_INSTANCE_UIDS[0]);\nlet deleteReason = await DicomInstanceDeleteReasonModel.findReasonByUid(SERIES_INSTANCE_UIDS[0]);\nexpect(deleteReason).not.to.be.null;",
              "err": {},
              "uuid": "b008e876-4e1b-44b4-aee8-46241c8a4ec7",
              "parentUUID": "060b779e-b2b8-4a9e-b740-d3fea23fd243",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete Series B",
              "fullTitle": "Series A, B, C: Delete A, Delete B, Recover A, Delete B Again Delete Series B",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await TestDeleteUtils.deleteWithReasonBySeriesInstanceUid(app, STUDY_INSTANCE_UID, SERIES_INSTANCE_UIDS[1]);",
              "err": {},
              "uuid": "6f930115-7928-4f3e-8835-ae0af716e5ec",
              "parentUUID": "060b779e-b2b8-4a9e-b740-d3fea23fd243",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Recover Series A",
              "fullTitle": "Series A, B, C: Delete A, Delete B, Recover A, Delete B Again Recover Series A",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await TestDeleteUtils.undoDeleteBySeriesInstanceUid(app, STUDY_INSTANCE_UID, SERIES_INSTANCE_UIDS[0]);",
              "err": {},
              "uuid": "5bf26f8b-6e90-4eea-9b81-84e60e6e0d69",
              "parentUUID": "060b779e-b2b8-4a9e-b740-d3fea23fd243",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete Series B Again",
              "fullTitle": "Series A, B, C: Delete A, Delete B, Recover A, Delete B Again Delete Series B Again",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await TestDeleteUtils.deleteBySeriesInstanceUid(app, STUDY_INSTANCE_UID, SERIES_INSTANCE_UIDS[1]);",
              "err": {},
              "uuid": "2082aa4b-14eb-41fa-91e1-963c48e2656e",
              "parentUUID": "060b779e-b2b8-4a9e-b740-d3fea23fd243",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b008e876-4e1b-44b4-aee8-46241c8a4ec7",
            "6f930115-7928-4f3e-8835-ae0af716e5ec",
            "5bf26f8b-6e90-4eea-9b81-84e60e6e0d69",
            "2082aa4b-14eb-41fa-91e1-963c48e2656e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "031ecc40-fd52-4dab-99c9-3f9e08a34376",
          "title": "DIMSE C-FIND Study-Series-Instance",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindInstance.test.js",
          "file": "\\test\\dimse\\c-find\\cFindInstance.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE C-FIND Study-Series-Instance\"",
              "fullTitle": "DIMSE C-FIND Study-Series-Instance \"before all\" hook in \"DIMSE C-FIND Study-Series-Instance\"",
              "timedOut": false,
              "duration": 207,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../testData/dicomFiles/1-01-mod-vo\")\n);",
              "err": {},
              "uuid": "b76f099d-181b-4bdb-9c3f-89a020ee4de9",
              "parentUUID": "031ecc40-fd52-4dab-99c9-3f9e08a34376",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"DIMSE C-FIND Study-Series-Instance\"",
              "fullTitle": "DIMSE C-FIND Study-Series-Instance \"after all\" hook in \"DIMSE C-FIND Study-Series-Instance\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "432b4b31-6f3b-4c23-b236-a8ff257f72ed",
              "parentUUID": "031ecc40-fd52-4dab-99c9-3f9e08a34376",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should find 1 instance successfully",
              "fullTitle": "DIMSE C-FIND Study-Series-Instance Should find 1 instance successfully",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nexpect(message).have.string(\"Find Response: 1 (Pending)\");\nexpect(message).not.have.string(\"Find Response: 2 (Pending)\");",
              "err": {},
              "uuid": "e3042e61-c50b-4dda-83cc-bd9d3314770a",
              "parentUUID": "031ecc40-fd52-4dab-99c9-3f9e08a34376",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "62794ca5-63f9-4116-a233-62c6fce926c6",
              "title": "find with a filter",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindInstance.test.js",
              "file": "\\test\\dimse\\c-find\\cFindInstance.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "fcbf481c-32a3-4ed2-9ef5-0524bcde4c7c",
                  "title": "query instances with 'SOPClassUID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series-Instance with SOPClassUID=1.2.840.10008.5.1.4.1.1.4 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'SOPClassUID' Should find Study-Series-Instance with SOPClassUID=1.2.840.10008.5.1.4.1.1.4 and get instance successfully",
                      "timedOut": false,
                      "duration": 97,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "c4f5ebd6-9368-4342-8f31-9d20f3180698",
                      "parentUUID": "fcbf481c-32a3-4ed2-9ef5-0524bcde4c7c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series-Instance with SOPClassUID=foobar and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'SOPClassUID' Should find Study-Series-Instance with SOPClassUID=foobar and get instance successfully",
                      "timedOut": false,
                      "duration": 89,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "c94cf368-0ff6-4aed-9490-9d2cbe991499",
                      "parentUUID": "fcbf481c-32a3-4ed2-9ef5-0524bcde4c7c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c4f5ebd6-9368-4342-8f31-9d20f3180698",
                    "c94cf368-0ff6-4aed-9490-9d2cbe991499"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 186,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "c44bfbfa-0ee0-484c-aaa6-6d17b355e17d",
                  "title": "query instances with 'SOPInstanceUID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series-Instance with SOPInstanceUID=1.2.276.0.7230010.3.1.4.2304755699.3648.1691733220.920 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'SOPInstanceUID' Should find Study-Series-Instance with SOPInstanceUID=1.2.276.0.7230010.3.1.4.2304755699.3648.1691733220.920 and get instance successfully",
                      "timedOut": false,
                      "duration": 96,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "82138ebc-258b-4079-8eb3-456f5bcbf26e",
                      "parentUUID": "c44bfbfa-0ee0-484c-aaa6-6d17b355e17d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series-Instance with SOPInstanceUID=foobar and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'SOPInstanceUID' Should find Study-Series-Instance with SOPInstanceUID=foobar and get instance successfully",
                      "timedOut": false,
                      "duration": 96,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "a5cbc38e-717d-4aee-9f56-d1029097d413",
                      "parentUUID": "c44bfbfa-0ee0-484c-aaa6-6d17b355e17d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "82138ebc-258b-4079-8eb3-456f5bcbf26e",
                    "a5cbc38e-717d-4aee-9f56-d1029097d413"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 192,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "36152898-5a62-4702-9ca2-b78aa2b0088b",
                  "title": "query instances with 'ContentDate",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series-Instance with ContentDate=20090721 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'ContentDate Should find Study-Series-Instance with ContentDate=20090721 and get instance successfully",
                      "timedOut": false,
                      "duration": 90,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "bc9bdbca-b95f-4306-9d01-5dd3ea5630f0",
                      "parentUUID": "36152898-5a62-4702-9ca2-b78aa2b0088b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series-Instance with ContentDate=20090101 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'ContentDate Should find Study-Series-Instance with ContentDate=20090101 and get instance successfully",
                      "timedOut": false,
                      "duration": 85,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "0f888924-932e-46a4-86bc-91efc3ed09c5",
                      "parentUUID": "36152898-5a62-4702-9ca2-b78aa2b0088b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bc9bdbca-b95f-4306-9d01-5dd3ea5630f0",
                    "0f888924-932e-46a4-86bc-91efc3ed09c5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 175,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "28e44dad-7317-42f5-a479-b5bb5a7d8cc9",
                  "title": "query instances with 'ContentTime'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series-Instance with ContentTime=115519.159000 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'ContentTime' Should find Study-Series-Instance with ContentTime=115519.159000 and get instance successfully",
                      "timedOut": false,
                      "duration": 116,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "a3916309-aa19-4a7e-8940-67a81c4319e4",
                      "parentUUID": "28e44dad-7317-42f5-a479-b5bb5a7d8cc9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series-Instance with ContentTime=115518 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'ContentTime' Should find Study-Series-Instance with ContentTime=115518 and get instance successfully",
                      "timedOut": false,
                      "duration": 200,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "650ecf48-2941-4430-922d-bee512c2b7eb",
                      "parentUUID": "28e44dad-7317-42f5-a479-b5bb5a7d8cc9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a3916309-aa19-4a7e-8940-67a81c4319e4",
                    "650ecf48-2941-4430-922d-bee512c2b7eb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 316,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "305a420c-6e0f-47bd-b6cd-0c41079f5bd0",
                  "title": "query instances with 'InstanceNumber'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindInstance.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series-Instance with InstanceNumber=224 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'InstanceNumber' Should find Study-Series-Instance with InstanceNumber=224 and get instance successfully",
                      "timedOut": false,
                      "duration": 98,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "5dd6ad35-de43-4ddd-811d-cac0f090202d",
                      "parentUUID": "305a420c-6e0f-47bd-b6cd-0c41079f5bd0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series-Instance with InstanceNumber=1 and get instance successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series-Instance find with a filter query instances with 'InstanceNumber' Should find Study-Series-Instance with InstanceNumber=1 and get instance successfully",
                      "timedOut": false,
                      "duration": 85,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToInstanceLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(\"SeriesInstanceUID\", SERIES_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd.join(\" \"));\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "83740d9e-5776-42ce-954d-919bac759c19",
                      "parentUUID": "305a420c-6e0f-47bd-b6cd-0c41079f5bd0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5dd6ad35-de43-4ddd-811d-cac0f090202d",
                    "83740d9e-5776-42ce-954d-919bac759c19"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 183,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "e3042e61-c50b-4dda-83cc-bd9d3314770a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 141,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "6d91e714-549a-4b92-9047-58a81c72061f",
          "title": "DIMSE C-FIND MWL",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
          "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE C-FIND MWL\"",
              "fullTitle": "DIMSE C-FIND MWL \"before all\" hook in \"DIMSE C-FIND MWL\"",
              "timedOut": false,
              "duration": 1744,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/mwlitems\",\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    body: JSON.stringify([testMwlItem])\n});",
              "err": {},
              "uuid": "32122c2e-2112-4eb4-97b1-85e83bd84071",
              "parentUUID": "6d91e714-549a-4b92-9047-58a81c72061f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"DIMSE C-FIND MWL\"",
              "fullTitle": "DIMSE C-FIND MWL \"after all\" hook in \"DIMSE C-FIND MWL\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "cdafbdc5-fc93-48f2-a33a-9683f7a16115",
              "parentUUID": "6d91e714-549a-4b92-9047-58a81c72061f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should find 1 mwl successfully",
              "fullTitle": "DIMSE C-FIND MWL Should find 1 mwl successfully",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", \"\");\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nexpect(message).have.string(\"Find Response: 1 (Pending)\");\nexpect(message).not.have.string(\"Find Response: 2 (Pending)\");",
              "err": {},
              "uuid": "25dc1528-6461-4a4d-8fec-14ca17180963",
              "parentUUID": "6d91e714-549a-4b92-9047-58a81c72061f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "95902c3f-85ab-4d5c-a2f8-d4ec18910a13",
              "title": "find with a filter",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
              "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a378acb7-d99d-4255-9842-832cb5a7ccc0",
                  "title": "query modality worklist with param 'StudyInstanceUID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with StudyInstanceUID=1.2.276.0.7230010.3.2.102 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'StudyInstanceUID' Should find modality worklist with StudyInstanceUID=1.2.276.0.7230010.3.2.102 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 73,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "eb45ec54-bfca-4ed2-9126-283316b1b572",
                      "parentUUID": "a378acb7-d99d-4255-9842-832cb5a7ccc0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with StudyInstanceUID=1.2.3.4 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'StudyInstanceUID' Should find modality worklist with StudyInstanceUID=1.2.3.4 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 66,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "211de288-7e26-4169-8095-8d9e07bbfcb7",
                      "parentUUID": "a378acb7-d99d-4255-9842-832cb5a7ccc0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "eb45ec54-bfca-4ed2-9126-283316b1b572",
                    "211de288-7e26-4169-8095-8d9e07bbfcb7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 139,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "c69fbb10-d578-4ab8-9d0a-66bf811eaf99",
                  "title": "query modality worklist with param 'AccessionNumber'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with AccessionNumber=acc-123456 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'AccessionNumber' Should find modality worklist with AccessionNumber=acc-123456 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 74,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "e5a59024-d505-44b4-add6-3ebff8e959a1",
                      "parentUUID": "c69fbb10-d578-4ab8-9d0a-66bf811eaf99",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with AccessionNumber=foobar and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'AccessionNumber' Should find modality worklist with AccessionNumber=foobar and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 67,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "c8ce9da9-0ea6-4ae3-977d-6bfd6929d30e",
                      "parentUUID": "c69fbb10-d578-4ab8-9d0a-66bf811eaf99",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e5a59024-d505-44b4-add6-3ebff8e959a1",
                    "c8ce9da9-0ea6-4ae3-977d-6bfd6929d30e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 141,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "85095416-a19f-47a9-a0eb-026ca41944a3",
                  "title": "query modality worklist with param 'RequestedProcedureID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with RequestedProcedureID=RP488M9439 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'RequestedProcedureID' Should find modality worklist with RequestedProcedureID=RP488M9439 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 72,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "3b2e1e45-4039-477a-8ab1-7b34f591004c",
                      "parentUUID": "85095416-a19f-47a9-a0eb-026ca41944a3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with RequestedProcedureID=foobar and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'RequestedProcedureID' Should find modality worklist with RequestedProcedureID=foobar and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 69,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "01785ddf-1718-4ad1-936b-c6d5d8738224",
                      "parentUUID": "85095416-a19f-47a9-a0eb-026ca41944a3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3b2e1e45-4039-477a-8ab1-7b34f591004c",
                    "01785ddf-1718-4ad1-936b-c6d5d8738224"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 141,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "d798d4a1-da50-43e6-bd87-9db527e0299b",
                  "title": "query modality worklist with param 'AdmissionID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with AdmissionID=A-987 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'AdmissionID' Should find modality worklist with AdmissionID=A-987 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 73,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "bc099ed2-1638-4d6e-92e7-6eab5124d399",
                      "parentUUID": "d798d4a1-da50-43e6-bd87-9db527e0299b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with AdmissionID=foobar and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'AdmissionID' Should find modality worklist with AdmissionID=foobar and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 66,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "457a3638-9a80-456e-9699-1fc82fec2f62",
                      "parentUUID": "d798d4a1-da50-43e6-bd87-9db527e0299b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bc099ed2-1638-4d6e-92e7-6eab5124d399",
                    "457a3638-9a80-456e-9699-1fc82fec2f62"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 139,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "ed8830ca-c122-4013-867b-c411da4909ef",
                  "title": "query modality worklist with param 'InstitutionName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with InstitutionName=HELL and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'InstitutionName' Should find modality worklist with InstitutionName=HELL and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 72,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "fac02f0e-8d1b-4659-bc86-ffa400e28edb",
                      "parentUUID": "ed8830ca-c122-4013-867b-c411da4909ef",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with InstitutionName=foobar and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'InstitutionName' Should find modality worklist with InstitutionName=foobar and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 68,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "6b969f5a-e9d0-44e0-abf5-d2437106ae28",
                      "parentUUID": "ed8830ca-c122-4013-867b-c411da4909ef",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fac02f0e-8d1b-4659-bc86-ffa400e28edb",
                    "6b969f5a-e9d0-44e0-abf5-d2437106ae28"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 140,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "9713d932-b726-441b-a235-7d0af0b74c00",
                  "title": "query modality worklist with param 'InstitutionalDepartmentName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with InstitutionalDepartmentName=FLOOR18 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'InstitutionalDepartmentName' Should find modality worklist with InstitutionalDepartmentName=FLOOR18 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 76,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "fb411405-a4cb-4e1e-b33a-f47f26844d36",
                      "parentUUID": "9713d932-b726-441b-a235-7d0af0b74c00",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with InstitutionalDepartmentName=foobar and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'InstitutionalDepartmentName' Should find modality worklist with InstitutionalDepartmentName=foobar and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 68,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "044c818d-cc7a-461b-9e83-63a02ac8e1f6",
                      "parentUUID": "9713d932-b726-441b-a235-7d0af0b74c00",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fb411405-a4cb-4e1e-b33a-f47f26844d36",
                    "044c818d-cc7a-461b-9e83-63a02ac8e1f6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 144,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "132bdc51-8699-49c8-ba14-c9ac538e2dbb",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledStationAETitle'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationAETitle=WORKLIST and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledStationAETitle' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationAETitle=WORKLIST and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 73,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "abd2a814-c7cc-4481-b46e-be14bf4d039f",
                      "parentUUID": "132bdc51-8699-49c8-ba14-c9ac538e2dbb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationAETitle=foobar and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledStationAETitle' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationAETitle=foobar and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 169,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "ba7a75b7-7ab9-4c97-97ea-ffcc3ea4a1b4",
                      "parentUUID": "132bdc51-8699-49c8-ba14-c9ac538e2dbb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "abd2a814-c7cc-4481-b46e-be14bf4d039f",
                    "ba7a75b7-7ab9-4c97-97ea-ffcc3ea4a1b4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 242,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "616323aa-3ac9-46f7-8ed0-09da9b4c8662",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledStationName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationName=GG and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledStationName' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationName=GG and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 73,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "91a04098-b01c-4678-b1f9-cf2a06e61c48",
                      "parentUUID": "616323aa-3ac9-46f7-8ed0-09da9b4c8662",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationName=foobar and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledStationName' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledStationName=foobar and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 70,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "443cb230-a958-414b-8bfd-101dca0c643d",
                      "parentUUID": "616323aa-3ac9-46f7-8ed0-09da9b4c8662",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "91a04098-b01c-4678-b1f9-cf2a06e61c48",
                    "443cb230-a958-414b-8bfd-101dca0c643d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 143,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "a294e3da-4460-4239-8b2f-5ea5839aca84",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartDate'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartDate=20231021 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartDate' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartDate=20231021 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 83,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "f69b8fb3-6597-4d33-96cd-bed1db6f93cc",
                      "parentUUID": "a294e3da-4460-4239-8b2f-5ea5839aca84",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartDate=19990101 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartDate' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartDate=19990101 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 70,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "8114dce6-69e3-4324-b599-41bf65849040",
                      "parentUUID": "a294e3da-4460-4239-8b2f-5ea5839aca84",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f69b8fb3-6597-4d33-96cd-bed1db6f93cc",
                    "8114dce6-69e3-4324-b599-41bf65849040"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 153,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "f6f88284-c921-4548-b251-06ee0406092b",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndDate'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndDate=20231212 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndDate' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndDate=20231212 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 75,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "0babfe67-2e97-485a-9cc6-e1574866d1a3",
                      "parentUUID": "f6f88284-c921-4548-b251-06ee0406092b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndDate=19990101 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndDate' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndDate=19990101 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 68,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "2fe2a734-a83d-4197-9d65-c19567018d96",
                      "parentUUID": "f6f88284-c921-4548-b251-06ee0406092b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0babfe67-2e97-485a-9cc6-e1574866d1a3",
                    "2fe2a734-a83d-4197-9d65-c19567018d96"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 143,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "0799b19d-9588-46ec-adbb-d963a5aee7cd",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartTime'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartTime=003525.475 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartTime' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartTime=003525.475 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 81,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "6e2d9709-4357-48b8-a49f-d97529b412d8",
                      "parentUUID": "0799b19d-9588-46ec-adbb-d963a5aee7cd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartTime=013525 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartTime' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStartTime=013525 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 72,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "e1acf563-172b-4426-86fe-94fb80c125ec",
                      "parentUUID": "0799b19d-9588-46ec-adbb-d963a5aee7cd",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6e2d9709-4357-48b8-a49f-d97529b412d8",
                    "e1acf563-172b-4426-86fe-94fb80c125ec"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 153,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "420eef53-31bf-407e-bad5-192c61184012",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndTime'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndTime=123525.475 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndTime' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndTime=123525.475 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 72,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "507bae58-53db-4549-bc38-33767a42514d",
                      "parentUUID": "420eef53-31bf-407e-bad5-192c61184012",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndTime=003525 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndTime' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepEndTime=003525 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 66,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "84a9d7b9-9860-4eaf-8932-9f491de812b5",
                      "parentUUID": "420eef53-31bf-407e-bad5-192c61184012",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "507bae58-53db-4549-bc38-33767a42514d",
                    "84a9d7b9-9860-4eaf-8932-9f491de812b5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 138,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "a3352d76-02db-4988-8436-bdcbe68c65cc",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledPerformingPhysicianName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledPerformingPhysicianName=ENT00373 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledPerformingPhysicianName' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledPerformingPhysicianName=ENT00373 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 80,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "e8e70f1b-b66d-4d44-adcf-6b6c03ad7757",
                      "parentUUID": "a3352d76-02db-4988-8436-bdcbe68c65cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledPerformingPhysicianName=ENT123 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledPerformingPhysicianName' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledPerformingPhysicianName=ENT123 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 67,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "a1564680-f424-426e-a8f5-5124714646db",
                      "parentUUID": "a3352d76-02db-4988-8436-bdcbe68c65cc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e8e70f1b-b66d-4d44-adcf-6b6c03ad7757",
                    "a1564680-f424-426e-a8f5-5124714646db"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 147,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "5d471068-c0d7-401e-bebd-dc1e7d2ba5cb",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepDescription'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepDescription=EXAM-DESC and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepDescription' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepDescription=EXAM-DESC and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 75,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "abfd083f-5478-48b3-b2cc-9dd18c560bbf",
                      "parentUUID": "5d471068-c0d7-401e-bebd-dc1e7d2ba5cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepDescription=ENT123 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepDescription' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepDescription=ENT123 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 69,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "4a208ba8-88f0-41a1-bf52-23410d3ab1df",
                      "parentUUID": "5d471068-c0d7-401e-bebd-dc1e7d2ba5cb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "abfd083f-5478-48b3-b2cc-9dd18c560bbf",
                    "4a208ba8-88f0-41a1-bf52-23410d3ab1df"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 144,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "2d197e6f-fa97-472b-9394-93315a8b5e3e",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepID=SPS-00000002 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepID' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepID=SPS-00000002 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 72,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "357a1871-cec3-4359-9636-49e547351be6",
                      "parentUUID": "2d197e6f-fa97-472b-9394-93315a8b5e3e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepID=ENT123 and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepID' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepID=ENT123 and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 67,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "333902af-d055-4bee-9060-d605aa83b028",
                      "parentUUID": "2d197e6f-fa97-472b-9394-93315a8b5e3e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "357a1871-cec3-4359-9636-49e547351be6",
                    "333902af-d055-4bee-9060-d605aa83b028"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 139,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "e2831e5d-0ed0-4a12-9cfa-4f751a9c1dc7",
                  "title": "query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStatus'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindMWL.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStatus=SCHEDULED and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStatus' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStatus=SCHEDULED and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 75,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "f7909731-82a7-4870-85f2-dd78b9a12497",
                      "parentUUID": "e2831e5d-0ed0-4a12-9cfa-4f751a9c1dc7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStatus=COMPLETED and get modality workitem successfully",
                      "fullTitle": "DIMSE C-FIND MWL find with a filter query modality worklist with param 'ScheduledProcedureStepSequence[0].ScheduledProcedureStepStatus' Should find modality worklist with ScheduledProcedureStepSequence[0].ScheduledProcedureStepStatus=COMPLETED and get modality workitem successfully",
                      "timedOut": false,
                      "duration": 68,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToMwlLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nconsole.log(cmd);\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "306c186b-fe5f-4d1f-9cca-75eeab10723e",
                      "parentUUID": "e2831e5d-0ed0-4a12-9cfa-4f751a9c1dc7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f7909731-82a7-4870-85f2-dd78b9a12497",
                    "306c186b-fe5f-4d1f-9cca-75eeab10723e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 143,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "25dc1528-6461-4a4d-8fec-14ca17180963"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 74,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "c6b3803f-6799-49b9-af79-99a77e68750d",
          "title": "DIMSE C-FIND Patient",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindPatient.test.js",
          "file": "\\test\\dimse\\c-find\\cFindPatient.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE C-FIND Patient\"",
              "fullTitle": "DIMSE C-FIND Patient \"before all\" hook in \"DIMSE C-FIND Patient\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();\nawait inject(app, {\n    method: \"POST\",\n    url: \"/dicom-web/patients\",\n    body: testPatient\n});",
              "err": {},
              "uuid": "1bd9abf5-da26-4dac-a33b-30ac4847ec67",
              "parentUUID": "c6b3803f-6799-49b9-af79-99a77e68750d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should find patients",
              "fullTitle": "DIMSE C-FIND Patient Should find patients",
              "timedOut": false,
              "duration": 66,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel();\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nexpect(message).have.string(\"Find Response: 1 (Pending)\");\nexpect(message).not.have.string(\"Find Response: 2 (Pending)\");",
              "err": {},
              "uuid": "a4e337f1-1400-4ca0-8c5d-f803d2c920ae",
              "parentUUID": "c6b3803f-6799-49b9-af79-99a77e68750d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c3bfeb8c-d15f-4bb8-9b48-aafab95da017",
              "title": "find with a filter",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindPatient.test.js",
              "file": "\\test\\dimse\\c-find\\cFindPatient.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "dae4a9ca-ae29-41cb-9e76-fa3718b0d3f3",
                  "title": "find with filter 'PatientName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindPatient.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindPatient.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find patient with PatientName=\"John^Doe\" and get patient successfully",
                      "fullTitle": "DIMSE C-FIND Patient find with a filter find with filter 'PatientName' Should find patient with PatientName=\"John^Doe\" and get patient successfully",
                      "timedOut": false,
                      "duration": 65,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "f58716d4-f181-44a3-8071-934b15357ea7",
                      "parentUUID": "dae4a9ca-ae29-41cb-9e76-fa3718b0d3f3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find patient with PatientName=foo and get patient successfully",
                      "fullTitle": "DIMSE C-FIND Patient find with a filter find with filter 'PatientName' Should find patient with PatientName=foo and get patient successfully",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "13088739-c483-402b-9e0a-b6cfb94d4bb6",
                      "parentUUID": "dae4a9ca-ae29-41cb-9e76-fa3718b0d3f3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find patients with filter 'PatientName=John*&PatientName=*Doe' and get 1 patient successfully",
                      "fullTitle": "DIMSE C-FIND Patient find with a filter find with filter 'PatientName' Should find patients with filter 'PatientName=John*&PatientName=*Doe' and get 1 patient successfully",
                      "timedOut": false,
                      "duration": 66,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel()\n    .addKeyAndValue(\"PatientName\", \"John*\")\n    .addKeyAndValue(\"PatientName\", \"*Doe\");\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nexpect(message).have.string(\"Find Response: 1 (Pending)\");\nexpect(message).not.have.string(\"Find Response: 2 (Pending)\");",
                      "err": {},
                      "uuid": "24862853-6b21-4091-ae5e-245c74c0e6b6",
                      "parentUUID": "dae4a9ca-ae29-41cb-9e76-fa3718b0d3f3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f58716d4-f181-44a3-8071-934b15357ea7",
                    "13088739-c483-402b-9e0a-b6cfb94d4bb6",
                    "24862853-6b21-4091-ae5e-245c74c0e6b6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 194,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "91165d1c-8146-4a95-802f-402703e62aea",
                  "title": "find with filter 'PatientID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindPatient.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindPatient.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find patient with PatientID=12345 and get patient successfully",
                      "fullTitle": "DIMSE C-FIND Patient find with a filter find with filter 'PatientID' Should find patient with PatientID=12345 and get patient successfully",
                      "timedOut": false,
                      "duration": 65,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "0aee726f-99de-44b0-a9bf-f6da1e911b02",
                      "parentUUID": "91165d1c-8146-4a95-802f-402703e62aea",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find patient with PatientID=foo and get patient successfully",
                      "fullTitle": "DIMSE C-FIND Patient find with a filter find with filter 'PatientID' Should find patient with PatientID=foo and get patient successfully",
                      "timedOut": false,
                      "duration": 60,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "4b8dccaa-ce99-4a3a-91e6-4d922f328ad6",
                      "parentUUID": "91165d1c-8146-4a95-802f-402703e62aea",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0aee726f-99de-44b0-a9bf-f6da1e911b02",
                    "4b8dccaa-ce99-4a3a-91e6-4d922f328ad6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 125,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "50f29f90-7514-4a7b-ba9b-fdba2fff8a13",
                  "title": "find with filter 'PatientBirthDate'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindPatient.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindPatient.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find patient with PatientBirthDate=19800101 and get patient successfully",
                      "fullTitle": "DIMSE C-FIND Patient find with a filter find with filter 'PatientBirthDate' Should find patient with PatientBirthDate=19800101 and get patient successfully",
                      "timedOut": false,
                      "duration": 64,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "54e29042-44a0-4208-846d-8cd179dd2b11",
                      "parentUUID": "50f29f90-7514-4a7b-ba9b-fdba2fff8a13",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find patient with PatientBirthDate=19800102 and get patient successfully",
                      "fullTitle": "DIMSE C-FIND Patient find with a filter find with filter 'PatientBirthDate' Should find patient with PatientBirthDate=19800102 and get patient successfully",
                      "timedOut": false,
                      "duration": 61,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToPatientLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "496ae146-572f-45e9-b4e7-fde6ce361da8",
                      "parentUUID": "50f29f90-7514-4a7b-ba9b-fdba2fff8a13",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "54e29042-44a0-4208-846d-8cd179dd2b11",
                    "496ae146-572f-45e9-b4e7-fde6ce361da8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 125,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "a4e337f1-1400-4ca0-8c5d-f803d2c920ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 66,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "882f5926-f45e-4a42-95b9-73774412b4ab",
          "title": "DIMSE C-FIND Study-Series",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindSeries.test.js",
          "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE C-FIND Study-Series\"",
              "fullTitle": "DIMSE C-FIND Study-Series \"before all\" hook in \"DIMSE C-FIND Study-Series\"",
              "timedOut": false,
              "duration": 68,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();\nawait storeInstanceForTest(\n    resolve(__dirname, \"../../testData/dicomFiles/1-01-mod-vo\")\n);",
              "err": {},
              "uuid": "b644604b-3e79-4825-a5a7-4a397c5ac040",
              "parentUUID": "882f5926-f45e-4a42-95b9-73774412b4ab",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"DIMSE C-FIND Study-Series\"",
              "fullTitle": "DIMSE C-FIND Study-Series \"after all\" hook in \"DIMSE C-FIND Study-Series\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "78b95965-f159-4890-a0ab-bb7148a9e0ae",
              "parentUUID": "882f5926-f45e-4a42-95b9-73774412b4ab",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should find 1 series successfully",
              "fullTitle": "DIMSE C-FIND Study-Series Should find 1 series successfully",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nexpect(message).have.string(\"Find Response: 1 (Pending)\");\nexpect(message).not.have.string(\"Find Response: 2 (Pending)\");",
              "err": {},
              "uuid": "2b1d5319-9e3f-4c7b-9fea-269268b303ca",
              "parentUUID": "882f5926-f45e-4a42-95b9-73774412b4ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5141a033-b59a-4122-beef-3ed50706dc22",
              "title": "find with a filter",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindSeries.test.js",
              "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "9a2dcaea-89cc-41d8-a707-f2eb890531d2",
                  "title": "query study-series with param 'Modality'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series with Modality=MR and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'Modality' Should find Study-Series with Modality=MR and get series successfully",
                      "timedOut": false,
                      "duration": 81,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "dd88471f-7c67-4477-9651-1b8e20c70035",
                      "parentUUID": "9a2dcaea-89cc-41d8-a707-f2eb890531d2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with Modality=DOC and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'Modality' Should find Study-Series with Modality=DOC and get series successfully",
                      "timedOut": false,
                      "duration": 82,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "41746f53-7240-4ff0-b434-e2eabd75ebc6",
                      "parentUUID": "9a2dcaea-89cc-41d8-a707-f2eb890531d2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dd88471f-7c67-4477-9651-1b8e20c70035",
                    "41746f53-7240-4ff0-b434-e2eabd75ebc6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 163,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "cd60bd04-ccc8-4f0f-9c24-bdd5fc7c72fc",
                  "title": "query study-series with param 'SeriesInstanceUID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series with SeriesInstanceUID=1.3.6.1.4.1.14519.5.2.1.62266640231940987006694557463549207147 and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesInstanceUID' Should find Study-Series with SeriesInstanceUID=1.3.6.1.4.1.14519.5.2.1.62266640231940987006694557463549207147 and get series successfully",
                      "timedOut": false,
                      "duration": 82,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "f7c23eb9-e765-4a19-9298-28a369b7d287",
                      "parentUUID": "cd60bd04-ccc8-4f0f-9c24-bdd5fc7c72fc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with SeriesInstanceUID=123456 and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesInstanceUID' Should find Study-Series with SeriesInstanceUID=123456 and get series successfully",
                      "timedOut": false,
                      "duration": 78,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "36b97b80-24fe-43c8-9f88-6832da3a4083",
                      "parentUUID": "cd60bd04-ccc8-4f0f-9c24-bdd5fc7c72fc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f7c23eb9-e765-4a19-9298-28a369b7d287",
                    "36b97b80-24fe-43c8-9f88-6832da3a4083"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 160,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "c3856bc0-11fc-46d1-8479-1ca02f39fd5b",
                  "title": "query study-series with param 'SeriesNumber'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series with SeriesNumber=13 and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesNumber' Should find Study-Series with SeriesNumber=13 and get series successfully",
                      "timedOut": false,
                      "duration": 79,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "b311290b-2dab-48a8-a9c9-d6ceec90d394",
                      "parentUUID": "c3856bc0-11fc-46d1-8479-1ca02f39fd5b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with SeriesNumber=1 and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesNumber' Should find Study-Series with SeriesNumber=1 and get series successfully",
                      "timedOut": false,
                      "duration": 75,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "b3683999-e335-4c6c-bdf6-76b79e7edc87",
                      "parentUUID": "c3856bc0-11fc-46d1-8479-1ca02f39fd5b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b311290b-2dab-48a8-a9c9-d6ceec90d394",
                    "b3683999-e335-4c6c-bdf6-76b79e7edc87"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 154,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "e9054abe-5264-425d-aa47-387deecbf628",
                  "title": "query study-series with param 'SeriesDate'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series with SeriesDate=20090721 and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesDate' Should find Study-Series with SeriesDate=20090721 and get series successfully",
                      "timedOut": false,
                      "duration": 85,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "39dbe1e7-9317-49a3-85a9-289607b6a91b",
                      "parentUUID": "e9054abe-5264-425d-aa47-387deecbf628",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with SeriesDate=19990101 and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesDate' Should find Study-Series with SeriesDate=19990101 and get series successfully",
                      "timedOut": false,
                      "duration": 77,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "78c642fb-6432-4d7c-95a6-02b673a95b9d",
                      "parentUUID": "e9054abe-5264-425d-aa47-387deecbf628",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "39dbe1e7-9317-49a3-85a9-289607b6a91b",
                    "78c642fb-6432-4d7c-95a6-02b673a95b9d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 162,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "761629b6-79c2-4a84-8c8c-42125b014ca5",
                  "title": "query study-series with param 'SeriesDescription'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series with SeriesDescription=*BRAIN* and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesDescription' Should find Study-Series with SeriesDescription=*BRAIN* and get series successfully",
                      "timedOut": false,
                      "duration": 82,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "07a240f0-fd5a-42f2-945f-e1a9d63f6c36",
                      "parentUUID": "761629b6-79c2-4a84-8c8c-42125b014ca5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with SeriesDescription=*Capture* and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query study-series with param 'SeriesDescription' Should find Study-Series with SeriesDescription=*Capture* and get series successfully",
                      "timedOut": false,
                      "duration": 74,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "9a51e204-c229-45de-97c0-741ff92497b5",
                      "parentUUID": "761629b6-79c2-4a84-8c8c-42125b014ca5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "07a240f0-fd5a-42f2-945f-e1a9d63f6c36",
                    "9a51e204-c229-45de-97c0-741ff92497b5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 156,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "faeab4e2-39d0-4d29-9227-6670d3e5ae85",
                  "title": "query series with param 'PerformingPhysicianName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series with PerformingPhysicianName=cName and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query series with param 'PerformingPhysicianName' Should find Study-Series with PerformingPhysicianName=cName and get series successfully",
                      "timedOut": false,
                      "duration": 86,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "8bac8fdc-655f-4e04-9799-564e68d2a19a",
                      "parentUUID": "faeab4e2-39d0-4d29-9227-6670d3e5ae85",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with PerformingPhysicianName=dName and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query series with param 'PerformingPhysicianName' Should find Study-Series with PerformingPhysicianName=dName and get series successfully",
                      "timedOut": false,
                      "duration": 81,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "7be36362-8c60-4a88-a75c-210e6e31a0b9",
                      "parentUUID": "faeab4e2-39d0-4d29-9227-6670d3e5ae85",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with PerformingPhysicianName=foobar and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query series with param 'PerformingPhysicianName' Should find Study-Series with PerformingPhysicianName=foobar and get series successfully",
                      "timedOut": false,
                      "duration": 79,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "773f42d1-ed87-4273-b5ae-0a3d78fd420b",
                      "parentUUID": "faeab4e2-39d0-4d29-9227-6670d3e5ae85",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8bac8fdc-655f-4e04-9799-564e68d2a19a",
                    "7be36362-8c60-4a88-a75c-210e6e31a0b9",
                    "773f42d1-ed87-4273-b5ae-0a3d78fd420b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 246,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "c76ac0ec-73d6-48ba-9991-576d6f6610cd",
                  "title": "query series with param 'OperatorsName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindSeries.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study-Series with OperatorsName=pyName and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query series with param 'OperatorsName' Should find Study-Series with OperatorsName=pyName and get series successfully",
                      "timedOut": false,
                      "duration": 86,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "fe41e75f-28e7-49f6-b991-28e74bcf4bd5",
                      "parentUUID": "c76ac0ec-73d6-48ba-9991-576d6f6610cd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with OperatorsName=py and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query series with param 'OperatorsName' Should find Study-Series with OperatorsName=py and get series successfully",
                      "timedOut": false,
                      "duration": 82,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "5939c08d-f1a7-49f7-9b98-346297433905",
                      "parentUUID": "c76ac0ec-73d6-48ba-9991-576d6f6610cd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study-Series with OperatorsName=foobar and get series successfully",
                      "fullTitle": "DIMSE C-FIND Study-Series find with a filter query series with param 'OperatorsName' Should find Study-Series with OperatorsName=foobar and get series successfully",
                      "timedOut": false,
                      "duration": 76,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToSeriesLevel();\nfindScuCmdBuilder.addKeyAndValue(\"StudyInstanceUID\", STUDY_UID);\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "6a667758-c015-4a4d-82a3-0c5db10700b8",
                      "parentUUID": "c76ac0ec-73d6-48ba-9991-576d6f6610cd",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fe41e75f-28e7-49f6-b991-28e74bcf4bd5",
                    "5939c08d-f1a7-49f7-9b98-346297433905",
                    "6a667758-c015-4a4d-82a3-0c5db10700b8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 244,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "2b1d5319-9e3f-4c7b-9fea-269268b303ca"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 79,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "5f7b5d05-a99f-421f-b2e9-8642e141b5ee",
          "title": "DIMSE C-FIND Study",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindStudy.test.js",
          "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE C-FIND Study\"",
              "fullTitle": "DIMSE C-FIND Study \"before all\" hook in \"DIMSE C-FIND Study\"",
              "timedOut": false,
              "duration": 1688,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "4de22d03-a6c3-487a-8db9-524a95b8fdd7",
              "parentUUID": "5f7b5d05-a99f-421f-b2e9-8642e141b5ee",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"DIMSE C-FIND Study\"",
              "fullTitle": "DIMSE C-FIND Study \"after all\" hook in \"DIMSE C-FIND Study\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();",
              "err": {},
              "uuid": "2f2943bf-3ee6-416d-a151-20da8302e918",
              "parentUUID": "5f7b5d05-a99f-421f-b2e9-8642e141b5ee",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should find 4 studies successfully",
              "fullTitle": "DIMSE C-FIND Study Should find 4 studies successfully",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nexpect(message).have.string(\"Find Response: 4 (Pending)\");\nexpect(message).not.have.string(\"Find Response: 5 (Pending)\");",
              "err": {},
              "uuid": "dbd54005-ec65-4862-8cc1-7276c06e288a",
              "parentUUID": "5f7b5d05-a99f-421f-b2e9-8642e141b5ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "6c1046b6-9be5-431f-b6f2-f24bd4e39b55",
              "title": "find with a filter",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindStudy.test.js",
              "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a55db279-6930-46aa-8952-dbe54ff0f859",
                  "title": "find with filter 'StudyDate'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with StudyDate=20100213 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyDate' Should find Study with StudyDate=20100213 and get study successfully",
                      "timedOut": false,
                      "duration": 85,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "6d4c8807-7e8d-4930-8657-29c256e4dad0",
                      "parentUUID": "a55db279-6930-46aa-8952-dbe54ff0f859",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyDate=-20100213 and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyDate' Should find Study with StudyDate=-20100213 and get studies successfully",
                      "timedOut": false,
                      "duration": 103,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "622abfc4-40eb-4f0c-806f-975a35a23c80",
                      "parentUUID": "a55db279-6930-46aa-8952-dbe54ff0f859",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyDate=20100101- and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyDate' Should find Study with StudyDate=20100101- and get studies successfully",
                      "timedOut": false,
                      "duration": 99,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "6e1252f5-8b4d-4f80-885a-fd6f4823aeef",
                      "parentUUID": "a55db279-6930-46aa-8952-dbe54ff0f859",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyDate=20100212-20181031 and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyDate' Should find Study with StudyDate=20100212-20181031 and get studies successfully",
                      "timedOut": false,
                      "duration": 93,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "aa022719-dc01-44b4-96a7-b2c674d4ba92",
                      "parentUUID": "a55db279-6930-46aa-8952-dbe54ff0f859",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6d4c8807-7e8d-4930-8657-29c256e4dad0",
                    "622abfc4-40eb-4f0c-806f-975a35a23c80",
                    "6e1252f5-8b4d-4f80-885a-fd6f4823aeef",
                    "aa022719-dc01-44b4-96a7-b2c674d4ba92"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 380,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "802297a2-9d9b-4e5a-ba41-3278212392f2",
                  "title": "find with filter 'StudyTime'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with StudyTime=170922 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyTime' Should find Study with StudyTime=170922 and get study successfully",
                      "timedOut": false,
                      "duration": 89,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "5918a12f-c983-4700-9aa1-d2eeec8560b8",
                      "parentUUID": "802297a2-9d9b-4e5a-ba41-3278212392f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyTime=-170922 and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyTime' Should find Study with StudyTime=-170922 and get studies successfully",
                      "timedOut": false,
                      "duration": 107,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "ea6498ee-1615-438b-ab5a-8965ecb084a3",
                      "parentUUID": "802297a2-9d9b-4e5a-ba41-3278212392f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyTime=150000- and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyTime' Should find Study with StudyTime=150000- and get studies successfully",
                      "timedOut": false,
                      "duration": 94,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "eff8c094-38a4-4049-9009-550e905e3dce",
                      "parentUUID": "802297a2-9d9b-4e5a-ba41-3278212392f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyTime=130000-160000 and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'StudyTime' Should find Study with StudyTime=130000-160000 and get studies successfully",
                      "timedOut": false,
                      "duration": 94,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "05b17ecb-a94e-4a47-b25c-ead3a019b4f0",
                      "parentUUID": "802297a2-9d9b-4e5a-ba41-3278212392f2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5918a12f-c983-4700-9aa1-d2eeec8560b8",
                    "ea6498ee-1615-438b-ab5a-8965ecb084a3",
                    "eff8c094-38a4-4049-9009-550e905e3dce",
                    "05b17ecb-a94e-4a47-b25c-ead3a019b4f0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 384,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "0b770dd5-e070-467f-842e-737d069ec238",
                  "title": "find with filter 'AccessionNumber'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with AccessionNumber=3266660953883852 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'AccessionNumber' Should find Study with AccessionNumber=3266660953883852 and get study successfully",
                      "timedOut": false,
                      "duration": 90,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "4ba7ad41-2e54-4257-b34d-6fd88736d174",
                      "parentUUID": "0b770dd5-e070-467f-842e-737d069ec238",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with AccessionNumber=123456 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'AccessionNumber' Should find Study with AccessionNumber=123456 and get study successfully",
                      "timedOut": false,
                      "duration": 77,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "e31ae359-8c8c-468c-8b0e-0babd1a8e108",
                      "parentUUID": "0b770dd5-e070-467f-842e-737d069ec238",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4ba7ad41-2e54-4257-b34d-6fd88736d174",
                    "e31ae359-8c8c-468c-8b0e-0babd1a8e108"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 167,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "34c80a59-c96f-4e5d-bf5e-1c094e6bb320",
                  "title": "find with filter 'ModalitiesInStudy'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with ModalitiesInStudy=CT and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'ModalitiesInStudy' Should find Study with ModalitiesInStudy=CT and get studies successfully",
                      "timedOut": false,
                      "duration": 91,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "d4767901-7564-46fe-b416-80bfb614458f",
                      "parentUUID": "34c80a59-c96f-4e5d-bf5e-1c094e6bb320",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with ModalitiesInStudy=DOC and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter find with filter 'ModalitiesInStudy' Should find Study with ModalitiesInStudy=DOC and get study successfully",
                      "timedOut": false,
                      "duration": 82,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "8cb80473-1e9c-45ff-887b-a55789dac6cc",
                      "parentUUID": "34c80a59-c96f-4e5d-bf5e-1c094e6bb320",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d4767901-7564-46fe-b416-80bfb614458f",
                    "8cb80473-1e9c-45ff-887b-a55789dac6cc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 173,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "04b95885-a3e6-4c92-bb6a-0719feaed922",
                  "title": "query studies with param 'PatientName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with PatientName=\"Philips^Amy\" and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'PatientName' Should find Study with PatientName=\"Philips^Amy\" and get study successfully",
                      "timedOut": false,
                      "duration": 180,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "16780c5b-4c90-43e2-8aa3-fd07588df1c0",
                      "parentUUID": "04b95885-a3e6-4c92-bb6a-0719feaed922",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with PatientName=\"Philips*\" and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'PatientName' Should find Study with PatientName=\"Philips*\" and get study successfully",
                      "timedOut": false,
                      "duration": 76,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "66afe317-dbc5-4770-b443-e75b221fac62",
                      "parentUUID": "04b95885-a3e6-4c92-bb6a-0719feaed922",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with PatientName=\"foobar\" and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'PatientName' Should find Study with PatientName=\"foobar\" and get study successfully",
                      "timedOut": false,
                      "duration": 63,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "38c01e78-fb75-40da-8bb2-cc42ec936f8d",
                      "parentUUID": "04b95885-a3e6-4c92-bb6a-0719feaed922",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find studies with filter 'PatientName=Philips*&PatientName=*Amy' and get 1 study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'PatientName' Should find studies with filter 'PatientName=Philips*&PatientName=*Amy' and get 1 study successfully",
                      "timedOut": false,
                      "duration": 84,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel()\n    .addKeyAndValue(\"PatientName\", `\"Philips*\"`)\n    .addKeyAndValue(\"PatientName\", `\"*Amy\"`);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nexpect(message).have.string(\"Find Response: 1 (Pending)\");\nexpect(message).not.have.string(\"Find Response: 2 (Pending)\");",
                      "err": {},
                      "uuid": "d2d3a597-edb3-4191-bbee-ea0194023b8f",
                      "parentUUID": "04b95885-a3e6-4c92-bb6a-0719feaed922",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "16780c5b-4c90-43e2-8aa3-fd07588df1c0",
                    "66afe317-dbc5-4770-b443-e75b221fac62",
                    "38c01e78-fb75-40da-8bb2-cc42ec936f8d",
                    "d2d3a597-edb3-4191-bbee-ea0194023b8f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 403,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "1a2025d2-d8f2-4693-b771-01cbfec11fd8",
                  "title": "query studies with param 'PatientID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with PatientID=123456 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'PatientID' Should find Study with PatientID=123456 and get study successfully",
                      "timedOut": false,
                      "duration": 72,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "9e7c4ee3-327f-46e2-beed-9e2a3e76c3ad",
                      "parentUUID": "1a2025d2-d8f2-4693-b771-01cbfec11fd8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with PatientID=C3* and get studies successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'PatientID' Should find Study with PatientID=C3* and get studies successfully",
                      "timedOut": false,
                      "duration": 83,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "8138524e-037d-4748-9012-d5d708129499",
                      "parentUUID": "1a2025d2-d8f2-4693-b771-01cbfec11fd8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with PatientID=foobar and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'PatientID' Should find Study with PatientID=foobar and get study successfully",
                      "timedOut": false,
                      "duration": 67,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "41a96177-6804-4167-93ce-1bfb8d9342ba",
                      "parentUUID": "1a2025d2-d8f2-4693-b771-01cbfec11fd8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9e7c4ee3-327f-46e2-beed-9e2a3e76c3ad",
                    "8138524e-037d-4748-9012-d5d708129499",
                    "41a96177-6804-4167-93ce-1bfb8d9342ba"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 222,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "069fead2-45bd-4bcd-8dfd-740c09330e62",
                  "title": "query studies with param 'StudyInstanceUID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596634768 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'StudyInstanceUID' Should find Study with StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596634768 and get study successfully",
                      "timedOut": false,
                      "duration": 89,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "245d074b-f0ec-4e68-a6b9-a3087ab1bf76",
                      "parentUUID": "069fead2-45bd-4bcd-8dfd-740c09330e62",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596123456 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'StudyInstanceUID' Should find Study with StudyInstanceUID=1.3.6.1.4.1.14519.5.2.1.3023.4017.246199836259881483055596123456 and get study successfully",
                      "timedOut": false,
                      "duration": 79,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "bb713ffb-4d0e-4db8-bb44-a13155c48582",
                      "parentUUID": "069fead2-45bd-4bcd-8dfd-740c09330e62",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "245d074b-f0ec-4e68-a6b9-a3087ab1bf76",
                    "bb713ffb-4d0e-4db8-bb44-a13155c48582"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 168,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "6832e4d6-b326-4353-bd52-e85c0f0bc056",
                  "title": "query studies with param 'StudyID'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with StudyID=D18-1001 and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'StudyID' Should find Study with StudyID=D18-1001 and get study successfully",
                      "timedOut": false,
                      "duration": 88,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "f1848c9c-f581-46cd-b1c0-2b2240bd4806",
                      "parentUUID": "6832e4d6-b326-4353-bd52-e85c0f0bc056",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with StudyID=foo and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'StudyID' Should find Study with StudyID=foo and get study successfully",
                      "timedOut": false,
                      "duration": 79,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "ac3fdedb-25f3-4d9a-b4c4-27f75380e641",
                      "parentUUID": "6832e4d6-b326-4353-bd52-e85c0f0bc056",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f1848c9c-f581-46cd-b1c0-2b2240bd4806",
                    "ac3fdedb-25f3-4d9a-b4c4-27f75380e641"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 167,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                },
                {
                  "uuid": "480eb15b-4f74-46a3-bdff-e71152471e22",
                  "title": "query studies with param 'ReferringPhysicianName'",
                  "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "file": "\\test\\dimse\\c-find\\cFindStudy.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Should find Study with ReferringPhysicianName=\"ROBERT^BROWN\" and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'ReferringPhysicianName' Should find Study with ReferringPhysicianName=\"ROBERT^BROWN\" and get study successfully",
                      "timedOut": false,
                      "duration": 85,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "c2b4ea3b-d2f6-4d82-ac69-2bc8394b91c6",
                      "parentUUID": "480eb15b-4f74-46a3-bdff-e71152471e22",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Should find Study with ReferringPhysicianName=\"foo\" and get study successfully",
                      "fullTitle": "DIMSE C-FIND Study find with a filter query studies with param 'ReferringPhysicianName' Should find Study with ReferringPhysicianName=\"foo\" and get study successfully",
                      "timedOut": false,
                      "duration": 84,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let findScuCmdBuilder = new FindScuCmdBuilder(GlobalQrScpForTest.ip, GlobalQrScpForTest.port, \"RACCOON_TEST\");\nfindScuCmdBuilder.setToStudyLevel();\nfindScuCmdBuilder.addKeyAndValue(param, value);\nlet cmd = findScuCmdBuilder.getCmd();\nlet { code, message } = await doCFind(cmd);\nexpect(code).to.be.equal(0);\nif (expectedCount === 0) {\n    expect(message).have.string(\"I: Received Final Find Response (Success)\");\n    expect(message).not.have.string(\"Find Response: 1 (Pending)\");\n    return;\n}\nexpect(message).have.string(`Find Response: ${expectedCount} (Pending)`);\nexpect(message).not.have.string(`Find Response: ${expectedCount + 1} (Pending)`);",
                      "err": {},
                      "uuid": "a153a2c1-32c6-42fd-89f0-35be62f802e6",
                      "parentUUID": "480eb15b-4f74-46a3-bdff-e71152471e22",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c2b4ea3b-d2f6-4d82-ac69-2bc8394b91c6",
                    "a153a2c1-32c6-42fd-89f0-35be62f802e6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 169,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 3000000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [
            "dbd54005-ec65-4862-8cc1-7276c06e288a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 106,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "2b4aa095-23de-492e-bd58-d67b2040b875",
          "title": "DIMSE C-MOVE",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\c-move\\c-move.test.js",
          "file": "\\test\\dimse\\c-move\\c-move.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE C-MOVE\"",
              "fullTitle": "DIMSE C-MOVE \"before all\" hook in \"DIMSE C-MOVE\"",
              "timedOut": false,
              "duration": 1688,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();\nawait storeTestDicomFiles();",
              "err": {},
              "uuid": "766e4f1e-4c32-4531-a7a5-b9ddbeb64e7a",
              "parentUUID": "2b4aa095-23de-492e-bd58-d67b2040b875",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should download 11 instances with patient level",
              "fullTitle": "DIMSE C-MOVE Should download 11 instances with patient level",
              "timedOut": false,
              "duration": 1213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let moveResult = await doCMove([\n    \"-k\",\n    \"0008,0052=PATIENT\",\n    \"-k\",\n    `0010,0020=${PATIENT_ID}`\n]);\nexpect(moveResult.code).to.equal(0);\nexpect(moveResult.message).have.string(\"I: Received Store Request (MsgID 11\");\nexpect(moveResult.message).have.string(\"I: Received Final Move Response (Success)\");\nexpect(moveResult.message).not.have.string(\"I: Received Store Request (MsgID 12\");",
              "err": {},
              "uuid": "d04fe24e-d5e5-41b8-bb44-9dc34337c748",
              "parentUUID": "2b4aa095-23de-492e-bd58-d67b2040b875",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should download 11 instances with patient-study level",
              "fullTitle": "DIMSE C-MOVE Should download 11 instances with patient-study level",
              "timedOut": false,
              "duration": 1210,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let moveResult = await doCMove([\n    \"-k\",\n    \"0008,0052=STUDY\",\n    \"-k\",\n    `0010,0020=${PATIENT_ID}`,\n    \"-k\",\n    `0020,000d=${STUDY_UID}`\n]);\nexpect(moveResult.code).to.equal(0);\nexpect(moveResult.message).have.string(\"I: Received Store Request (MsgID 11\");\nexpect(moveResult.message).have.string(\"I: Received Final Move Response (Success)\");\nexpect(moveResult.message).not.have.string(\"I: Received Store Request (MsgID 12\");",
              "err": {},
              "uuid": "1a60a2f1-a553-4c96-b770-f0b070abeefb",
              "parentUUID": "2b4aa095-23de-492e-bd58-d67b2040b875",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should download 5 instances with patient-study-series level",
              "fullTitle": "DIMSE C-MOVE Should download 5 instances with patient-study-series level",
              "timedOut": false,
              "duration": 1147,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let moveResult = await doCMove([\n    \"-k\",\n    \"0008,0052=SERIES\",\n    \"-k\",\n    `0010,0020=${PATIENT_ID}`,\n    \"-k\",\n    `0020,000d=${STUDY_UID}`,\n    \"-k\",\n    `0020,000e=${SERIES_UID}`\n]);\nexpect(moveResult.code).to.equal(0);\nexpect(moveResult.message).have.string(\"I: Received Store Request (MsgID 5\");\nexpect(moveResult.message).have.string(\"I: Received Final Move Response (Success)\");\nexpect(moveResult.message).not.have.string(\"I: Received Store Request (MsgID 6\");",
              "err": {},
              "uuid": "016fb66c-59bd-47ff-a4a3-9f9d84c1959e",
              "parentUUID": "2b4aa095-23de-492e-bd58-d67b2040b875",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should download 1 instance with patient-study-series-instance level",
              "fullTitle": "DIMSE C-MOVE Should download 1 instance with patient-study-series-instance level",
              "timedOut": false,
              "duration": 1077,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let moveResult = await doCMove([\n    \"-k\",\n    \"0008,0052=IMAGE\",\n    \"-k\",\n    `0010,0020=${PATIENT_ID}`,\n    \"-k\",\n    `0020,000d=${STUDY_UID}`,\n    \"-k\",\n    `0020,000e=${SERIES_UID}`,\n    \"-k\",\n    `0008,0018=${INSTANCE_UID}`\n]);\nexpect(moveResult.code).to.equal(0);\nexpect(moveResult.message).have.string(\"I: Received Store Request (MsgID 1\");\nexpect(moveResult.message).have.string(\"I: Received Final Move Response (Success)\");\nexpect(moveResult.message).not.have.string(\"I: Received Store Request (MsgID 2\");",
              "err": {},
              "uuid": "6960ed93-8e7f-444f-98a1-b605f2d55b47",
              "parentUUID": "2b4aa095-23de-492e-bd58-d67b2040b875",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d04fe24e-d5e5-41b8-bb44-9dc34337c748",
            "1a60a2f1-a553-4c96-b770-f0b070abeefb",
            "016fb66c-59bd-47ff-a4a3-9f9d84c1959e",
            "6960ed93-8e7f-444f-98a1-b605f2d55b47"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4647,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "539c2ac5-55a7-4ca2-814c-12ceeaffe501",
          "title": "DIMSE Check Source AE",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\checktSourceAE.test.js",
          "file": "\\test\\dimse\\checktSourceAE.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE Check Source AE\"",
              "fullTitle": "DIMSE Check Source AE \"before all\" hook in \"DIMSE Check Source AE\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "process.env.DIMSE_CHECK_STORE_SCU_AE = true;\nprocess.env.DIMSE_CHECK_FIND_SCU_AE = true;\nprocess.env.DIMSE_CHECK_MOVE_SCU_AE = true;\nip = getLocalIp();\nport = await getPorts();\nscp = new DcmQrScp(ip, port, \"RACCOON_TEST\", TEST_ALLOW_AEs);\nawait scp.start();",
              "err": {},
              "uuid": "aa21f50c-e401-4983-a79f-7490ca069b27",
              "parentUUID": "539c2ac5-55a7-4ca2-814c-12ceeaffe501",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"DIMSE Check Source AE\"",
              "fullTitle": "DIMSE Check Source AE \"after all\" hook in \"DIMSE Check Source AE\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "process.env.DIMSE_CHECK_STORE_SCU_AE = false;\nprocess.env.DIMSE_CHECK_FIND_SCU_AE = false;\nprocess.env.DIMSE_CHECK_MOVE_SCU_AE = false;",
              "err": {},
              "uuid": "f6ccceae-8ce7-4a6d-9028-8409159e5192",
              "parentUUID": "539c2ac5-55a7-4ca2-814c-12ceeaffe501",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "C-FIND: Should raise error when using invalid AE",
              "fullTitle": "DIMSE Check Source AE C-FIND: Should raise error when using invalid AE",
              "timedOut": false,
              "duration": 66,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { message } = await doCFind([\n    \"-aet\",\n    \"INVALID\",\n    \"-aec\",\n    \"RACCOON_TEST\",\n    \"-v\",\n    ip,\n    port,\n    \"-P\",\n    \"-k\",\n    \"0008,0052=PATIENT\"\n]);\nexpect(message).have.string(Status.NotAuthorized.toString(16));",
              "err": {},
              "uuid": "acc000d4-353e-4d2e-b118-74f5c5b88b14",
              "parentUUID": "539c2ac5-55a7-4ca2-814c-12ceeaffe501",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C-FIND: Should work properly when using valid AE",
              "fullTitle": "DIMSE Check Source AE C-FIND: Should work properly when using valid AE",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { message } = await doCFind([\n    \"-aet\",\n    TEST_ALLOW_AEs.sources.find[0].aeTitle,\n    \"-aec\",\n    \"RACCOON_TEST\",\n    \"-v\",\n    ip,\n    port,\n    \"-P\",\n    \"-k\",\n    \"0008,0052=PATIENT\"\n]);\nexpect(message).not.have.string(Status.NotAuthorized.toString(16));",
              "err": {},
              "uuid": "d2ee1e62-fa74-44fc-b4bf-9cb2d7d49016",
              "parentUUID": "539c2ac5-55a7-4ca2-814c-12ceeaffe501",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C-MOVE: Should raise error when using invalid AE",
              "fullTitle": "DIMSE Check Source AE C-MOVE: Should raise error when using invalid AE",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { message } = await doCMove(\"INVALID\", [\n    \"-k\",\n    \"0008,0052=PATIENT\",\n    \"-k\",\n    `0010,0020=${\"1234567890\"}`\n]);\nexpect(message).have.string(Status.NotAuthorized.toString(16));",
              "err": {},
              "uuid": "58916a36-109e-485f-9d93-db5ac2db81a6",
              "parentUUID": "539c2ac5-55a7-4ca2-814c-12ceeaffe501",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C-MOVE: Should work properly when using valid AE",
              "fullTitle": "DIMSE Check Source AE C-MOVE: Should work properly when using valid AE",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { message } = await doCMove(TEST_ALLOW_AEs.sources.move[0].aeTitle, [\n    \"-k\",\n    \"0008,0052=PATIENT\",\n    \"-k\",\n    `0010,0020=${\"1234567890\"}`\n]);\nexpect(message).not.have.string(Status.NotAuthorized.toString(16));",
              "err": {},
              "uuid": "2c8b2c86-e382-4ee4-996f-f7c45ca39f15",
              "parentUUID": "539c2ac5-55a7-4ca2-814c-12ceeaffe501",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C-STORE: Should raise error when using invalid AE",
              "fullTitle": "DIMSE Check Source AE C-STORE: Should raise error when using invalid AE",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { message } = await doCStore(\"INVALID\", pathResolve(__dirname, \"../testData/dicomFiles/1-01-mod-vo\"));\nexpect(message).have.string(Status.NotAuthorized.toString(16));",
              "err": {},
              "uuid": "c6fcd844-6e1f-4c31-93cc-00631f147c56",
              "parentUUID": "539c2ac5-55a7-4ca2-814c-12ceeaffe501",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "C-STORE: Should work properly when using valid AE",
              "fullTitle": "DIMSE Check Source AE C-STORE: Should work properly when using valid AE",
              "timedOut": false,
              "duration": 149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let { message } = await doCStore(TEST_ALLOW_AEs.sources.store[0].aeTitle, pathResolve(__dirname, \"../testData/dicomFiles/1-01-mod-vo\"));\nexpect(message).not.have.string(Status.NotAuthorized.toString(16));",
              "err": {},
              "uuid": "2b282647-1e88-4a51-9b29-758dc32b27b1",
              "parentUUID": "539c2ac5-55a7-4ca2-814c-12ceeaffe501",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "acc000d4-353e-4d2e-b118-74f5c5b88b14",
            "d2ee1e62-fa74-44fc-b4bf-9cb2d7d49016",
            "58916a36-109e-485f-9d93-db5ac2db81a6",
            "2c8b2c86-e382-4ee4-996f-f7c45ca39f15",
            "c6fcd844-6e1f-4c31-93cc-00631f147c56",
            "2b282647-1e88-4a51-9b29-758dc32b27b1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 497,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "2b21bde4-6020-4941-9227-717886c8856e",
          "title": "DIMSE STGCMT",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\stgcmt.test.js",
          "file": "\\test\\dimse\\stgcmt.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE STGCMT\"",
              "fullTitle": "DIMSE STGCMT \"before all\" hook in \"DIMSE STGCMT\"",
              "timedOut": false,
              "duration": 1841,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();\nawait storeTestDicomFiles(STUDY_PATH);",
              "err": {},
              "uuid": "aaec6d08-b3c2-45fc-9b34-24d5b11971e6",
              "parentUUID": "2b21bde4-6020-4941-9227-717886c8856e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should not have FailureReason when all instances exist",
              "fullTitle": "DIMSE STGCMT Should not have FailureReason when all instances exist",
              "timedOut": false,
              "duration": 716,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await doStgCmt(STUDY_PATH);\n\nexpect(response.code).to.equal(0);\nexpect(response.message).not.have.string(\"FailureReason\");",
              "err": {},
              "uuid": "c90dbd38-4922-45dc-a5f7-82002b9cc3ce",
              "parentUUID": "2b21bde4-6020-4941-9227-717886c8856e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have FailureReason when instance not exist",
              "fullTitle": "DIMSE STGCMT Should have FailureReason when instance not exist",
              "timedOut": false,
              "duration": 651,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await doStgCmt(NOT_FOUND_PATH);\n\nexpect(response.code).to.equal(0);\nexpect(response.message).have.string(\"FailureReason\");",
              "err": {},
              "uuid": "846782f7-a937-4bd3-b126-c955aeddfc47",
              "parentUUID": "2b21bde4-6020-4941-9227-717886c8856e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c90dbd38-4922-45dc-a5f7-82002b9cc3ce",
            "846782f7-a937-4bd3-b126-c955aeddfc47"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1367,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
          "title": "DIMSE C-STORE",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\dimse\\storescp.test.js",
          "file": "\\test\\dimse\\storescp.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"DIMSE C-STORE\"",
              "fullTitle": "DIMSE C-STORE \"before all\" hook in \"DIMSE C-STORE\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await GlobalQrScpForTest.createQrScp();\nawait dbInstance.destroyAll();",
              "err": {},
              "uuid": "c01f7357-230d-416e-9236-3c6a5c5413e9",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should store a DICOM instance with complete attributes successfully and have proper attributes",
              "fullTitle": "DIMSE C-STORE Should store a DICOM instance with complete attributes successfully and have proper attributes",
              "timedOut": false,
              "duration": 141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDicomFilename = path.resolve(__dirname, \"../testData/dicomFiles/1-01-mod-vo\");\n        const { code, message } = await doCStore(testDicomFilename);\n        expect(code).to.be.equal(0);\n        expect(message).contain(\"with status SUCCESS  : 1\");\n        let testFileDicomJson = await JDcm2Json.get(testDicomFilename);\n        await expectInstanceHaveProperAttributes(testFileDicomJson);",
              "err": {},
              "uuid": "2b13d61b-0aab-47e6-b04d-067c0432cb8b",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should update a DICOM instance",
              "fullTitle": "DIMSE C-STORE Should update a DICOM instance",
              "timedOut": false,
              "duration": 150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testDicomFilename = path.resolve(__dirname, \"../testData/forStore/1-01-mod-vo-updated\");\nconst { code, message } = await doCStore(testDicomFilename);\nexpect(code).to.be.equal(0);\nexpect(message).contain(\"with status SUCCESS  : 1\");\nlet testFileDicomJson = await JDcm2Json.get(testDicomFilename);\nawait expectInstanceHaveProperAttributes(testFileDicomJson);",
              "err": {},
              "uuid": "ba3b3ac5-c206-4e68-a561-0896cdd3d32d",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1, CR) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1, CR) successfully",
              "timedOut": false,
              "duration": 114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "0ff346d6-f214-4ed7-92d9-bdb2aec89d53",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1.1, DX) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.1.1, DX) successfully",
              "timedOut": false,
              "duration": 511,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "2620816a-8df5-4fd2-b4f3-c1a698806f5b",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, CT) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, CT) successfully",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "bf713639-6bc1-4c06-a07b-fb10d4900d19",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.4, MR) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.4, MR) successfully",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "df89c2ae-ae7b-4253-a9c1-bc0ed101f54e",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, US) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, US) successfully",
              "timedOut": false,
              "duration": 135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "365f5e8b-69c6-4ccb-b53b-2074434cd683",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.104.1, US) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.104.1, US) successfully",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "0bfd4c44-125e-4532-b5af-03b56c8f3b33",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, SC) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.7, SC) successfully",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "479c0e8d-1e1e-4adc-a618-fc0854f4377e",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, OT) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.2, OT) successfully",
              "timedOut": false,
              "duration": 128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "4cbcd541-a44c-4a34-be52-1d7582e1bcb3",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.9.1.1, ECG) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.9.1.1, ECG) successfully",
              "timedOut": false,
              "duration": 173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "ba86125d-f0b4-4a8a-a032-30bcc2f8a36a",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.12.1, XA) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.12.1, XA) successfully",
              "timedOut": false,
              "duration": 173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "604aef4c-f21c-451b-93be-6798ca5b42be",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.3.1, Multi-Frame (US)) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.3.1, Multi-Frame (US)) successfully",
              "timedOut": false,
              "duration": 124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "158f2dba-8917-4f20-b87b-17da3822d9b6",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.91.1, ANN) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.91.1, ANN) successfully",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "768f01e8-b92a-4ef7-bf7b-90fa4c5feefa",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.481.3, RTSTRUCT) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.481.3, RTSTRUCT) successfully",
              "timedOut": false,
              "duration": 212,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "b4bd6ba8-9b71-4e1e-89c8-ed3e71505804",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.66.4, SEG) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.66.4, SEG) successfully",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "0d249cdf-eb05-4e15-a2de-0c160e88fd1a",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.11.1, GSPS) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (SOP Class: 1.2.840.10008.5.1.4.1.1.11.1, GSPS) successfully",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "56520296-aca3-42e2-9837-fab185a3a318",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.91, JPEG 2000) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.91, JPEG 2000) successfully",
              "timedOut": false,
              "duration": 109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "a35dec1d-2af5-430c-ba24-1a601d0b35bc",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.51, JPEG Lossless) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.51, JPEG Lossless) successfully",
              "timedOut": false,
              "duration": 171,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "52a67b4e-27bf-4240-9b01-55c43bc0d7fd",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.50, JPEG Baseline) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.4.50, JPEG Baseline) successfully",
              "timedOut": false,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "2ac72208-7929-40bf-96ef-3b9fb5ca360b",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.1, Explicit VR Little Endian (Uncompressed)) successfully",
              "fullTitle": "DIMSE C-STORE Should store DICOM instance (Transfer Syntax: 1.2.840.10008.1.2.1, Explicit VR Little Endian (Uncompressed)) successfully",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "doCStore(filename).then(({ code, message }) => {\n    expect(code).to.be.equal(0);\n    expect(message).contain(\"with status SUCCESS  : 1\");\n    done();\n});",
              "err": {},
              "uuid": "6eeef4af-479e-4083-87b7-5269c920d23f",
              "parentUUID": "daa4d23c-2d3b-4b79-a4a6-b5b1fb44bea6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b13d61b-0aab-47e6-b04d-067c0432cb8b",
            "ba3b3ac5-c206-4e68-a561-0896cdd3d32d",
            "0ff346d6-f214-4ed7-92d9-bdb2aec89d53",
            "2620816a-8df5-4fd2-b4f3-c1a698806f5b",
            "bf713639-6bc1-4c06-a07b-fb10d4900d19",
            "df89c2ae-ae7b-4253-a9c1-bc0ed101f54e",
            "365f5e8b-69c6-4ccb-b53b-2074434cd683",
            "0bfd4c44-125e-4532-b5af-03b56c8f3b33",
            "479c0e8d-1e1e-4adc-a618-fc0854f4377e",
            "4cbcd541-a44c-4a34-be52-1d7582e1bcb3",
            "ba86125d-f0b4-4a8a-a032-30bcc2f8a36a",
            "604aef4c-f21c-451b-93be-6798ca5b42be",
            "158f2dba-8917-4f20-b87b-17da3822d9b6",
            "768f01e8-b92a-4ef7-bf7b-90fa4c5feefa",
            "b4bd6ba8-9b71-4e1e-89c8-ed3e71505804",
            "0d249cdf-eb05-4e15-a2de-0c160e88fd1a",
            "56520296-aca3-42e2-9837-fab185a3a318",
            "a35dec1d-2af5-430c-ba24-1a601d0b35bc",
            "52a67b4e-27bf-4240-9b01-55c43bc0d7fd",
            "2ac72208-7929-40bf-96ef-3b9fb5ca360b",
            "6eeef4af-479e-4083-87b7-5269c920d23f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3153,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "12c6c6f2-3039-4c58-944d-ffd2ad840f98",
          "title": "WADO-RS get delete reason '/dicom-web/delete-reason/:uid'",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\getDeleteReason.test.js",
          "file": "\\test\\getDeleteReason.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"WADO-RS get delete reason '/dicom-web/delete-reason/:uid'\"",
              "fullTitle": "WADO-RS get delete reason '/dicom-web/delete-reason/:uid' \"before all\" hook in \"WADO-RS get delete reason '/dicom-web/delete-reason/:uid'\"",
              "timedOut": false,
              "duration": 1674,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dbInstance.destroyAll();\nawait storeTestDicomFiles();\nawait inject(app, {\n    method: \"POST\",\n    url: `/dicom-web/studies/${STUDY_UID}/delete-with-reason`,\n    headers: {\n        \"Content-Type\": \"application/dicom+json\"\n    },\n    payload: JSON.stringify({ reason: \"test\" })\n});",
              "err": {},
              "uuid": "56c0f4a8-45c5-4680-80d8-09b02c88234d",
              "parentUUID": "12c6c6f2-3039-4c58-944d-ffd2ad840f98",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should get delete reason for study",
              "fullTitle": "WADO-RS get delete reason '/dicom-web/delete-reason/:uid' Should get delete reason for study",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await inject(app, {\n    method: \"GET\",\n    url: `/dicom-web/delete-reason/${STUDY_UID}`\n});\nexpect(response.statusCode).to.equal(200);\nlet deleteReason = await response.json();\nexpect(deleteReason).have.property(\"reason\").to.be.equal(\"test\");",
              "err": {},
              "uuid": "19945399-984f-4353-a8a6-fc90802d93d7",
              "parentUUID": "12c6c6f2-3039-4c58-944d-ffd2ad840f98",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "19945399-984f-4353-a8a6-fc90802d93d7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "9e7c198b-ed9e-45e8-b24f-77a3b71fa15e",
          "title": "HL7 OMI",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\hl7\\hl7-omi-to-dicom-json.test.js",
          "file": "\\test\\hl7\\hl7-omi-to-dicom-json.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f9c9dea1-ade9-4413-b84e-b0b767b79843",
              "title": "Parse OMI To DICOM Json",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\hl7\\hl7-omi-to-dicom-json.test.js",
              "file": "\\test\\hl7\\hl7-omi-to-dicom-json.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse OMI to dicom json and have correct properties",
                  "fullTitle": "HL7 OMI Parse OMI To DICOM Json should parse OMI to dicom json and have correct properties",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let ormMessage = fs.readFileSync(\n    join(__dirname, \"../testData/hl7/omi-for-adt.hl7\"),\n    \"utf-8\"\n);\nlet ormMessageSplit = ormMessage.split(/(\\r\\n|\\n|$)/m);\normMessage = ormMessageSplit.join(\"\\r\");\nlet hl7Parser = new Hl7Parser();\nlet dicomJsonParser = new Hl7ToDicomMwlParser(hl7Parser.parse(ormMessage));\nlet mwl = dicomJsonParser.toDicomMwlJson(\"OMI\");\n    \n// Patient ID\nexpect(mwl).has.property(\"00100020\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"454721\");\n// Patient Name\nexpect(mwl).has.property(\"00100010\").has.property(\"Value\").has.property(\"0\").has.property(\"Alphabetic\").to.be.equal(\"DOE^JOHN^^^^\");\n// Patient Birth Date\nexpect(mwl).has.property(\"00100030\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"19480203\");\n// Patient Sex\nexpect(mwl).has.property(\"00100040\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"M\");\n// Scheduled Procedure Step Sequence\nexpect(mwl).has.property(\"00400100\").has.property(\"Value\").has.lengthOf(1);\nlet spsSeq = mwl[\"00400100\"][\"Value\"][0];\n// Scheduled Station AE Title\nexpect(spsSeq).has.property(\"00400001\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"ScheduledStationAET1\");\nexpect(spsSeq).has.property(\"00400001\").has.property(\"Value\").has.property(\"1\").to.be.equal(\"ScheduledStationAET2\");\n// Scheduled Procedure Step Start Date\nexpect(spsSeq).has.property(\"00400002\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"20000816\");\n// Scheduled Procedure Step Start Time\nexpect(spsSeq).has.property(\"00400003\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"151000\");\n// Modality\nexpect(spsSeq).has.property(\"00080060\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"CT\");\n// Scheduled Performing Physician's Name\nexpect(spsSeq).has.property(\"00400006\").has.property(\"Value\").has.property(\"0\").has.property(\"Alphabetic\").to.be.equal(\"ScheduledPerformingPhysicianNameFN^ScheduledPerformingPhysicianNameGN^ScheduledPerformingPhysicianNameMN^^DR^Md\");\n// Scheduled Procedure Step Description\nexpect(spsSeq).has.property(\"00400007\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"Microscopic Observation\");\n// Scheduled Protocol Code Sequence\nexpect(spsSeq).has.property(\"00400008\").has.property(\"Value\").has.lengthOf(1);\nlet spsScheduledProtocolCodeSeq = spsSeq[\"00400008\"][\"Value\"][0];\n// Scheduled Protocol Code Value\nexpect(spsScheduledProtocolCodeSeq).has.property(\"00080100\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"10637-7\");\n// Scheduled Protocol Code Scheme Designator\nexpect(spsScheduledProtocolCodeSeq).has.property(\"00080102\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"LN\");\n// Scheduled Protocol Code Meaning\nexpect(spsScheduledProtocolCodeSeq).has.property(\"00080104\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"Microscopic Observation\");\n// Scheduled Procedure Step ID\nexpect(spsSeq).has.property(\"00400009\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"SPS-johs4U\");\n// Scheduled Procedure Step Status\nexpect(spsSeq).has.property(\"00400020\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"SCHEDULED\");\n\n// Requested Procedure ID\nexpect(mwl).has.property(\"00401001\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"RP-chaeF9\");\n// Accession Number\nexpect(mwl).has.property(\"00080050\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"ACC-shi3Ub\");",
                  "err": {},
                  "uuid": "42a63b1f-e35e-40f7-bb8d-8d652c6a2dae",
                  "parentUUID": "f9c9dea1-ade9-4413-b84e-b0b767b79843",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42a63b1f-e35e-40f7-bb8d-8d652c6a2dae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "e84e1378-5906-44f2-9679-fd3aa58e2cf2",
          "title": "HL7 ORM",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\hl7\\hl7-orm-to-dicom-json.test.js",
          "file": "\\test\\hl7\\hl7-orm-to-dicom-json.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e6c75c0c-c0d2-4923-850f-bedc2c664cb1",
              "title": "Parse ORM To DICOM Json",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\hl7\\hl7-orm-to-dicom-json.test.js",
              "file": "\\test\\hl7\\hl7-orm-to-dicom-json.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse orm to dicom json and have correct properties",
                  "fullTitle": "HL7 ORM Parse ORM To DICOM Json should parse orm to dicom json and have correct properties",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let ormMessage = fs.readFileSync(\n    join(__dirname, \"../testData/hl7/orm-for-adt.hl7\"),\n    \"utf-8\"\n);\nlet ormMessageSplit = ormMessage.split(/(\\r\\n|\\n|$)/m);\normMessage = ormMessageSplit.join(\"\\r\");\nlet hl7Parser = new Hl7Parser();\nlet dicomJsonParser = new Hl7ToDicomMwlParser(hl7Parser.parse(ormMessage));\nlet mwl = dicomJsonParser.toDicomMwlJson(\"ORM\");\n    \n// Patient ID\nexpect(mwl).has.property(\"00100020\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"454721\");\n// Patient Name\nexpect(mwl).has.property(\"00100010\").has.property(\"Value\").has.property(\"0\").has.property(\"Alphabetic\").to.be.equal(\"DOE^JOHN^^^^\");\n// Patient Birth Date\nexpect(mwl).has.property(\"00100030\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"19480203\");\n// Patient Sex\nexpect(mwl).has.property(\"00100040\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"M\");\n// Scheduled Procedure Step Sequence\nexpect(mwl).has.property(\"00400100\").has.property(\"Value\").has.lengthOf(1);\nlet spsSeq = mwl[\"00400100\"][\"Value\"][0];\n// Scheduled Procedure Step Start Date\nexpect(spsSeq).has.property(\"00400002\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"20150325\");\n// Scheduled Procedure Step Start Time\nexpect(spsSeq).has.property(\"00400003\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"160228\");\n// Modality\nexpect(spsSeq).has.property(\"00080060\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"CT\");\n// Scheduled Performing Physician's Name\nexpect(spsSeq).has.property(\"00400006\").has.property(\"Value\").has.property(\"0\").has.property(\"Alphabetic\").to.be.equal(\"^AMY^JANE^^^^\");\n// Scheduled Procedure Step Description\nexpect(spsSeq).has.property(\"00400007\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"Description\");\n// Scheduled Protocol Code Sequence\nexpect(spsSeq).has.property(\"00400008\").has.property(\"Value\").has.lengthOf(1);\nlet spsScheduledProtocolCodeSeq = spsSeq[\"00400008\"][\"Value\"][0];\n// Scheduled Protocol Code Value\nexpect(spsScheduledProtocolCodeSeq).has.property(\"00080100\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"CodeValue\");\n// Scheduled Protocol Code Scheme Designator\nexpect(spsScheduledProtocolCodeSeq).has.property(\"00080102\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"99Designator\");\n// Scheduled Protocol Code Meaning\nexpect(spsScheduledProtocolCodeSeq).has.property(\"00080104\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"Description\");\n// Scheduled Procedure Step ID\nexpect(spsSeq).has.property(\"00400009\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"SPS-ohgh3W\");\n// Scheduled Procedure Step Status\nexpect(spsSeq).has.property(\"00400020\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"SCHEDULED\");\n// Requested Procedure ID\nexpect(mwl).has.property(\"00401001\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"RP-aeW9ee\");\n// Accession Number\nexpect(mwl).has.property(\"00080050\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"ACC-bei3AP\");",
                  "err": {},
                  "uuid": "d8dacbd3-4255-4763-93f8-4b37656991a8",
                  "parentUUID": "e6c75c0c-c0d2-4923-850f-bedc2c664cb1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8dacbd3-4255-4763-93f8-4b37656991a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "1ae1b734-bd14-49c6-b264-99d977fe7ae2",
          "title": "HL7 Patient",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\hl7\\hl7-patient-to-dicom-json.test.js",
          "file": "\\test\\hl7\\hl7-patient-to-dicom-json.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "36fec150-dc78-4d37-a1a0-f783836f000f",
              "title": "Parse Patient To DICOM Json",
              "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\hl7\\hl7-patient-to-dicom-json.test.js",
              "file": "\\test\\hl7\\hl7-patient-to-dicom-json.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should parse patient to dicom json and have correct properties",
                  "fullTitle": "HL7 Patient Parse Patient To DICOM Json should parse patient to dicom json and have correct properties",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let adtMessage = fs.readFileSync(\n    join(__dirname, \"../testData/hl7/adt.hl7\"),\n    \"utf-8\"\n);\nlet adtMessageSplit = adtMessage.split(/(\\r\\n|\\n|$)/m);\nadtMessage = adtMessageSplit.join(\"\\r\");\nlet hl7Parser = new Hl7Parser();\nlet dicomJsonParser = new Hl7ToDicomPatientParser(hl7Parser.parse(adtMessage));\nlet patient = dicomJsonParser.toDicomPatientJson();\n    \n// Patient ID\nexpect(patient).has.property(\"00100020\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"454721\");\n// Patient Name\nexpect(patient).has.property(\"00100010\").has.property(\"Value\").has.property(\"0\").has.property(\"Alphabetic\").to.be.equal(\"DOE^JOHN^^^^\");\n// Patient Birth Date\nexpect(patient).has.property(\"00100030\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"19480203\");\n// Patient Sex\nexpect(patient).has.property(\"00100040\").has.property(\"Value\").has.property(\"0\").to.be.equal(\"M\");",
                  "err": {},
                  "uuid": "aaa2422f-c07e-46b4-a39d-e4dc154bcff4",
                  "parentUUID": "36fec150-dc78-4d37-a1a0-f783836f000f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aaa2422f-c07e-46b4-a39d-e4dc154bcff4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 3000000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        },
        {
          "uuid": "cf01bba7-bca2-489f-94e4-657a751b9abf",
          "title": "isRouterCanAccess",
          "fullFile": "K:\\nodejs\\_my-project\\DICOM\\raccoon-workspace\\raccoon-business\\test\\plugins\\isRouterCanAccess.test.js",
          "file": "\\test\\plugins\\isRouterCanAccess.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"isRouterCanAccess\"",
              "fullTitle": "isRouterCanAccess \"before all\" hook in \"isRouterCanAccess\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mockPluginsConfig = {\n    \"test-plugin\": {\n        acl: {\n            enable: true,\n            roles: [\n                {\n                    name: \"admin\",\n                    routers: [\n                        { path: \"/admin/*\", method: \"GET\" },\n                        { path: \"/api/*\", method: \"*\" }\n                    ]\n                },\n                {\n                    name: \"user\",\n                    routers: [\n                        { path: \"/api/public/*\", method: \"GET\" }\n                    ]\n                }\n            ]\n        }\n    }\n};\nconst utils = proxyquire(\"../../plugins/plugins-utils\", {\n    \"./plugin.class\": {\n        Plugin: {\n            getConfig: () => ({ pluginsConfig: mockPluginsConfig })\n        }\n    }\n});\nisRouterCanAccess = utils.isRouterCanAccess;",
              "err": {},
              "uuid": "5be150b3-890b-45ee-9602-3a99a9654577",
              "parentUUID": "cf01bba7-bca2-489f-94e4-657a751b9abf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "應該在沒有 ACL 配置時返回 true",
              "fullTitle": "isRouterCanAccess 應該在沒有 ACL 配置時返回 true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { baseUrl: \"\", path: \"/any\", method: \"GET\" };\nconst result = isRouterCanAccess(req, \"plugin-without-acl\", [\"user\"]);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "c5846d4b-31bd-41b2-97ba-7df432a0e226",
              "parentUUID": "cf01bba7-bca2-489f-94e4-657a751b9abf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "應該在沒有 ACL 配置時返回 true",
              "fullTitle": "isRouterCanAccess 應該在沒有 ACL 配置時返回 true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mockPluginsConfig[\"test-plugin\"].acl.enable = false;\nconst req = { baseUrl: \"\", path: \"/any\", method: \"GET\" };\nconst result = isRouterCanAccess(req, \"test-plugin\", [\"user\"]);\nexpect(result).to.be.true;\nmockPluginsConfig[\"test-plugin\"].acl.enable = true;",
              "err": {},
              "uuid": "2bc6fbfc-38f6-44d9-9dfc-abed5d455bec",
              "parentUUID": "cf01bba7-bca2-489f-94e4-657a751b9abf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "應該允許 admin 訪問指定路由",
              "fullTitle": "isRouterCanAccess 應該允許 admin 訪問指定路由",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { baseUrl: \"\", path: \"/admin/dashboard\", method: \"GET\" };\nconst result = isRouterCanAccess(req, \"test-plugin\", [\"admin\"]);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "131c5e65-ae9b-4915-8d9e-0aa21d70ec1c",
              "parentUUID": "cf01bba7-bca2-489f-94e4-657a751b9abf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "應該允許 admin 使用任何 method 呼叫路由",
              "fullTitle": "isRouterCanAccess 應該允許 admin 使用任何 method 呼叫路由",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { baseUrl: \"\", path: \"/api/users\", method: \"POST\" };\nconst result = isRouterCanAccess(req, \"test-plugin\", [\"admin\"]);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "792ababd-e332-473f-945f-914ae61c8c57",
              "parentUUID": "cf01bba7-bca2-489f-94e4-657a751b9abf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "應該允許普通 user 訪問公開路由",
              "fullTitle": "isRouterCanAccess 應該允許普通 user 訪問公開路由",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { baseUrl: \"\", path: \"/api/public/studies\", method: \"GET\" };\nconst result = isRouterCanAccess(req, \"test-plugin\", [\"user\"]);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "38e4e09a-bc92-493f-bfd9-3b4837b0acd9",
              "parentUUID": "cf01bba7-bca2-489f-94e4-657a751b9abf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "不應該允許普通 user 訪問 admin 路由",
              "fullTitle": "isRouterCanAccess 不應該允許普通 user 訪問 admin 路由",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { baseUrl: \"\", path: \"/admin/dashboard\", method: \"GET\" };\nconst result = isRouterCanAccess(req, \"test-plugin\", [\"user\"]);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "22b1b159-e32e-46df-9f3b-8a5064aa53f8",
              "parentUUID": "cf01bba7-bca2-489f-94e4-657a751b9abf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "應該支持多個 role",
              "fullTitle": "isRouterCanAccess 應該支持多個 role",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { baseUrl: \"\", path: \"/admin/dashboard\", method: \"GET\" };\nconst result = isRouterCanAccess(req, \"test-plugin\", [\"user\", \"admin\"]);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "1be5ab4f-156b-4692-a7b5-26d2d1bde7c3",
              "parentUUID": "cf01bba7-bca2-489f-94e4-657a751b9abf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c5846d4b-31bd-41b2-97ba-7df432a0e226",
            "2bc6fbfc-38f6-44d9-9dfc-abed5d455bec",
            "131c5e65-ae9b-4915-8d9e-0aa21d70ec1c",
            "792ababd-e332-473f-945f-914ae61c8c57",
            "38e4e09a-bc92-493f-bfd9-3b4837b0acd9",
            "22b1b159-e32e-46df-9f3b-8a5064aa53f8",
            "1be5ab4f-156b-4692-a7b5-26d2d1bde7c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 3000000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 3000000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.6.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}